{
  "h1": "リファレンス",
  "reference-search": "リファレンスを検索",
  "reference-description1": "お探しのものが見つからない場合は、以下を確認することをお勧めします。",
  "reference-description3": "また、リファレンスのオフライン版をダウンロードすることもできます。",
  "reference-contribute2": "お知らせください。",
  "reference-error1": "エラーまたはタイポを見つけましたか？",
  "reference-error3": "編集してください。",
  "reference-error5": "そしてプルリクエストを出してください！",
  "reference-example": "例",
  "reference-description": "説明",
  "reference-extends": "継承",
  "reference-parameters": "パラメータ",
  "reference-syntax": "構文",
  "reference-returns": "戻り値",
  "Environment": "環境",
  "Color": "色",
  "Color Conversion": "色変換",
  "Creating & Reading": "作成と読み取り",
  "Setting": "設定",
  "Shape": "形状",
  "2D Primitives": "2D プリミティブ",
  "Attributes": "属性",
  "Curves": "曲線",
  "Vertex": "頂点",
  "Constants": "定数",
  "Structure": "構造",
  "DOM": "DOM",
  "Rendering": "レンダリング",
  "Foundation": "基礎",
  "Transform": "変形",
  "Data": "データ",
  "LocalStorage": "ローカルストレージ",
  "Dictionary": "辞書",
  "Events": "イベント",
  "Acceleration": "加速度",
  "Keyboard": "キーボード",
  "Mouse": "マウス",
  "Touch": "タッチ",
  "Image": "画像",
  "Loading & Displaying": "読み込みと表示",
  "Pixels": "ピクセル",
  "IO": "入出力",
  "Input": "入力",
  "Output": "出力",
  "Table": "表",
  "Math": "数学",
  "Calculation": "計算",
  "Vector": "ベクトル",
  "Noise": "ノイズ",
  "Random": "ランダム",
  "Trigonometry": "三角関数",
  "Typography": "タイポグラフィ",
  "Array Functions": "配列関数",
  "Conversion": "変換",
  "String Functions": "文字列関数",
  "Time & Date": "時間と日付",
  "3D Primitives": "3D プリミティブ",
  "3D": "3D",
  "Interaction": "インタラクション",
  "Lights": "ライト",
  "3D Models": "3D モデル",
  "Material": "マテリアル",
  "Camera": "カメラ",
  "p5": {
    "description": [
      "これはp5インスタンスコンストラクタです。",
      "p5インスタンスには、p5スケッチに関連するすべてのプロパティとメソッドが含まれています。入力されたスケッチクロージャを受け取り、生成されたp5キャンバスをノードにアタッチするためのオプションのノードパラメータを取ることもできます。スケッチクロージャは、新しく作成されたp5インスタンスを唯一の引数として受け取り、スケッチの実行に必要なpreload()、setup()、および/またはdraw()プロパティを設定することもできます。",
      "p5スケッチは、「グローバル」モードまたは「インスタンス」モードで実行できます。「グローバル」 - すべてのプロパティとメソッドがウィンドウにアタッチされます「インスタンス」 - すべてのプロパティとメソッドがこのp5オブジェクトにバインドされます"
    ],
    "returns": "P5：p5インスタンス",
    "params": {
      "sketch": "Function: 与えられたp5インスタンスにオプションでpreload()、setup()、および/またはdraw()プロパティを設定できるクロージャ",
      "node": "HTMLElement:（オプション）キャンバスをアタッチする要素"
    },
    "describe": {
      "description": [
        "キャンバスにスクリーンリーダー対応の説明を作成します。最初のパラメータは、キャンバスの説明を示す文字列である必要があります。2つ目のパラメータはオプションです。指定された場合、説明の表示方法が決まります。",
        "<code class=\"language-javascript\">describe(text, LABEL)</code>は、キャンバスに隣接するdiv内にある<a href=\"https://en.wikipedia.org/wiki/Museum_label\" target=\"_blank\">墓石または展示ラベル/キャプション</a>として、すべてのユーザーに説明を表示します。CSSで好みのスタイルに変更できます。",
        "<code class=\"language-javascript\">describe(text, FALLBACK)</code>は、<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">キャンバス要素内のサブDOM</a>で、スクリーンリーダーユーザー専用に説明を利用可能にします。2つ目のパラメータが指定されていない場合、デフォルトで説明はスクリーンリーダーユーザーにのみ利用可能です。"
      ],
      "params": {
        "text": "String: キャンバスの説明",
        "display": "Constant: （オプション）LABEL または FALLBACK のいずれか"
      }
    },
    "describeElement": {
      "description": [
        "この関数は、キャンバス内の要素（一緒に意味を作り出す形状または形状のグループ）に対してスクリーンリーダー対応の説明を作成します。最初のパラメータは要素の名前である必要があります。2つ目のパラメータは、要素の説明を示す文字列である必要があります。3つ目のパラメータはオプションです。指定された場合、要素の説明の表示方法が決まります。",
        "<code class=\"language-javascript\">describeElement(name, text, LABEL)</code>は、キャンバスに隣接するdiv内にある<a href=\"https://en.wikipedia.org/wiki/Museum_label\" target=\"_blank\">墓石または展示ラベル/キャプション</a>として、すべてのユーザーに要素の説明を表示します。CSSで好みのスタイルに変更できます。",
        "<code class=\"language-javascript\">describeElement(name, text, FALLBACK)</code>は、<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">キャンバス要素内のサブDOM</a>で、スクリーンリーダーユーザー専用に要素の説明を利用可能にします。2つ目のパラメータが指定されていない場合、デフォルトで要素の説明はスクリーンリーダーユーザーにのみ利用可能です。"
      ],
      "params": {
        "name": "String: 要素の名前",
        "text": "String: 要素の説明",
        "display": "Constant: （オプション）LABEL または FALLBACK のいずれか"
      }
    },
    "textOutput": {
      "description": [
        "<code class=\"language-javascript\">textOutput()</code>は、キャンバス上に存在する形状を説明するスクリーンリーダー対応の出力を作成します。キャンバスの一般的な説明には、キャンバスのサイズ、キャンバスの色、キャンバス内の要素の数（例：「あなたの出力は、400x400ピクセルのラベンダーブルーのキャンバスで、以下の4つの形状が含まれています：」）が含まれます。この説明の後に、各形状の色、位置、面積が説明された形状のリストが続きます（例：「キャンバスの1％を覆う左上のオレンジ色の楕円」）。各要素を選択すると、詳細が表示されます。要素のテーブルも提供されます。このテーブルでは、形状、色、位置、座標、面積が説明されています（例：「オレンジ色の楕円 位置=左上 面積=2」）。",
        "<code class=\"language-javascript\">textOutput()</code>および<code class=\"language-javascript\">textOutput(FALLBACK)</code>は、<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">キャンバス要素内のサブDOM</a>でスクリーンリーダーにアクセス可能な出力を利用可能にします。<code class=\"language-javascript\">textOutput(LABEL)</code>は、キャンバスに隣接する出力が含まれる追加のdivを作成し、これはコーディング時にキャンバスのサブDOM外に出力を表示したい非スクリーンリーダーユーザーにとって便利です。ただし、LABELを使用すると、スクリーンリーダーユーザーにとって不要な冗長性が生じます。スケッチの開発プロセスの一部としてのみLABELを使用し、公開またはスクリーンリーダーユーザーと共有する前に削除することをお勧めします。"
      ],
      "params": {
        "display": "Constant: （オプション）FALLBACK または LABEL のいずれか"
      }
    },
    "gridOutput": {
      "description": [
        "<code class=\"language-javascript\">gridOutput()</code>は、キャンバスの内容を、各形状の空間的な位置に基づいたグリッド（htmlテーブル）の形でレイアウトします。テーブル出力の前に、キャンバスの簡単な説明が利用可能です。この説明には、背景の色、キャンバスのサイズ、オブジェクトの数、オブジェクトの種類（例：「ラベンダーブルーのキャンバスは200x200で、3つの楕円と1つの長方形が含まれています」）が含まれます。グリッドは空間的にコンテンツを記述し、各要素はその位置に応じてテーブルのセルに配置されます。各セル内の要素には、その要素の色と形状のタイプが利用可能です（例：「オレンジ色の楕円」）。これらの説明は個別に選択して詳細を取得できます。形状、色、位置、面積が説明された要素のリスト（例：「オレンジ色の楕円 位置=左上 面積=1％」）も利用可能です。",
        "<code class=\"language-javascript\">gridOutput()</code>および<code class=\"language-javascript\">gridOutput(FALLBACK)</code>は、<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">キャンバス要素内のサブDOM</a>でスクリーンリーダーにアクセス可能な出力を利用可能にします。<code class=\"language-javascript\">gridOutput(LABEL)</code>は、キャンバスに隣接する出力が含まれる追加のdivを作成し、これはコーディング時にキャンバスのサブDOM外に出力を表示したい非スクリーンリーダーユーザーにとって便利です。ただし、LABELを使用すると、スクリーンリーダーユーザーにとって不要な冗長性が生じます。スケッチの開発プロセスの一部としてのみLABELを使用し、公開またはスクリーンリーダーユーザーと共有する前に削除することをお勧めします。"
      ],
      "params": {
        "display": "Constant: （オプション）FALLBACK または LABEL のいずれか"
      }
    },
    "alpha": {
      "description": ["色またはピクセル配列からアルファ値を抽出します。"],
      "returns": "Number: アルファ値",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> オブジェクト、カラーコンポーネント、または CSS カラー"
      }
    },
    "blue": {
      "description": ["色またはピクセル配列から青の値を抽出します。"],
      "returns": "Number: 青の値",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> オブジェクト、カラーコンポーネント、または CSS カラー"
      }
    },
    "brightness": {
      "description": ["色またはピクセル配列からHSB明るさ値を抽出します。"],
      "returns": "Number: 明るさの値",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> オブジェクト、カラーコンポーネント、または CSS カラー"
      }
    },
    "color": {
      "description": [
        "色データ型の変数に格納するための色を作成します。パラメータは、現在の <a href=\"#/p5/colorMode\">colorMode()</a> に応じて RGB または HSB の値として解釈されます。デフォルトモードは 0 から 255 の RGB 値であり、したがって、関数コール color(255, 204, 0) は鮮やかな黄色の色を返します。",
        "<a href=\"#/p5/color\">color()</a> に 1 つの値のみが提供される場合、グレースケールの値として解釈されることに注意してください。2 つ目の値を追加すると、それがアルファ透明度に使用されます。3 つの値が指定されると、それらは RGB または HSB の値として解釈されます。4 つ目の値を追加すると、アルファ透明度が適用されます。",
        "単一の文字列引数が提供される場合、RGB、RGBA、および 16 進数 CSS カラー文字列およびすべての名前付きカラー文字列がサポートされます。この場合、2 番目の引数としてのアルファ数値値はサポートされず、RGBA 形式を使用する必要があります。"
      ],
      "returns": "p5.Color: 結果の色",
      "params": {
        "gray": "Number: 白と黒の間の値を指定する数値。",
        "alpha": "Number: （オプション）現在のカラーレンジに対するアルファ値（デフォルトは 0-255）",
        "v1": "Number: 現在のカラーレンジに対する赤または色相値",
        "v2": "Number: 現在のカラーレンジに対する緑または彩度値",
        "v3": "Number: 現在のカラーレンジに対する青または明るさの値",
        "value": "String: カラー文字列",
        "values": "Number[]: 色の赤、緑、青、およびアルファ成分を含む配列",
        "color": "p5.Color"
      }
    },
    "green": {
      "description": ["色またはピクセル配列から緑の値を抽出します。"],
      "returns": "Number: 緑の値",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> オブジェクト、カラーコンポーネント、または CSS カラー"
      }
    },
    "hue": {
      "description": [
        "色またはピクセル配列から色相値を抽出します。",
        "色相は HSB と HSL の両方に存在します。この関数は、HSB カラーオブジェクトが与えられた場合（またはカラーモードが HSB の場合にピクセル配列が与えられた場合）、HSB 正規化された色相を返しますが、それ以外の場合は HSL 正規化された色相をデフォルトで返します。 （最大色相設定がそれぞれのシステムで異なる場合のみ、値が異なります。）"
      ],
      "returns": "Number: 色相",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> オブジェクト、カラーコンポーネント、または CSS カラー"
      }
    },
    "lerpColor": {
      "description": [
        "2つの色をブレンドして、それらの間にある第3の色を見つけます。amt パラメータは、2つの値の間で補間する量で、0.0 は最初の色に等しく、0.1 は最初の色に非常に近く、0.5 はちょうど中間です。0 未満の量は 0 として扱われます。同様に、1を超える量は1でキャップされます。<a href=\"#/p5/lerp\">lerp()</a> の動作とは異なりますが、範囲外の数値が奇妙で予期しない色を生成しないようにするために必要です。",
        "色の補間方法は、現在のカラーモードに依存します。"
      ],
      "returns": "p5.Color: 補間された色",
      "params": {
        "c1": "p5.Color: この色から補間",
        "c2": "p5.Color: この色へ補間",
        "amt": "Number: 0 から 1 の間の数値"
      }
    },
    "lightness": {
      "description": ["色またはピクセル配列から HSL 輝度値を抽出します。"],
      "returns": "Number: 輝度",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> オブジェクト、カラーコンポーネント、または CSS カラー"
      }
    },
    "red": {
      "description": ["色またはピクセル配列から赤の値を抽出します。"],
      "returns": "Number: 赤の値",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> オブジェクト、カラーコンポーネント、または CSS カラー"
      }
    },
    "saturation": {
      "description": [
        "色またはピクセル配列から彩度の値を抽出します。",
        "彩度は、HSB と HSL で異なるスケールで表されます。この関数は、HSB カラーオブジェクトを指定した場合（またはカラーモードが HSB の場合にピクセル配列を指定した場合）には、HSB 彩度を返しますが、それ以外の場合は HSL 彩度がデフォルトになります。"
      ],
      "returns": "Number: 彩度の値",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> オブジェクト、カラーコンポーネント、または CSS カラー"
      }
    },
    "background": {
      "description": [
        "<a href=\"#/p5/background\">background()</a> 関数は、p5.js キャンバスの背景に使用される色を設定します。デフォルトの背景は透明です。この関数は通常、<a href=\"#/p5/draw\">draw()</a> 内で各フレームの開始時にディスプレイウィンドウをクリアするために使用されますが、<a href=\"#/p5/setup\">setup()</a> 内で最初のフレームの背景を設定するために使用されることもありますし、背景を一度だけ設定する必要がある場合にも使用できます。",
        "色は、現在の <a href=\"#/p5/colorMode\">colorMode</a> に応じて、RGB、HSB、または HSL カラーで指定されます。(デフォルトのカラースペースは RGB で、各値の範囲は 0 から 255 です)。デフォルトでは、アルファの範囲も 0 から 255 です。",
        "単一の文字列引数が提供された場合、RGB、RGBA、および 16 進数の CSS カラー文字列およびすべての名前付きカラー文字列がサポートされます。この場合、2 番目の引数としてのアルファ数値はサポートされず、RGBA 形式を使用する必要があります。",
        "背景色を設定するために、<a href=\"#/p5.Color\">p5.Color</a> オブジェクトも提供できます。",
        "背景画像として設定するために、<a href=\"#/p5.Image\">p5.Image</a> も提供できます。"
      ],
      "params": {
        "color": "p5.Color: <a href=\"#/p5/color\">color()</a> 関数で作成された任意の値",
        "colorstring": "String: カラー文字列、対応する形式は次のとおりです: 整数 rgb() または rgba()、パーセンテージ rgb() または rgba()、3 桁の 16 進数、6 桁の 16 進数",
        "a": "Number: (任意) 現在のカラー範囲に対する背景の不透明度 (デフォルトは 0-255)",
        "gray": "Number: 白と黒の間の値を指定",
        "v1": "Number: 現在のカラーモードに応じた赤または色相の値",
        "v2": "Number: 現在のカラーモードに応じた緑または彩度の値",
        "v3": "Number: 現在のカラーモードに応じた青または明るさの値",
        "values": "Number[]: 色の赤、緑、青、およびアルファ成分を含む配列",
        "image": "p5.Image: 背景として設定する <a href=\"#/p5/loadImage\">loadImage()</a> または <a href=\"#/p5/createImage\">createImage()</a> で作成された画像（スケッチウィンドウと同じサイズである必要があります）"
      }
    },
    "clear": {
      "description": [
        "バッファ内のピクセルをクリアします。この関数はキャンバスのみをクリアします。<a href=\"#/p5/createVideo\">createVideo()</a> や <a href=\"#/p5/createDiv\">createDiv()</a> などの createX() メソッドで作成されたオブジェクトはクリアされません。メインのグラフィックスコンテキストとは異なり、<a href=\"#/p5/createGraphics\">createGraphics()</a> で作成された追加のグラフィックス領域のピクセルは完全または部分的に透明にできます。この関数はすべてをクリアして、すべてのピクセルを 100% 透明にします。",
        "注: WebGL モードでは、この関数に正規化された RGBA カラー値を渡して、画面を特定の色にクリアできます。色に加えて、デプスバッファもクリアされます。WebGL レンダラーを使用していない場合、これらのカラー値は効果がありません。"
      ],
      "params": {
        "r": "Number: 正規化された赤の値。",
        "g": "Number: 正規化された緑の値。",
        "b": "Number: 正規化された青の値。",
        "a": "Number: 正規化されたアルファの値。"
      }
    },
    "colorMode": {
      "description": [
        "<a href=\"#/p5/colorMode\">colorMode()</a> は、p5.jsが色データを解釈する方法を変更します。デフォルトでは、<a href=\"#/p5/fill\">fill()</a>、<a href=\"#/p5/stroke\">stroke()</a>、<a href=\"#/p5/background\">background()</a>、および <a href=\"#/p5/color\">color()</a> のパラメータは、RGBカラーモデルを使用して0から255の間の値で定義されます。これは、colorMode(RGB, 255) を設定することと同等です。colorMode(HSB) を設定すると、代わりにHSBシステムを使用できます。デフォルトでは、これは colorMode(HSB, 360, 100, 100, 1) です。HSLも使用できます。",
        "注: 既存のカラーオブジェクトは、それらが作成されたモードを記憶しているため、外観に影響を与えることなく、好きなようにモードを変更できます。"
      ],
      "params": {
        "mode": "Constant: RGB、HSB、またはHSLのいずれか。それぞれ、赤/緑/青と色相/彩度/明度（または輝度）に対応します。",
        "max": "Number: (オプション) すべての値の範囲",
        "max1": "Number: 現在のカラーモードに応じて、赤または色相の範囲",
        "max2": "Number: 現在のカラーモードに応じて、緑または彩度の範囲",
        "max3": "Number: 現在のカラーモードに応じて、青または明度/輝度の範囲",
        "maxA": "Number: (オプション) アルファの範囲"
      }
    },
    "fill": {
      "description": [
        "図形に塗りつぶし色を設定します。例えば、fill(204, 102, 0) を実行すると、その後に描画される全ての図形はオレンジ色で塗りつぶされます。この色は、現在の <a href=\"#/p5/colorMode\">colorMode()</a> によってRGBまたはHSBのいずれかで指定されます。 (デフォルトのカラースペースはRGBで、各値の範囲は0から255です) アルファの範囲もデフォルトでは0から255です。",
        "単一の文字列引数が提供された場合、RGB、RGBA、Hex CSS カラーストリングおよびすべての名前付きカラーストリングがサポートされます。この場合、2番目の引数としてのアルファ数値はサポートされず、RGBA形式を使用する必要があります。",
        "塗りつぶし色を設定するために、<a href=\"#/p5.Color\">p5.Color</a> オブジェクトも提供できます。"
      ],
      "params": {
        "v1": "Number: 現在のカラーレンジに対する赤または色相の値",
        "v2": "Number: 現在のカラーレンジに対する緑または彩度の値",
        "v3": "Number: 現在のカラーレンジに対する青または明度の値",
        "alpha": "Number (オプション)",
        "value": "String: カラー文字列",
        "gray": "Number: グレーの値",
        "values": "Number[]: 赤、緑、青、およびアルファ成分を含む配列",
        "color": "p5.Color: 塗りつぶし色"
      }
    },
    "noFill": {
      "description": [
        "ジオメトリの塗りつぶしを無効にします。 <a href=\"#/p5/noStroke\">noStroke()</a> と <a href=\"#/p5/noFill\">noFill()</a> の両方が呼び出されると、画面には何も描画されません。"
      ]
    },
    "noStroke": {
      "description": [
        "ストローク（輪郭）の描画を無効にします。<a href=\"#/p5/noStroke\">noStroke()</a> と <a href=\"#/p5/noFill\">noFill()</a> の両方が呼び出されると、画面には何も描画されません。"
      ]
    },
    "stroke": {
      "description": [
        "線や図形の境界線を描画する際に使用される色を設定します。この色は、現在の <a href=\"#/p5/colorMode\">colorMode()</a> に応じて RGB または HSB 色で指定されます（デフォルトの色空間は RGB で、各値の範囲は 0 から 255 です）。デフォルトのアルファ範囲も 0 から 255 です。",
        "単一の文字列引数が与えられた場合、RGB、RGBA、Hex CSS カラー文字列およびすべての名前付きカラー文字列がサポートされます。この場合、2 番目の引数としてアルファ数値はサポートされず、RGBA 形式を使用する必要があります。",
        "<a href=\"#/p5.Color\">p5.Color</a> オブジェクトも、ストロークカラーを設定するために提供できます。"
      ],
      "params": {
        "v1": "Number: 現在のカラーレンジに対する赤または色相の値",
        "v2": "Number: 現在のカラーレンジに対する緑または彩度の値",
        "v3": "Number: 現在のカラーレンジに対する青または明度の値",
        "alpha": "Number (任意)",
        "value": "String: カラー文字列",
        "gray": "Number: グレーの値",
        "values": "Number[]: 色の赤、緑、青、アルファ成分を含む配列",
        "color": "p5.Color: ストロークカラー"
      }
    },
    "erase": {
      "description": [
        "<a href=\"#/p5/erase\">erase()</a> に続くすべての描画は、キャンバスから減算されます。消去された領域は、キャンバスの下にあるウェブページが表示されます。<a href=\"#/p5/noErase\">noErase()</a> で消去をキャンセルできます。",
        "<a href=\"#/p5/erase\">erase()</a> と <a href=\"#/p5/noErase\">noErase()</a> の間にある <a href=\"#/p5/image\">image()</a> と <a href=\"#/p5/background\">background()</a> での描画は、キャンバスを消去せず、通常どおりに動作します。"
      ],
      "params": {
        "strengthFill": "Number: (任意) 形状の塗りつぶしの消去強度の数値（0-255）。引数がない場合、デフォルトで 255 になり、最大強度になります。",
        "strengthStroke": "Number: (任意) 形状のストロークの消去強度の数値（0-255）。引数がない場合、デフォルトで 255 になり、最大強度になります。"
      }
    },
    "noErase": {
      "description": [
        "<a href=\"#/p5/erase\">erase()</a> で開始された消去を終了します。<a href=\"#/p5/fill\">fill()</a>、<a href=\"#/p5/stroke\">stroke()</a>、および <a href=\"#/p5/blendMode\">blendMode()</a> の設定は、<a href=\"#/p5/erase\">erase()</a> を呼び出す前の状態に戻ります。"
      ]
    },
    "arc": {
      "description": [
        "画面に円弧を描画します。x、y、w、h、start、stop のみで呼び出されると、円弧は開いた扇形として描画され、塗りつぶされます。mode パラメータが提供された場合、円弧は開いた半円（OPEN）、閉じた半円（CHORD）、または閉じた扇形（PIE）として塗りつぶされます。原点は <a href=\"#/p5/ellipseMode\">ellipseMode()</a> 関数で変更できます。",
        "円弧は、start が楕円上でどこにあるかから、stop が楕円上でどこにあるかまで、常に時計回りに描画されます。start または stop に TWO_PI を加算または減算しても、それらが楕円上でどこにあるかは変わりません。start と stop が同じ場所にある場合、完全な楕円が描画されます。y 軸が下向きに増加するため、角度は正の x 方向（\"3 時\"）から時計回りに測定されることに注意してください。"
      ],
      "params": {
        "x": "Number: 円弧の楕円の x 座標",
        "y": "Number: 円弧の楕円の y 座標",
        "w": "Number: デフォルトでの円弧の楕円の幅",
        "h": "Number: デフォルトでの円弧の楕円の高さ",
        "start": "Number: 円弧を開始する角度（ラジアンで指定）",
        "stop": "Number: 円弧を終了する角度（ラジアンで指定）",
        "mode": "Constant: （オプション）円弧の描画方法を決定するオプションパラメータ。CHORD、PIE、または OPEN のいずれか",
        "detail": "Integer: （オプション）WebGL モード専用のオプションパラメータ。これは、円弧の周囲を構成する頂点の数を指定するためのものです。デフォルト値は 25 です。50 を超える詳細にはストロークを描画しません。"
      }
    },
    "ellipse": {
      "description": [
        "画面に楕円（オーバル）を描画します。デフォルトでは、最初の2つのパラメーターは楕円の中心の位置を設定し、3番目と4番目のパラメーターは形状の幅と高さを設定します。高さが指定されていない場合、幅の値が幅と高さの両方に使用されます。負の高さまたは幅が指定された場合、絶対値が使用されます。",
        "幅と高さが等しい楕円は円です。原点は <a href=\"#/p5/ellipseMode\">ellipseMode()</a> 関数で変更できます。"
      ],
      "params": {
        "x": "Number: 楕円の中心の x 座標。",
        "y": "Number: 楕円の中心の y 座標。",
        "w": "Number: 楕円の幅。",
        "h": "Number: （オプション）楕円の高さ。",
        "detail": "Integer: （オプション）WEBGL モード専用のオプションパラメータ。これは、楕円の周囲を構成する頂点の数を指定するためのものです。デフォルト値は 25 です。50 を超える詳細にはストロークを描画しません。"
      }
    },
    "circle": {
      "description": [
        "画面に円を描画します。円は単純な閉じた図形です。中心と呼ばれる特定の点から与えられた距離にある平面上のすべての点の集合です。この関数は、楕円の幅と高さが同じ場合の<a href=\"#/p5/ellipse\">ellipse()</a>関数の特殊なケースです。楕円の高さと幅は、円の直径に対応します。デフォルトでは、最初の2つのパラメーターは円の中心の位置を設定し、3番目のパラメーターは円の直径を設定します。"
      ],
      "params": {
        "x": "Number: 円の中心の x 座標。",
        "y": "Number: 円の中心の y 座標。",
        "d": "Number: 円の直径。"
      }
    },
    "line": {
      "description": [
        "画面に線（2点間の直接の経路）を描画します。4つのパラメーターで呼び出されると、デフォルトの幅1ピクセルの2Dの線を描画します。この幅は、<a href=\"#/p5/strokeWeight\"> strokeWeight()</a>関数を使用して変更できます。線は塗りつぶしができないため、<a href=\"#/p5/fill\">fill()</a>関数は線の色に影響しません。線の色を変更するには、<a href=\"#/p5/stroke\">stroke()</a>関数を使用してください。"
      ],
      "params": {
        "x1": "Number: 最初の点のx座標",
        "y1": "Number: 最初の点のy座標",
        "x2": "Number: 2番目の点のx座標",
        "y2": "Number: 2番目の点のy座標",
        "z1": "Number: 最初の点のz座標",
        "z2": "Number: 2番目の点のz座標"
      }
    },
    "point": {
      "description": [
        "1ピクセルの次元での空間内の座標である点を描画します。最初のパラメーターは点の水平方向の値であり、2番目のパラメーターは点の垂直方向の値です。点の色は<a href=\"#/p5/stroke\">stroke()</a>関数で変更されます。点のサイズは、<a href=\"#/p5/strokeWeight\">strokeWeight()</a>関数で変更できます。"
      ],
      "params": {
        "x": "Number: x座標",
        "y": "Number: y座標",
        "z": "Number: （オプション）z座標（WebGLモード用）",
        "coordinate_vector": "p5.Vector: 座標ベクトル"
      }
    },
    "quad": {
      "description": [
        "キャンバスに四角形を描画します。四角形は、四辺多角形です。長方形に似ていますが、その辺の間の角度は90度に制約されていません。最初のパラメータのペア（x1、y1）が最初の頂点を設定し、その後のペアは定義された形状を時計回りまたは反時計回りに進むべきです。z引数は、quad()がWEBGLモードで使用されている場合にのみ機能します。"
      ],
      "params": {
        "x1": "Number: 最初の点のx座標",
        "y1": "Number: 最初の点のy座標",
        "x2": "Number: 2番目の点のx座標",
        "y2": "Number: 2番目の点のy座標",
        "x3": "Number: 3番目の点のx座標",
        "y3": "Number: 3番目の点のy座標",
        "x4": "Number: 4番目の点のx座標",
        "y4": "Number: 4番目の点のy座標",
        "detailX": "Integer: （オプション）x方向のセグメントの数",
        "detailY": "Integer: （オプション）y方向のセグメントの数",
        "z1": "Number: 最初の点のz座標",
        "z2": "Number: 2番目の点のz座標",
        "z3": "Number: 3番目の点のz座標",
        "z4": "Number: 4番目の点のz座標"
      }
    },
    "rect": {
      "description": [
        "キャンバスに長方形を描画します。長方形は、すべての角度が90度の四辺閉形状です。デフォルトでは、最初の2つのパラメータは左上隅の位置を設定し、3番目は幅を設定し、4番目は高さを設定します。これらのパラメータの解釈方法は、<a href=\"#/p5/rectMode\">rectMode()</a>関数で変更できます。",
        "指定された場合、5番目、6番目、7番目、8番目のパラメータは、それぞれ左上、右上、右下、左下の角の半径を決定します。省略された角の半径パラメータは、パラメータリスト内の前に指定された半径値に設定されます。"
      ],
      "params": {
        "x": "Number: 長方形のx座標。",
        "y": "Number: 長方形のy座標。",
        "w": "Number: 長方形の幅。",
        "h": "Number: （オプション）長方形の高さ。",
        "tl": "Number: （オプション）左上の角の半径。",
        "tr": "Number: （オプション）右上の角の半径。",
        "br": "Number: （オプション）右下の角の半径。",
        "bl": "Number: （オプション）左下の角の半径。",
        "detailX": "Integer: （オプション）x方向のセグメント数（WebGLモード用）",
        "detailY": "Integer: （オプション）y方向のセグメント数（WebGLモード用）"
      }
    },
    "square": {
      "description": [
        "画面に正方形を描画します。正方形は4つの角度が90度で、4つの辺が等しい4辺形です。この関数は、幅と高さが同じで、パラメータが「s」で辺の長さが設定されているrect()関数の特殊な場合です。デフォルトでは、最初の2つのパラメータは左上の角の位置を設定し、3つ目のパラメータは正方形の辺の長さを設定します。これらのパラメータの解釈方法は、rectMode()関数で変更できます。",
        "4番目から7番目のパラメータが指定された場合、それぞれ左上、右上、右下、左下の角の半径が決定されます。省略されたコーナー半径パラメータは、パラメータリストで前に指定された半径値に設定されます。"
      ],
      "params": {
        "x": "Number: 正方形のx座標。",
        "y": "Number: 正方形のy座標。",
        "s": "Number: 正方形の辺の長さ。",
        "tl": "Number: (オプション) 左上の角の半径。",
        "tr": "Number: (オプション) 右上の角の半径。",
        "br": "Number: (オプション) 右下の角の半径。",
        "bl": "Number: (オプション) 左下の角の半径。"
      }
    },
    "triangle": {
      "description": [
        "三角形をキャンバスに描画します。三角形は3つの点を結びつけて作られる平面です。最初の2つの引数は最初の点を指定し、その次の2つの引数は2番目の点を指定し、最後の2つの引数は3番目の点を指定します。"
      ],
      "params": {
        "x1": "Number: 最初の点のx座標。",
        "y1": "Number: 最初の点のy座標。",
        "x2": "Number: 2番目の点のx座標。",
        "y2": "Number: 2番目の点のy座標。",
        "x3": "Number: 3番目の点のx座標。",
        "y3": "Number: 3番目の点のy座標。"
      }
    },
    "ellipseMode": {
      "description": [
        "楕円を描画するときの基準点を変更することができます。具体的には、<a href=\"#/p5/ellipse\">ellipse()</a>、<a href=\"#/p5/circle\">circle()</a>、<a href=\"#/p5/arc\">arc()</a> のパラメータの解釈方法を変更します。",
        "デフォルトのモードは <code>CENTER</code> で、最初の2つのパラメータは中心点のx座標とy座標として解釈され、3つ目と4つ目のパラメータは幅と高さとして解釈されます。",
        "<code>ellipseMode(RADIUS)</code> では、最初の2つのパラメータも中心点のx座標とy座標として解釈されますが、3つ目と4つ目のパラメータは、幅と高さの半分をそれぞれ指定します。",
        "<code>ellipseMode(CORNER)</code> では、最初の2つのパラメータは楕円の左上隅として解釈され、3つ目と4つ目のパラメータは幅と高さとして解釈されます。",
        "<code>ellipseMode(CORNERS)</code> では、最初の2つのパラメータは楕円の境界ボックスの1つの隅の位置として解釈され、3つ目と4つ目のパラメータは対角線上の相対的な位置として解釈されます。",
        "このメソッドのパラメータは、事前に定義された定数であるため、大文字で書く必要があります。JavaScriptは大文字小文字を区別するためです。"
      ],
      "params": {
        "mode": "定数: CENTER、RADIUS、CORNER、またはCORNERS"
      }
    },
    "noSmooth": {
      "description": [
        "すべてのジオメトリをジャギー（エイリアス）のあるエッジで描画します。",
        "2Dモードでは、デフォルトで<a href=\"#/p5/smooth\">smooth()</a>が有効になっているため、ジオメトリ、イメージ、フォントのスムージングを無効にするには<a href=\"#/p5/noSmooth\">noSmooth()</a>を呼び出す必要があります。",
        "3Dモードでは、デフォルトで<a href=\"#/p5/noSmooth\">noSmooth()</a>が有効になっているため、ジオメトリのスムーズ（アンチエイリアス）エッジを使用するには<a href=\"#/p5/smooth\">smooth()</a>を呼び出す必要があります。"
      ]
    },
    "rectMode": {
      "description": [
        "rect()で描画される矩形の描画開始位置を変更します。",
        "デフォルトのモードは<code>CORNER</code>で、最初の2つのパラメータは形状の左上隅を表し、3番目と4番目のパラメータは幅と高さです。",
        "<code>rectMode(CORNERS)</code>は、最初の2つのパラメータを1つの隅の位置とし、3番目と4番目のパラメータを対角線上の反対側の位置として解釈します。注意：矩形は座標の間に描画されるため、最初の隅が左上隅である必要はありません。",
        "<code>rectMode(CENTER)</code>は、最初の2つのパラメータを形状の中心点とし、3番目と4番目のパラメータを幅と高さとして解釈します。",
        "<code>rectMode(RADIUS)</code>も最初の2つのパラメータを形状の中心点として使用しますが、3番目と4番目のパラメータをそれぞれ形状の幅と高さの半分として指定します。",
        "このメソッドのパラメータはすべて大文字で書かれている必要があります。これは、定数がすべて大文字で定義されているためであり、JavaScriptは大文字と小文字を区別する言語であるためです。"
      ],
      "params": {
        "mode": "Constant: CORNER、CORNERS、CENTER、RADIUSのいずれか"
      }
    },
    "smooth": {
      "description": [
        "スムーズ（アンチエイリアス）のエッジを使用してすべてのジオメトリを描画します。 <a href=\"#/p5/smooth\">smooth()</a>は、リサイズされたイメージの品質も向上させます。",
        "2Dモードでは、<a href=\"#/p5/smooth\">smooth()</a>がデフォルトで有効になっていることに注意してください。 <a href=\"#/p5/noSmooth\">noSmooth()</a>を使用して、ジオメトリ、イメージ、フォントのスムージングを無効にすることができます。",
        "3Dモードでは、<a href=\"#/p5/noSmooth\">noSmooth()</a>がデフォルトで有効になっているため、ジオメトリにスムーズ（アンチエイリアス）エッジを使用するには<a href=\"#/p5/smooth\">smooth()</a>を呼び出す必要があります。"
      ]
    },
    "strokeCap": {
      "description": [
        "線の終端部の描画スタイルを設定します。これらの終端部は、丸められたもの、角ばったもの、または延長されたもののいずれかで、それぞれのパラメータで指定されます：<code>ROUND</code>、<code>SQUARE</code>、または<code>PROJECT</code>。デフォルトのスタイルは<code>ROUND</code>です。",
        "このメソッドのパラメータはすべて大文字で書かれている必要があります。これは、定数がすべて大文字で定義されているためであり、JavaScriptは大文字と小文字を区別する言語であるためです。"
      ],
      "params": {
        "cap": "Constant: ROUND、SQUARE、またはPROJECTのいずれか"
      }
    },
    "strokeJoin": {
      "description": [
        "線分を接続するジョイントのスタイルを設定します。これらのジョイントは、それぞれのパラメータで指定される、マイター、ベベル、またはラウンドになっています：<code>MITER</code>、<code>BEVEL</code>、または<code>ROUND</code>。2Dモードではデフォルトのジョイントは<code>MITER</code>で、WebGLモードでは<code>ROUND</code>です。",
        "このメソッドのパラメータはすべて大文字で書かれている必要があります。これは、定数がすべて大文字で定義されているためであり、JavaScriptは大文字と小文字を区別する言語であるためです。"
      ],
      "params": {
        "join": "Constant: MITER、BEVEL、またはROUNDのいずれか"
      }
    },
    "strokeWeight": {
      "description": [
        "線、点、および形状の周囲の境界に使用されるストロークの幅を設定します。すべての幅はピクセル単位で設定されます。",
        "以前に適用された変換やスケーリングに影響を受けることに注意してください。"
      ],
      "params": {
        "weight": "Number: ストロークの幅（ピクセル単位）"
      }
    },
    "bezier": {
      "description": [
        "画面上にキュビックベジェ曲線を描画します。これらの曲線は、アンカーポイントとコントロールポイントの系列で定義されます。最初の2つのパラメータは最初のアンカーポイントを指定し、最後の2つのパラメータは他のアンカーポイントを指定します。これらのアンカーポイントは曲線の最初と最後のポイントになります。中間のパラメータは曲線の形状を定義する2つのコントロールポイントを指定します。大まかに言うと、コントロールポイントは曲線を自分の方向に「引っ張ります」。",
        "ベジェ曲線は、フランスの自動車技師ピエール・ベジエによって開発され、ゆるやかに傾斜した曲線を定義するためにコンピュータグラフィックスで一般的に使用されます。 <a href=\"#/p5/curve\">curve()</a>も参照してください。"
      ],
      "params": {
        "x1": "Number: 最初のアンカーポイントのx座標",
        "y1": "Number: 最初のアンカーポイントのy座標",
        "x2": "Number: 最初のコントロールポイントのx座標",
        "y2": "Number: 最初のコントロールポイントのy座標",
        "x3": "Number: 2番目のコントロールポイントのx座標",
        "y3": "Number: 2番目のコントロールポイントのy座標",
        "x4": "Number: 2番目のアンカーポイントのx座標",
        "y4": "Number: 2番目のアンカーポイントのy座標",
        "z1": "Number: 最初のアンカーポイントのz座標",
        "z2": "Number: 最初のコントロールポイントのz座標",
        "z3": "Number: 2番目のコントロールポイントのz座標",
        "z4": "Number: 2番目のアンカーポイントのz座標"
      }
    },
    "bezierDetail": {
      "description": [
        "ベジェ曲線の表示に使用される解像度を設定します。デフォルト値は20です。",
        "なお、この関数はWEBGLレンダラーを使用する場合にのみ有用であり、デフォルトのキャンバスレンダラーはこの情報を使用しません。"
      ],
      "params": {
        "detail": "Number: 曲線の解像度"
      }
    },
    "bezierPoint": {
      "description": [
        "ベジェ曲線の制御点とアンカーポイントのx座標またはy座標の値が与えられた場合、この関数はベジェ曲線のt位置でのx座標またはy座標を評価します。パラメータaとdは曲線上の最初と最後の点のxまたはy座標であり、bとcは制御点の座標です。最後のパラメータtは、0から1の値で示される結果の点の位置です。これをx座標で1回、y座標で1回実行することで、ベジェ曲線のt位置での位置を取得できます。"
      ],
      "returns": "Number: t位置でのベジェ曲線の値",
      "params": {
        "a": "Number: 曲線上の最初の点の座標",
        "b": "Number: 最初の制御点の座標",
        "c": "Number: 2番目の制御点の座標",
        "d": "Number: 曲線上の最後の点の座標",
        "t": "Number: 0から1までの値"
      }
    },
    "bezierTangent": {
      "description": [
        "ベジェ曲線のパラメータ a, b, c, d における位置 t における接線を評価します。パラメータ a と d は曲線の最初と最後の点で、b と c は制御点です。t の最終的な値は 0 から 1 まで変化します。"
      ],
      "returns": "Number: 位置 t における接線の値",
      "params": {
        "a": "Number: 曲線の最初の点の座標",
        "b": "Number: 最初の制御点の座標",
        "c": "Number: 2番目の制御点の座標",
        "d": "Number: 曲線の最後の点の座標",
        "t": "Number: 0 から 1 の値"
      }
    },
    "curve": {
      "description": [
        "2点間を曲線で結ぶ。曲線は、中間の4つのパラメーターで指定された2点の間に描画される。最初の2つのパラメーターはコントロールポイントであり、曲線が描かれない場合でも、曲線がこの点から来たように見える。最後の2つのパラメーターも同様に、他のコントロールポイントを指定する。  \n長い曲線は、<a href=\"#/p5/curve\">curve()</a>関数を連結して使用するか、<a href=\"#/p5/curveVertex\">curveVertex()</a>を使用して作成できる。追加の<a href=\"#/p5/curveTightness\">curveTightness()</a>関数を使用すると、曲線のビジュアル品質を制御できる。<a href=\"#/p5/curve\">curve()</a>関数はCatmull-Romスプラインの実装である。"
      ],
      "params": {
        "x1": "Number: 最初のコントロールポイントのx座標",
        "y1": "Number: 最初のコントロールポイントのy座標",
        "x2": "Number: 最初の点のx座標",
        "y2": "Number: 最初の点のy座標",
        "x3": "Number: 2番目の点のx座標",
        "y3": "Number: 2番目の点のy座標",
        "x4": "Number: 最後のコントロールポイントのx座標",
        "y4": "Number: 最後のコントロールポイントのy座標",
        "z1": "Number: 最初のコントロールポイントのz座標",
        "z2": "Number: 最初の点のz座標",
        "z3": "Number: 2番目の点のz座標",
        "z4": "Number: 最後のコントロールポイントのz座標"
      }
    },
    "curveDetail": {
      "description": [
        "曲線の表示解像度を設定します。デフォルト値は20で、最小値は3です。",
        "この関数は、WEBGLレンダラーを使用している場合にのみ有用であり、デフォルトのキャンバスレンダラーはこの情報を使用しません。"
      ],
      "params": {
        "resolution": "Number: 曲線の解像度"
      }
    },
    "curveTightness": {
      "description": [
        "曲線描画に使用される<a href=\"#/p5/curve\">curve()</a>や<a href=\"#/p5/curveVertex\">curveVertex()</a>の形状の品質を変更します。tightnessパラメータは、曲線を頂点ポイントに合わせる方法を決定します。値0.0はtightnessのデフォルト値であり、Catmull-Rom splineで曲線が定義されます。値1.0はすべてのポイントを直線でつなぎます。-5.0から5.0の範囲内の値は曲線を変形させますが、それでも認識可能な形状を保ち、値が増大すると曲線はさらに変形します。"
      ],
      "params": {
        "amount": "Number: 元の頂点からの変形量"
      }
    },
    "curvePoint": {
      "description": [
        "パラメータtが0から1の間で変化し、aとdは曲線のコントロールポイントであり、bとcは曲線の始点と終点です。これはx座標で1回、y座標で2回行われ、tにおける曲線の位置を取得できます。"
      ],
      "returns": "Number: <a href=\"#/p5/curve\">曲線</a>上の位置tの値",
      "params": {
        "a": "Number: 曲線の最初の制御点の座標",
        "b": "Number: 最初の点の座標",
        "c": "Number: 2番目の点の座標",
        "d": "Number: 曲線の2番目の制御点の座標",
        "t": "Number: 0から1の値"
      }
    },
    "curveTangent": {
      "description": [
        "パラメータtが0から1の間で変化し、aとdは曲線上の点であり、bとcはコントロールポイントです。"
      ],
      "returns": "Number: 位置tにおける曲線の接線",
      "params": {
        "a": "Number: 最初のコントロールポイントの座標",
        "b": "Number: 曲線上の最初の点の座標",
        "c": "Number: 曲線上の2番目の点の座標",
        "d": "Number: 2番目のコントロールポイントの座標",
        "t": "Number: 0から1の値"
      }
    },
    "beginContour": {
      "description": [
        "<a href=\"#/p5/beginContour\">beginContour()</a>関数と<a href=\"#/p5/endContour\">endContour()</a>関数を使用して、文字の中心などの形状内の負の形状を作成します。 <a href=\"#/p5/beginContour\">beginContour()</a>関数は、形状の頂点を記録し始め、<a href=\"#/p5/endContour\">endContour()</a>関数は記録を停止します。負の形状を定義する頂点は、外部形状とは逆方向に「巻き」ます。最初に、外部の頂点を時計回りの順序で描き、内部の形状に対しては反時計回りの順序で描きます。",
        "これらの関数は、<a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a>のペア内でのみ使用でき、<a href=\"#/p5/translate\">translate()</a>、<a href=\"#/p5/rotate\">rotate()</a>、<a href=\"#/p5/scale\">scale()</a>などの変換は、<a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a>のペア内では機能しません。また、<a href=\"#/p5/ellipse\">ellipse()</a>や<a href=\"#/p5/rect\">rect()</a>などの他の形状を使用することもできません。"
      ]
    },
    "beginShape": {
      "description": [
        "<a href=\"#/p5/beginShape\">beginShape()</a>関数と<a href=\"#/p5/endShape\">endShape()</a>関数を使用することで、より複雑な形状を作成できます。<a href=\"#/p5/beginShape\">beginShape()</a>は、形状の頂点を記録するために使用され、<a href=\"#/p5/endShape\">endShape()</a>は記録を停止します。 kindパラメータの値によって、提供された頂点からどのタイプの形状を作成するかを指定できます。 モードが指定されていない場合、形状は任意の不規則なポリゴンである可能性があります。",
        "<a href=\"#/p5/beginShape\">beginShape()</a>関数で利用可能なパラメータは次のとおりです:",
        "POINTS: 点のシリーズを描画します。",
        "LINES: つながっていない線分のシリーズを描画します。",
        "TRIANGLES: 別々の三角形のシリーズを描画します。",
        "TRIANGLE_FAN: ファンのように、最初の頂点を共有する接続された三角形のシリーズを描画します。",
        "TRIANGLE_STRIP: ストリップ状に接続された三角形のシリーズを描画します。",
        "QUADS: 別々の四角形のシリーズを描画します。",
        "QUAD_STRIP: 隣接する辺を使用して次の四角形を形成する四角形ストリップを描画します。",
        "TESS(WEBGLのみ):明示的なテッセレーションによる曲線の塗りつぶしに対応します。",
        "<a href=\"#/p5/beginShape\">beginShape()</a>関数を呼び出した後、一連の<a href=\"#/p5/vertex\">vertex()</a>コマンドが続きます。<a href=\"#/p5/endShape\">endShape()</a>を呼び出して図形の描画を停止します。各図形は現在のストロークカラーで輪郭が描かれ、塗りつぶしカラーで塗りつぶされます。",
        "<a href=\"#/p5/translate\">translate()</a>、<a href=\"#/p5/rotate\">rotate()</a>、<a href=\"#/p5/scale\">scale()</a>などの変換は<a href=\"#/p5/beginShape\">beginShape()</a>内では機能しません。<a href=\"#/p5/ellipse\">ellipse()</a>や<a href=\"#/p5/rect\">rect()</a>などの他の図形も、<a href=\"#/p5/beginShape\">beginShape()</a>内では使用できません。"
      ],
      "params": {
        "kind": "Constant: (任意) POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, QUAD_STRIP, TESS のいずれか"
      }
    },
    "bezierVertex": {
      "description": [
        "Bezier曲線の頂点座標を指定します。bezierVertex()を呼び出すごとに、Bezier曲線の2つの制御点と1つのアンカーポイントの位置が定義され、線または図形に新しいセグメントが追加されます。WebGLモードでは、bezierVertex()は2Dおよび3Dモードで使用できます。2Dモードでは6つのパラメータが期待され、3Dモードでは9つのパラメータ（z座標を含む）が期待されます。",
        "<a href=\"#/p5/beginShape\">beginShape()</a>呼び出しで初めてbezierVertex()が使用される場合、最初のアンカーポイントを設定するために<a href=\"#/p5/vertex\">vertex()</a>の呼び出しで前置する必要があります。この関数は<a href=\"#/p5/beginShape\">beginShape()</a>と<a href=\"#/p5/endShape\">endShape()</a>の間で使用され、<a href=\"#/p5/beginShape\">beginShape()</a>にMODEまたはPOINTSパラメータが指定されていない場合に限ります。"
      ],
      "params": {
        "x2": "Number: 第1制御点のx座標",
        "y2": "Number: 第1制御点のy座標",
        "x3": "Number: 第2制御点のx座標",
        "y3": "Number: 第2制御点のy座標",
        "x4": "Number: アンカーポイントのx座標",
        "y4": "Number: アンカーポイントのy座標",
        "z2": "Number: 第1制御点のz座標 (WebGLモード用)",
        "z3": "Number: 第2制御点のz座標 (WebGLモード用)",
        "z4": "Number: アンカーポイントのz座標 (WebGLモード用)"
      }
    },
    "curveVertex": {
      "description": [
        "曲線の頂点座標を指定します。この関数は、<a href=\"#/p5/beginShape\">beginShape()</a>と<a href=\"#/p5/endShape\">endShape()</a>の間でのみ使用でき、<a href=\"#/p5/beginShape\">beginShape()</a>にMODEパラメータが指定されていない場合に限ります。WebGLモードでは、curveVertex()は2Dおよび3Dモードで使用できます。2Dモードは2つのパラメータを期待し、3Dモードは3つのパラメータを期待します。",
        "curveVertex()ラインの一連の最初と最後の点は、曲線の始点と終点をガイドするために使用されます。2番目と3番目の点の間に小さな曲線を描画するには、最低4つの点が必要です。curveVertex()で5番目の点を追加すると、2番目、3番目、4番目の点の間に曲線が描かれます。curveVertex()関数は、Catmull-Romスプラインの実装です。"
      ],
      "params": {
        "x": "Number: 頂点のx座標",
        "y": "Number: 頂点のy座標",
        "z": "Number: (オプション) 頂点のz座標 (WebGLモード用)"
      }
    },
    "endContour": {
      "description": [
        "<a href=\"#/p5/beginContour\">beginContour()</a>と<a href=\"#/p5/endContour\">endContour()</a>関数を使用して、文字'O'の中心など、図形内に負の図形を作成します。<a href=\"#/p5/beginContour\">beginContour()</a>は図形の頂点の記録を開始し、<a href=\"#/p5/endContour\">endContour()</a>は記録を停止します。負の形状を定義する頂点は、外部形状とは逆方向に\"巻かれる\"必要があります。まず、外部の時計回りの順序で頂点を描画し、内部の形状では、反時計回りに頂点を描画します。",
        "これらの関数は、<a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a>のペア内でのみ使用でき、<a href=\"#/p5/translate\">translate()</a>、<a href=\"#/p5/rotate\">rotate()</a>、および<a href=\"#/p5/scale\">scale()</a>などの変換は、<a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a>ペア内では動作しません。また、<a href=\"#/p5/ellipse\">ellipse()</a>や<a href=\"#/p5/rect\">rect()</a>などの他の図形を内部で使用することもできません。"
      ]
    },
    "endShape": {
      "description": [
        "<a href=\"#/p5/endShape\">endShape()</a>関数は、<a href=\"#/p5/beginShape\">beginShape()</a>とペアで使用され、<a href=\"#/p5/beginShape\">beginShape()</a>の後でのみ呼び出すことができます。<a href=\"#/p5/endshape\">endShape()</a>が呼び出されると、前回の<a href=\"#/p5/beginShape\">beginShape()</a>の呼び出し以降に定義されたすべての画像データが画像バッファに書き込まれます。定数CLOSEを<code>mode</code>パラメータの値として使用して、図形を閉じる（始点と終点を接続する）ことができます。"
      ],
      "params": {
        "mode": "定数: (オプション) 図形を閉じるためにCLOSEを使用"
      }
    },
    "quadraticVertex": {
      "description": [
        "quadraticVertex()は、二次ベジェ曲線の頂点座標を指定します。quadraticVertex()の各呼び出しで、ベジェ曲線の1つの制御点と1つのアンカーポイントの位置が定義され、線や図形に新しいセグメントが追加されます。<a href=\"#/p5/beginShape\">beginShape()</a>の呼び出しでquadraticVertex()を初めて使用する場合、最初のアンカーポイントを設定するために<a href=\"#/p5/vertex\">vertex()</a>の呼び出しで前置しなければなりません。WebGLモードでは、quadraticVertex()は2Dモードと3Dモードの両方で使用できます。2Dモードでは4つのパラメータが必要で、3Dモードでは6つのパラメータが必要です（z座標を含む）。",
        "この関数は、<a href=\"#/p5/beginShape\">beginShape()</a>と<a href=\"#/p5/endShape\">endShape()</a>の間でのみ使用し、<a href=\"#/p5/beginShape\">beginShape()</a>にMODEやPOINTSパラメータが指定されていない場合にのみ使用できます。"
      ],
      "params": {
        "cx": "Number: 制御点のx座標",
        "cy": "Number: 制御点のy座標",
        "x3": "Number: アンカーポイントのx座標",
        "y3": "Number: アンカーポイントのy座標",
        "cz": "Number: 制御点のz座標（WebGLモード用）",
        "z3": "Number: アンカーポイントのz座標（WebGLモード用）"
      }
    },
    "vertex": {
      "description": [
        "すべての図形は、一連の頂点を接続することで構築されます。<a href=\"#/p5/vertex\">vertex()</a>は、点、線、三角形、四角形、多角形の頂点座標を指定するために使用されます。これは、<a href=\"#/p5/beginShape\">beginShape()</a>および<a href=\"#/p5/endShape\">endShape()</a>関数内でのみ使用されます。"
      ],
      "params": {
        "x": "Number: 頂点のx座標",
        "y": "Number: 頂点のy座標",
        "z": "Number: （オプション）頂点のz座標。指定されていない場合はデフォルトで0になります。",
        "u": "Number: （オプション）頂点のテクスチャu座標",
        "v": "Number: （オプション）頂点のテクスチャv座標"
      }
    },
    "normal": {
      "description": [
        "以降で<a href=\"#/p5/vertex\">vertex()</a>で描画される頂点に使用する3D頂点法線を設定します。法線は、一般的に形状の表面にほぼ垂直なベクトルであり、その表面の部分からどれだけの光が反射されるかを制御します。"
      ],
      "params": {
        "vector": "Vector: 頂点法線を表すp5.Vector。",
        "x": "Number: 頂点法線のx成分。",
        "y": "Number: 頂点法線のy成分。",
        "z": "Number: 頂点法線のz成分。"
      }
    },
    "VERSION": {
      "description": ["このp5.jsのバージョン。"]
    },
    "P2D": {
      "description": ["デフォルトの二次元レンダラー。"]
    },
    "WEBGL": {
      "description": [
        "p5.jsの2つのレンダリングモードのうちの1つ：P2D（デフォルトのレンダラー）とWEBGL。3次元：Zを導入して3Dレンダリングを可能にします。"
      ]
    },
    "ARROW": {},
    "CROSS": {},
    "HAND": {},
    "MOVE": {},
    "TEXT": {},
    "WAIT": {},
    "HALF_PI": {
      "description": [
        "HALF_PIは、値が1.57079632679489661923の数学定数です。これは、円の円周と直径の比率の半分です。三角関数<a href=\"#/p5/sin\">sin()</a>および<a href=\"#/p5/cos\">cos()</a>と組み合わせて便利です。"
      ]
    },
    "PI": {
      "description": [
        "PIは、値が3.14159265358979323846の数学定数です。これは、円の円周と直径の比率です。三角関数<a href=\"#/p5/sin\">sin()</a>および<a href=\"#/p5/cos\">cos()</a>と組み合わせて便利です。"
      ]
    },
    "QUARTER_PI": {
      "description": [
        "QUARTER_PIは、値が0.7853982の数学定数です。これは、円の円周と直径の比率の4分の1です。三角関数<a href=\"#/p5/sin\">sin()</a>および<a href=\"#/p5/cos\">cos()</a>と組み合わせて便利です。"
      ]
    },
    "TAU": {
      "description": [
        "TAUは、TWO_PIの別名であり、値が6.28318530717958647693の数学定数です。これは、円の円周と直径の比率の2倍です。三角関数<a href=\"#/p5/sin\">sin()</a>および<a href=\"#/p5/cos\">cos()</a>と組み合わせて便利です。"
      ]
    },
    "TWO_PI": {
      "description": [
        "TWO_PIは、値が6.28318530717958647693の数学定数です。これは、円の円周と直径の比率の2倍です。三角関数<a href=\"#/p5/sin\">sin()</a>および<a href=\"#/p5/cos\">cos()</a>と組み合わせて便利です。"
      ]
    },
    "DEGREES": {
      "description": [
        "<a href=\"#/p5/angleMode\">angleMode()</a>関数で使用する定数で、p5.jsが角度を解釈および計算するモード（DEGREESまたはRADIANS）を設定します。"
      ]
    },
    "RADIANS": {
      "description": [
        "<a href=\"#/p5/angleMode\">angleMode()</a>関数で使用する定数で、p5.jsが角度を解釈および計算するモード（RADIANSまたはDEGREES）を設定します。"
      ]
    },
    "CORNER": {},
    "CORNERS": {},
    "RADIUS": {},
    "RIGHT": {},
    "LEFT": {},
    "CENTER": {},
    "TOP": {},
    "BOTTOM": {},
    "BASELINE": {},
    "POINTS": {},
    "LINES": {},
    "LINE_STRIP": {},
    "LINE_LOOP": {},
    "TRIANGLES": {},
    "TRIANGLE_FAN": {},
    "TRIANGLE_STRIP": {},
    "QUADS": {},
    "QUAD_STRIP": {},
    "TESS": {},
    "CLOSE": {},
    "OPEN": {},
    "CHORD": {},
    "PIE": {},
    "PROJECT": {},
    "SQUARE": {},
    "ROUND": {},
    "BEVEL": {},
    "MITER": {},
    "RGB": {},
    "HSB": {
      "description": [
        "HSB（hue、saturation、brightness）は、カラーモデルの一種です。詳細については、<a href=\"https://learnui.design/blog/the-hsb-color-system-practicioners-primer.html\">HSB</a>で学ぶことができます。"
      ]
    },
    "HSL": {},
    "AUTO": {
      "description": [
        "AUTOを使用すると、要素の現在の高さと幅に基づいて、要素の幅または高さ（両方ではない）を自動的に設定できます。<a href=\"/#/p5.Element/size\">size</a>関数には、一度にAUTOとして渡すことができるパラメータが1つだけです。"
      ]
    },
    "ALT": {},
    "BACKSPACE": {},
    "CONTROL": {},
    "DELETE": {},
    "DOWN_ARROW": {},
    "ENTER": {},
    "ESCAPE": {},
    "LEFT_ARROW": {},
    "OPTION": {},
    "RETURN": {},
    "RIGHT_ARROW": {},
    "SHIFT": {},
    "TAB": {},
    "UP_ARROW": {},
    "BLEND": {},
    "REMOVE": {},
    "ADD": {},
    "DARKEST": {},
    "LIGHTEST": {},
    "DIFFERENCE": {},
    "SUBTRACT": {},
    "EXCLUSION": {},
    "MULTIPLY": {},
    "SCREEN": {},
    "REPLACE": {},
    "OVERLAY": {},
    "HARD_LIGHT": {},
    "SOFT_LIGHT": {},
    "DODGE": {},
    "BURN": {},
    "THRESHOLD": {},
    "GRAY": {},
    "OPAQUE": {},
    "INVERT": {},
    "POSTERIZE": {},
    "DILATE": {},
    "ERODE": {},
    "BLUR": {},
    "NORMAL": {},
    "ITALIC": {},
    "BOLD": {},
    "BOLDITALIC": {},
    "CHAR": {},
    "WORD": {},
    "LINEAR": {},
    "QUADRATIC": {},
    "BEZIER": {},
    "CURVE": {},
    "STROKE": {},
    "FILL": {},
    "TEXTURE": {},
    "IMMEDIATE": {},
    "IMAGE": {},
    "NEAREST": {},
    "REPEAT": {},
    "CLAMP": {},
    "MIRROR": {},
    "LANDSCAPE": {},
    "PORTRAIT": {},
    "GRID": {},
    "AXES": {},
    "LABEL": {},
    "FALLBACK": {},
    "CONTAIN": {},
    "COVER": {},
    "print": {
      "description": [
        "<a href=\"#/p5/print\">print()</a>関数は、ブラウザのコンソールエリアに書き込みます。この関数は、プログラムが生成しているデータを確認するのに役立ちます。この関数は、関数が呼び出されるたびに新しい行のテキストが作成されます。個々の要素は、クォート（\"\"）で区切られ、加算演算子（+）で結合できます。",
        "引数なしでprint()を呼び出すと、window.print()関数が呼び出され、ブラウザの印刷ダイアログが開きます。コンソールに空行を印刷するには、print('\\n')と記述します。"
      ],
      "params": {
        "contents": "Any: 印刷するNumber、String、Object、Boolean、Arrayの任意の組み合わせ"
      }
    },
    "frameCount": {
      "description": [
        "システム変数<a href=\"#/p5/frameCount\">frameCount</a>は、プログラムが開始されてから表示されたフレームの数を格納します。<a href=\"#/p5/setup\">setup()</a>内では値は0で、<a href=\"#/p5/draw\">draw()</a>の最初の反復後に1になります。"
      ]
    },
    "deltaTime": {
      "description": [
        "システム変数<a href=\"#/p5/deltaTime\">deltaTime</a>には、前のフレームの開始と現在のフレームの開始の間の時間差がミリ秒単位で格納されます。",
        "この変数は、フレームレートに関係なく一定のままであるべき時間に敏感なアニメーションや物理計算を作成するのに便利です。"
      ]
    },
    "focused": {
      "description": [
        "ウィンドウがp5.jsプログラムで「フォーカス」されているかどうかを確認します。これは、スケッチがマウスやキーボードの入力を受け付けることを意味します。ウィンドウがフォーカスされている場合、この変数は「true」で、フォーカスされていない場合は「false」です。"
      ]
    },
    "cursor": {
      "description": [
        "カーソルを事前定義された記号や画像に設定するか、既に非表示の場合は表示するようにします。カーソルとして画像を設定しようとしている場合、推奨されるサイズは16×16または32×32ピクセルです。パラメータxとyの値は、画像の寸法よりも小さい必要があります。"
      ],
      "params": {
        "type": "String|Constant: 組み込み: ARROW, CROSS, HAND, MOVE, TEXT, WAIT  ネイティブCSSプロパティ: 'grab', 'progress', 'cell'など  外部: カーソル画像のパス（許可されるファイル拡張子: .cur, .gif, .jpg, .jpeg, .png）  ネイティブCSSカーソルとurlの詳細については、次のリンクを参照してください: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\">https://developer.mozilla.org/en-US/docs/Web/CSS/cursor</a>",
        "x": "Number: （オプション）カーソルの水平方向のアクティブスポット（32未満である必要があります）",
        "y": "Number: （オプション）カーソルの垂直方向のアクティブスポット（32未満である必要があります）"
      }
    },
    "frameRate": {
      "description": [
        "1秒あたりに表示されるフレーム数を指定します。たとえば、関数コールframeRate(30)は、毎秒30回リフレッシュしようとします。プロセッサが指定されたレートを維持できない場合、フレームレートは達成されません。<a href=\"#/p5/setup\">setup()</a>内でフレームレートを設定することが推奨されます。デフォルトのフレームレートは、ディスプレイのフレームレート（ここでは「リフレッシュレート」とも呼ばれます）に基づいており、ほとんどのコンピュータでは1秒あたり60フレームに設定されています。映画で一般的な24フレーム/秒以上のフレームレートで、アニメーションがスムーズになります。これは、setFrameRate(val)と同じです。",
        "<a href=\"#/p5/frameRate\">frameRate()</a>を引数なしで呼び出すと、現在のフレームレートが返されます。draw関数は、値を返す前に少なくとも1回実行する必要があります。これは、<a href=\"#/p5/getFrameRate\">getFrameRate()</a>と同じです。",
        "型がNumberでない、または非正の引数で<a href=\"#/p5/frameRate\">frameRate()</a>を呼び出すと、現在のフレームレートも返されます。"
      ],
      "params": {
        "fps": "Number: 1秒あたりに表示されるフレーム数"
      }
    },
    "getTargetFrameRate": {
      "description": [
        "_targetFrameRate変数を返します。デフォルトの_targetFrameRateは60に設定されています。これは、frameRate()を呼び出して所望の値に設定することで変更できます。getTargetFrameRate()が呼び出されると、設定された値が返されるべきです。"
      ],
      "returns": "Number: _targetFrameRate"
    },
    "noCursor": {
      "description": ["ビューからカーソルを非表示にします。"]
    },
    "displayWidth": {
      "description": [
        "デフォルトの<a href=\"#/p5/pixelDensity\">pixelDensity</a>に従って画面表示の幅を保存するシステム変数です。これは、任意の表示サイズでフルスクリーンプログラムを実行するために使用されます。実際の画面サイズを返すには、これにpixelDensityを掛けます。"
      ]
    },
    "displayHeight": {
      "description": [
        "デフォルトの<a href=\"#/p5/pixelDensity\">pixelDensity</a>に従って画面表示の高さを保存するシステム変数です。これは、任意の表示サイズでフルスクリーンプログラムを実行するために使用されます。実際の画面サイズを返すには、これにpixelDensityを掛けます。"
      ]
    },
    "windowWidth": {
      "description": [
        "内部ウィンドウの幅を保存するシステム変数で、window.innerWidthにマップされます。"
      ]
    },
    "windowHeight": {
      "description": [
        "内部ウィンドウの高さを保存するシステム変数で、window.innerHeightにマップされます。"
      ]
    },
    "windowResized": {
      "description": [
        "<a href=\"#/p5/windowResized\">windowResized()</a>関数は、ブラウザウィンドウがリサイズされるたびに一度呼び出されます。これは、キャンバスのサイズを変更したり、新しいウィンドウサイズに合わせて他の調整を行うのに適した場所です。"
      ],
      "params": {
        "event": "Object: (Optional) オプションのイベントコールバック引数。"
      }
    },
    "width": {
      "description": [
        "描画キャンバスの幅を保存するシステム変数です。<a href=\"#/p5/createCanvas\">createCanvas()</a>関数の最初のパラメータによってこの値が設定されます。例えば、関数呼び出しcreateCanvas(320, 240)は、width変数の値を320に設定します。<a href=\"#/p5/createCanvas\">createCanvas()</a>がプログラムで使用されていない場合、widthの値はデフォルトで100になります。"
      ]
    },
    "height": {
      "description": [
        "描画キャンバスの高さを保存するシステム変数です。<a href=\"#/p5/createCanvas\">createCanvas()</a>関数の2番目のパラメータによってこの値が設定されます。例えば、関数呼び出しcreateCanvas(320, 240)は、height変数の値を240に設定します。<a href=\"#/p5/createCanvas\">createCanvas()</a>がプログラムで使用されていない場合、heightの値はデフォルトで100になります。"
      ]
    },
    "fullscreen": {
      "description": [
        "引数が与えられた場合、引数の値に基づいてスケッチをフルスクリーンにするかどうかを設定します。引数が与えられなかった場合、現在のフルスクリーン状態を返します。ただし、ブラウザの制限により、これはユーザー入力時にのみ呼び出すことができます。例えば、下記の例のようにマウスプレス時です。"
      ],
      "returns": "Boolean: 現在のフルスクリーン状態",
      "params": {
        "val": "Boolean: (オプション) スケッチがフルスクリーンモードであるべきかどうか"
      }
    },
    "pixelDensity": {
      "description": [
        "高ピクセル密度ディスプレイのピクセルスケーリングを設定します。デフォルトでは、ピクセル密度は表示密度に合わせて設定されています。これをオフにするには、pixelDensity(1)を呼び出します。<a href=\"#/p5/pixelDensity\">pixelDensity()</a>を引数なしで呼び出すと、スケッチの現在のピクセル密度が返されます。"
      ],
      "params": {
        "val": "Number: スケッチがスケーリングするかどうか、またはどの程度スケーリングするか"
      }
    },
    "displayDensity": {
      "description": [
        "スケッチが実行されている現在のディスプレイのピクセル密度を返します。"
      ],
      "returns": "Number: ディスプレイの現在のピクセル密度"
    },
    "getURL": {
      "description": [
        "現在のURLを取得します。注意：p5エディターを使用している場合、スケッチがiframeに埋め込まれているため、これは空のオブジェクトを返します。エディターのプレゼントURLやシェアURLでスケッチを表示すると、正しく機能します。"
      ],
      "returns": "String: url"
    },
    "getURLPath": {
      "description": [
        "現在のURLパスを配列として取得します。注意：p5エディターを使用している場合、スケッチがiframeに埋め込まれているため、これは空のオブジェクトを返します。エディターのプレゼントURLやシェアURLでスケッチを表示すると、正しく機能します。"
      ],
      "returns": "String[]: パスコンポーネント"
    },
    "getURLParams": {
      "description": [
        "現在のURLパラメータをオブジェクトとして取得します。注意：p5エディターを使用している場合、スケッチがiframeに埋め込まれているため、これは空のオブジェクトを返します。エディターのプレゼントURLやシェアURLでスケッチを表示すると、正しく機能します。"
      ],
      "returns": "Object: URLパラメータ"
    },
    "preload": {
      "description": [
        "<a href=\"#/p5/setup\">setup()</a>の直前に呼び出される<a href=\"#/p5/preload\">preload()</a>関数は、外部ファイルの非同期ロードをブロッキング方式で処理するために使用されます。preload関数が定義されている場合、<a href=\"#/p5/setup\">setup()</a>はその中のloadコールがすべて終了するまで待機します。preload関数の中には、loadコール（<a href=\"#/p5/loadImage\">loadImage</a>、<a href=\"#/p5/loadJSON\">loadJSON</a>、<a href=\"#/p5/loadFont\">loadFont</a>、<a href=\"#/p5/loadStrings\">loadStrings</a>など）以外のものは入れないでください。非同期ロードが望ましい場合は、代わりにコールバックパラメータを使用して<a href=\"#/p5/setup\">setup()</a>や他の場所でloadメソッドを呼び出すことができます。",
        "デフォルトでは、「loading...」というテキストが表示されます。独自のローディングページを作成するには、ページにID「p5_loading」のHTML要素を含めてください。詳細は<a href=\"http://bit.ly/2kQ6Nio\">こちら</a>。"
      ]
    },
    "setup": {
      "description": [
        "プログラムが開始されるときに一度だけ呼び出される<a href=\"#/p5/setup\">setup()</a>関数は、スクリーンサイズや背景色などの初期環境プロパティを定義し、プログラムの開始時に画像やフォントなどのメディアをロードするために使用されます。各プログラムには1つの<a href=\"#/p5/setup\">setup()</a>関数があり、初回実行後に再度呼び出すことはできません。",
        "注意：<a href=\"#/p5/setup\">setup()</a>内で宣言された変数は、<a href=\"#/p5/draw\">draw()</a>を含む他の関数内ではアクセスできません。"
      ]
    },
    "draw": {
      "description": [
        "<a href=\"#/p5/setup\">setup()</a>の直後に呼び出される<a href=\"#/p5/draw\">draw()</a>関数は、プログラムが停止するか<a href=\"#/p5/noLoop\">noLoop()</a>が呼び出されるまで、そのブロック内に含まれるコードを連続して実行します。ただし、<a href=\"#/p5/setup\">setup()</a>で<a href=\"#/p5/noLoop\">noLoop()</a>が呼び出された場合でも、<a href=\"#/p5/draw\">draw()</a>は停止する前に一度だけ実行されます。<a href=\"#/p5/draw\">draw()</a>は自動的に呼び出されるため、明示的に呼び出すことはありません。",
        "<a href=\"#/p5/noLoop\">noLoop()</a>、<a href=\"#/p5/redraw\">redraw()</a>、<a href=\"#/p5/loop\">loop()</a>を使って制御する必要があります。<a href=\"#/p5/noLoop\">noLoop()</a>が<a href=\"#/p5/draw\">draw()</a>内のコードの実行を停止した後、<a href=\"#/p5/redraw\">redraw()</a>は<a href=\"#/p5/draw\">draw()</a>内のコードを1回だけ実行し、<a href=\"#/p5/loop\">loop()</a>は<a href=\"#/p5/draw\">draw()</a>内のコードを連続して実行し続けるようになります。",
        "<a href=\"#/p5/draw\">draw()</a>が1秒間に何回実行されるかは、<a href=\"#/p5/frameRate\">frameRate()</a>関数で制御できます。",
        "各スケッチには1つの<a href=\"#/p5/draw\">draw()</a>関数があり、コードを連続して実行する場合や、<a href=\"#/p5/mousePressed\">mousePressed()</a>などのイベントを処理する場合には、<a href=\"#/p5/draw\">draw()</a>が必要です。場合によっては、上記の例のようにプログラム内で<a href=\"#/p5/draw\">draw()</a>を空呼び出しすることがあります。",
        "描画座標系は、各<a href=\"#/p5/draw\">draw()</a>呼び出しの最初にリセットされることに注意が必要です。<a href=\"#/p5/draw\">draw()</a>内で変換が実行された場合（例：スケール、回転、移動）、その効果は<a href=\"#/p5/draw\">draw()</a>の最初に元に戻されるため、変換は時間とともに蓄積されません。一方で、適用されたスタイリング（例：塗りつぶし、ストロークなど）は継続して効果があります。"
      ]
    },
    "remove": {
      "description": [
        "p5スケッチ全体を削除します。これにより、キャンバスとp5.jsによって作成された要素が削除されます。また、描画ループを停止し、ウィンドウのグローバルスコープからプロパティやメソッドのバインドを解除します。新しいp5スケッチを作成したい場合のために、変数p5を残します。必要に応じて、p5 = nullを設定して消去することができます。p5ライブラリによって作成されたすべての関数や変数やオブジェクトが削除されますが、コードによって作成された他のグローバル変数は残ります。"
      ]
    },
    "disableFriendlyErrors": {
      "description": [
        "フレンドリーエラーシステム（FES）の一部の機能をオフにし、必要に応じてパフォーマンスを大幅に向上させます。",
        "これにより、パフォーマンス低下を引き起こすFESの部分（引数チェックなど）が無効になります。パフォーマンスコストがないフレンドリーエラー（ファイルの読み込みに失敗した場合に説明的なエラーを表示する、グローバル空間でp5.js関数をオーバーライドしようとした場合に警告を表示するなど）はそのまま残ります。",
        "<a href='https://github.com/processing/p5.js/wiki/Optimizing-p5.js-Code-for-Performance#disable-the-friendly-error-system-fes'>フレンドリーエラーシステムの無効化</a>を参照してください。"
      ]
    },
    "let": {
      "description": [
        "Creates and names a new variable. A variable is a container for a value.",
        "Variables that are declared with <a href=\"#/p5/let\">let</a> will have block-scope. This means that the variable only exists within the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\"> block</a> that it is created within.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">the MDN entry</a>: Declares a block scope local variable, optionally initializing it to a value."
      ]
    },
    "const": {
      "description": [
        "Creates and names a new constant. Like a variable created with <a href=\"#/p5/let\">let</a>, a constant that is created with <a href=\"#/p5/const\">const</a> is a container for a value, however constants cannot be reassigned once they are declared. Although it is noteworthy that for non-primitive data types like objects & arrays, their elements can still be changeable. So if a variable is assigned an array, you can still add or remove elements from the array but cannot reassign another array to it. Also unlike <code>let</code>, you cannot declare variables without value using const.",
        "Constants have block-scope. This means that the constant only exists within the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\"> block</a> that it is created within. A constant cannot be redeclared within a scope in which it already exists.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">the MDN entry</a>: Declares a read-only named constant. Constants are block-scoped, much like variables defined using the 'let' statement. The value of a constant can't be changed through reassignment, and it can't be redeclared."
      ]
    },
    "===": {
      "description": [
        "The strict equality operator <a href=\"#/p5/===\">===</a> checks to see if two values are equal and of the same type.",
        "A comparison expression always evaluates to a <a href=\"#/p5/boolean\">boolean</a>.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">the MDN entry</a>: The non-identity operator returns true if the operands are not equal and/or not of the same type.",
        "Note: In some examples around the web you may see a double-equals-sign <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality\">==</a>, used for comparison instead. This is the non-strict equality operator in Javascript. This will convert the two values being compared to the same type before comparing them."
      ]
    },
    ">": {
      "description": [
        "The greater than operator <a href=\"#/p5/>\">></a> evaluates to true if the left value is greater than the right value. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\"> There is more info on comparison operators on MDN.</a>"
      ]
    },
    ">=": {
      "description": [
        "The greater than or equal to operator <a href=\"#/p5/>=\">>=</a> evaluates to true if the left value is greater than or equal to the right value.",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">There is more info on comparison operators on MDN.</a>"
      ]
    },
    "<": {
      "description": [
        "The less than operator <a href=\"#/p5/<\"><</a> evaluates to true if the left value is less than the right value.",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">There is more info on comparison operators on MDN.</a>"
      ]
    },
    "<=": {
      "description": [
        "The less than or equal to operator <a href=\"#/p5/<=\"><=</a> evaluates to true if the left value is less than or equal to the right value.",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">There is more info on comparison operators on MDN.</a>"
      ]
    },
    "if-else": {
      "description": [
        "The <a href=\"#/p5/if-else\">if-else</a> statement helps control the flow of your code.",
        "A condition is placed between the parenthesis following 'if', when that condition evalues to <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/truthy\">truthy</a>, the code between the following curly braces is run. Alternatively, when the condition evaluates to <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">falsy</a>, the code between the curly braces of 'else' block is run instead. Writing an else block is optional.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">the MDN entry</a>: The 'if' statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed"
      ]
    },
    "function": {
      "description": [
        "Creates and names a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\">function</a>. A <a href=\"#/p5/function\">function</a> is a set of statements that perform a task.",
        "Optionally, functions can have parameters. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Parameter\">Parameters</a> are variables that are scoped to the function, that can be assigned a value when calling the function.Multiple parameters can be given by seperating them with commmas.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">the MDN entry</a>: Declares a function with the specified parameters."
      ]
    },
    "return": {
      "description": [
        "Specifies the value to be returned by a function. For more info checkout <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"> the MDN entry for return</a>."
      ]
    },
    "boolean": {
      "description": [
        "Converts a number or string to its boolean representation. For a number, any non-zero value (positive or negative) evaluates to true, while zero evaluates to false. For a string, the value \"true\" evaluates to true, while any other value evaluates to false. When an array of number or string values is passed in, then a array of booleans of the same length is returned."
      ],
      "returns": "Boolean: boolean representation of value",
      "params": {
        "n": "String|Boolean|Number|Array: value to parse"
      }
    },
    "string": {
      "description": [
        "A <a href=\"#/p5/string\">string</a> is one of the 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">primitive data types</a> in Javascript. A string is a series of text characters. In Javascript, a string value must be surrounded by either single-quotation marks(') or double-quotation marks(\").",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/string\">the MDN entry</a>: A string is a sequence of characters used to represent text."
      ]
    },
    "number": {
      "description": [
        "A <a href=\"#/p5/number\">number</a> is one of the 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">primitive data types</a> in Javascript. A number can be a whole number or a decimal number.",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/number\">The MDN entry for number</a>"
      ]
    },
    "object": {
      "description": [
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\">MDN's object basics</a>:  An <a href=\"#/p5/object\">object</a> is a collection of related data and/or  functionality (which usually consists of several variables and functions —  which are called properties and methods when they are inside objects.)"
      ]
    },
    "class": {
      "description": [
        "Creates and names a <a href=\"#/p5/class\">class</a> which is a template for the creation of <a href=\"#/p5/object\">objects</a>.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class\">the MDN entry</a>: The class declaration creates a new Class with a given name using prototype-based inheritance."
      ]
    },
    "for": {
      "description": [
        "<a href=\"#/p5/for\">for</a> creates a loop that is useful for executing one section of code multiple times.",
        "A 'for loop' consists of three different expressions inside of a parenthesis, all of which are optional.These expressions are used to control the number of times the loop is run.The first expression is a statement that is used to set the initial state for the loop.The second expression is a condition that you would like to check before each loop. If this expression returns false then the loop will exit.The third expression is executed at the end of each loop. These expression are separated by ; (semi-colon).In case of an empty expression, only a semi-colon is written.",
        "The code inside of the loop body (in between the curly braces) is executed between the evaluation of the second and third expression.",
        "As with any loop, it is important to ensure that the loop can 'exit', or that the test condition will eventually evaluate to false. The test condition with a <a href=\"#/p5/for\">for</a> loop is the second expression detailed above. Ensuring that this expression can eventually become false ensures that your loop doesn't attempt to run an infinite amount of times, which can crash your browser.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\">the MDN entry</a>: Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once."
      ]
    },
    "while": {
      "description": [
        "<a href=\"#/p5/while\">while</a> creates a loop that is useful for executing one section of code multiple times.",
        "With a 'while loop', the code inside of the loop body (between the curly braces) is run repeatedly until the test condition (inside of the parenthesis) evaluates to false. The condition is tested before executing the code body with <a href=\"#/p5/while\">while</a>, so if the condition is initially false the loop body, or statement, will never execute.",
        "As with any loop, it is important to ensure that the loop can 'exit', or that the test condition will eventually evaluate to false. This is to keep your loop from trying to run an infinite amount of times, which can crash your browser.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\">the MDN entry</a>: The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true.The condition is evaluated before executing the statement."
      ]
    },
    "createCanvas": {
      "description": [
        "Creates a canvas element in the document and sets its dimensions in pixels. This method should be called only once at the start of <a href=\"#/p5/setup\">setup()</a>. Calling <a href=\"#/p5/createCanvas\">createCanvas</a> more than once in a sketch will result in very unpredictable behavior. If you want more than one drawing canvas you could use <a href=\"#/p5/createGraphics\">createGraphics()</a> (hidden by default but it can be shown).",
        "Important note: in 2D mode (i.e. when <code>p5.Renderer</code> is not set) the origin (0,0) is positioned at the top left of the screen. In 3D mode (i.e. when <code>p5.Renderer</code> is set to <code>WEBGL</code>), the origin is positioned at the center of the canvas. See <a href=\"https://github.com/processing/p5.js/issues/1545\">this issue</a> for more information.",
        "The system variables width and height are set by the parameters passed to this function. If <a href=\"#/p5/createCanvas\">createCanvas()</a> is not used, the window will be given a default size of 100×100 pixels.",
        "For more ways to position the canvas, see the <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'> positioning the canvas</a> wiki page."
      ],
      "returns": "p5.Renderer: pointer to p5.Renderer holding canvas",
      "params": {
        "w": "Number: width of the canvas",
        "h": "Number: height of the canvas",
        "renderer": "Constant: (Optional) either P2D or WEBGL"
      }
    },
    "resizeCanvas": {
      "description": [
        "Resizes the canvas to given width and height. The canvas will be cleared and draw will be called immediately, allowing the sketch to re-render itself in the resized canvas."
      ],
      "params": {
        "w": "Number: width of the canvas",
        "h": "Number: height of the canvas",
        "noRedraw": "Boolean: (Optional) don't redraw the canvas immediately"
      }
    },
    "noCanvas": {
      "description": [
        "Removes the default canvas for a p5 sketch that doesn't require a canvas"
      ]
    },
    "createGraphics": {
      "description": [
        "Creates and returns a new p5.Renderer object. Use this class if you need to draw into an off-screen graphics buffer. The two parameters define the width and height in pixels."
      ],
      "returns": "p5.Graphics: offscreen graphics buffer",
      "params": {
        "w": "Number: width of the offscreen graphics buffer",
        "h": "Number: height of the offscreen graphics buffer",
        "renderer": "Constant: (Optional) either P2D or WEBGL  undefined defaults to p2d"
      }
    },
    "blendMode": {
      "description": [
        "Blends the pixels in the display window according to the defined mode. There is a choice of the following modes to blend the source pixels (A) with the ones of pixels already in the display window (B): <ul> <li><code>BLEND</code> - linear interpolation of colours: C = A*factor + B. <b>This is the default blending mode.</b></li> <li><code>ADD</code> - sum of A and B</li> <li><code>DARKEST</code> - only the darkest colour succeeds: C = min(A*factor, B).</li> <li><code>LIGHTEST</code> - only the lightest colour succeeds: C = max(A*factor, B).</li> <li><code>DIFFERENCE</code> - subtract colors from underlying image. <em>(2D)</em></li> <li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less extreme.</li> <li><code>MULTIPLY</code> - multiply the colors, result will always be darker.</li> <li><code>SCREEN</code> - opposite multiply, uses inverse values of the colors.</li> <li><code>REPLACE</code> - the pixels entirely replace the others and don't utilize alpha (transparency) values.</li> <li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li> <li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN </code>. Multiplies dark values, and screens light values. <em>(2D)</em></li> <li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50% gray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li> <li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and <code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em> </li> <li><code>DODGE</code> - lightens light tones and increases contrast, ignores darks. <em>(2D)</em></li> <li><code>BURN</code> - darker areas are applied, increasing contrast, ignores lights. <em>(2D)</em></li> <li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li> </ul>",
        "<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer. <em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer."
      ],
      "params": {
        "mode": "Constant: blend mode to set for canvas.  either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,  EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,  SOFT_LIGHT, DODGE, BURN, ADD, REMOVE or SUBTRACT"
      }
    },
    "drawingContext": {
      "description": [
        "The p5.js API provides a lot of functionality for creating graphics, but there is some native HTML5 Canvas functionality that is not exposed by p5. You can still call it directly using the variable <code>drawingContext</code>, as in the example shown. This is the equivalent of calling <code>canvas.getContext('2d');</code> or <code>canvas.getContext('webgl');</code>. See this <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\"> reference for the native canvas API</a> for possible drawing functions you can call."
      ]
    },
    "noLoop": {
      "description": [
        "Stops p5.js from continuously executing the code within <a href=\"#/p5/draw\">draw()</a>. If <a href=\"#/p5/loop\">loop()</a> is called, the code in <a href=\"#/p5/draw\">draw()</a> begins to run continuously again. If using <a href=\"#/p5/noLoop\">noLoop()</a> in <a href=\"#/p5/setup\">setup()</a>, it should be the last line inside the block.",
        "When <a href=\"#/p5/noLoop\">noLoop()</a> is used, it's not possible to manipulate or access the screen inside event handling functions such as <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/keyPressed\">keyPressed()</a>. Instead, use those functions to call <a href=\"#/p5/redraw\">redraw()</a> or <a href=\"#/p5/loop\">loop()</a>, which will run <a href=\"#/p5/draw\">draw()</a>, which can update the screen properly. This means that when <a href=\"#/p5/noLoop\">noLoop()</a> has been called, no drawing can happen, and functions like <a href=\"#/p5/saveFrames\">saveFrames()</a> or <a href=\"#/p5/loadPixels\">loadPixels()</a> may not be used.",
        "Note that if the sketch is resized, <a href=\"#/p5/redraw\">redraw()</a> will be called to update the sketch, even after <a href=\"#/p5/noLoop\">noLoop()</a> has been specified. Otherwise, the sketch would enter an odd state until <a href=\"#/p5/loop\">loop()</a> was called.",
        "Use <a href=\"#/p5/isLooping\">isLooping()</a> to check the current state of <a href=\"#/p5/loop\">loop()</a>."
      ]
    },
    "loop": {
      "description": [
        "By default, p5.js loops through draw() continuously, executing the code within it. However, the <a href=\"#/p5/draw\">draw()</a> loop may be stopped by calling <a href=\"#/p5/noLoop\">noLoop()</a>. In that case, the <a href=\"#/p5/draw\">draw()</a> loop can be resumed with loop().",
        "Avoid calling loop() from inside setup().",
        "Use <a href=\"#/p5/isLooping\">isLooping()</a> to check the current state of <a href=\"#/p5/loop\">loop()</a>."
      ]
    },
    "isLooping": {
      "description": [
        "By default, p5.js loops through <a href=\"#/p5/draw\">draw()</a> continuously, executing the code within it. If the sketch is stopped with <a href=\"#/p5/noLoop\">noLoop()</a> or resumed with <a href=\"#/p5/loop\">loop()</a>, isLooping() returns the current state for use within custom event handlers."
      ],
      "returns": "Boolean:"
    },
    "push": {
      "description": [
        "The <a href=\"#/p5/push\">push()</a> function saves the current drawing style settings and transformations, while <a href=\"#/p5/pop\">pop()</a> restores these settings. Note that these functions are always used together. They allow you to change the style and transformation settings and later return to what you had. When a new state is started with <a href=\"#/p5/push\">push()</a>, it builds on the current style and transform information. The <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide more control. (See the second example for a demonstration.)",
        "<a href=\"#/p5/push\">push()</a> stores information related to the current transformation state and style settings controlled by the following functions: <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/noFill\">noFill()</a>, <a href=\"#/p5/noStroke\">noStroke()</a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/noTint\">noTint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"#/p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>, <a href=\"#/p5/imageMode\">imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>, <a href=\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5/textLeading\">textLeading()</a>, <a href=\"#/p5/applyMatrix\">applyMatrix()</a>, <a href=\"#/p5/resetMatrix\">resetMatrix()</a>, <a href=\"#/p5/rotate\">rotate()</a>, <a href=\"#/p5/scale\">scale()</a>, <a href=\"#/p5/shearX\">shearX()</a>, <a href=\"#/p5/shearY\">shearY()</a>, <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/noiseSeed\">noiseSeed()</a>.",
        "In WEBGL mode additional style settings are stored. These are controlled by the following functions: <a href=\"#/p5/setCamera\">setCamera()</a>, <a href=\"#/p5/ambientLight\">ambientLight()</a>, <a href=\"#/p5/directionalLight\">directionalLight()</a>, <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>, <a href=\"#/p5/specularMaterial\">specularMaterial()</a>, <a href=\"#/p5/shininess\">shininess()</a>, <a href=\"#/p5/normalMaterial\">normalMaterial()</a> and <a href=\"#/p5/shader\">shader()</a>."
      ]
    },
    "pop": {
      "description": [
        "The <a href=\"#/p5/push\">push()</a> function saves the current drawing style settings and transformations, while <a href=\"#/p5/pop\">pop()</a> restores these settings. Note that these functions are always used together. They allow you to change the style and transformation settings and later return to what you had. When a new state is started with <a href=\"#/p5/push\">push()</a>, it builds on the current style and transform information. The <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide more control. (See the second example for a demonstration.)",
        "<a href=\"#/p5/push\">push()</a> stores information related to the current transformation state and style settings controlled by the following functions: <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/noFill\">noFill()</a>, <a href=\"#/p5/noStroke\">noStroke()</a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/noTint\">noTint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"#/p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>, <a href=\"#/p5/imageMode\">imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>, <a href=\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5/textLeading\">textLeading()</a>, <a href=\"#/p5/applyMatrix\">applyMatrix()</a>, <a href=\"#/p5/resetMatrix\">resetMatrix()</a>, <a href=\"#/p5/rotate\">rotate()</a>, <a href=\"#/p5/scale\">scale()</a>, <a href=\"#/p5/shearX\">shearX()</a>, <a href=\"#/p5/shearY\">shearY()</a>, <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/noiseSeed\">noiseSeed()</a>.",
        "In WEBGL mode additional style settings are stored. These are controlled by the following functions: <a href=\"#/p5/setCamera\">setCamera()</a>, <a href=\"#/p5/ambientLight\">ambientLight()</a>, <a href=\"#/p5/directionalLight\">directionalLight()</a>, <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>, <a href=\"#/p5/specularMaterial\">specularMaterial()</a>, <a href=\"#/p5/shininess\">shininess()</a>, <a href=\"#/p5/normalMaterial\">normalMaterial()</a> and <a href=\"#/p5/shader\">shader()</a>."
      ]
    },
    "redraw": {
      "description": [
        "Executes the code within <a href=\"#/p5/draw\">draw()</a> one time. This function allows the program to update the display window only when necessary, for example when an event registered by <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/keyPressed\">keyPressed()</a> occurs.",
        "In structuring a program, it only makes sense to call <a href=\"#/p5/redraw\">redraw()</a> within events such as <a href=\"#/p5/mousePressed\">mousePressed()</a>. This is because <a href=\"#/p5/redraw\">redraw()</a> does not run <a href=\"#/p5/draw\">draw()</a> immediately (it only sets a flag that indicates an update is needed).",
        "The <a href=\"#/p5/redraw\">redraw()</a> function does not work properly when called inside <a href=\"#/p5/draw\">draw()</a>.To enable/disable animations, use <a href=\"#/p5/loop\">loop()</a> and <a href=\"#/p5/noLoop\">noLoop()</a>.",
        "In addition you can set the number of redraws per method call. Just add an integer as single parameter for the number of redraws."
      ],
      "params": {
        "n": "Integer: (Optional) Redraw for n-times. The default value is 1."
      }
    },
    "p5": {
      "description": [
        "The <code>p5()</code> constructor enables you to activate \"instance mode\" instead of normal \"global mode\". This is an advanced topic. A short description and example is included below. Please see <a target=\"blank\" href=\"https://www.youtube.com/watch?v=Su792jEauZg&feature=youtu.be\"> Dan Shiffman's Coding Train video tutorial</a> or this <a target=\"blank\" href=\"https://github.com/processing/p5.js/wiki/p5.js-overview#instantiation--namespace\">tutorial page</a> for more info.",
        "By default, all p5.js functions are in the global namespace (i.e. bound to the window object), meaning you can call them simply <code>ellipse()</code>, <code>fill()</code>, etc. However, this might be inconvenient if you are mixing with other JS libraries (synchronously or asynchronously) or writing long programs of your own. p5.js currently supports a way around this problem called \"instance mode\". In instance mode, all p5 functions are bound up in a single variable instead of polluting your global namespace.",
        "Optionally, you can specify a default container for the canvas and any other elements to append to with a second argument. You can give the ID of an element in your html, or an html node itself.",
        "Note that creating instances like this also allows you to have more than one p5 sketch on a single web page, as they will each be wrapped up with their own set up variables. Of course, you could also use iframes to have multiple sketches in global mode."
      ],
      "params": {
        "sketch": "Object: a function containing a p5.js sketch",
        "node": "String|Object: ID or pointer to HTML DOM node to contain sketch in"
      }
    },
    "applyMatrix": {
      "description": [
        "Multiplies the current matrix by the one specified through the parameters. This is a powerful operation that can perform the equivalent of translate, scale, shear and rotate all at once. You can learn more about transformation matrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\"> Wikipedia</a>.",
        "The naming of the arguments here follows the naming of the <a href= \"https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-transform\"> WHATWG specification</a> and corresponds to a transformation matrix of the form: <blockquote>",
        "<img style=\"max-width: 150px\" src=\"assets/transformation-matrix.png\" alt=\"The transformation matrix used when applyMatrix is called\"/> </blockquote>",
        "<img style=\"max-width: 300px\" src=\"assets/transformation-matrix-4-4.png\" alt=\"The transformation matrix used when applyMatrix is called with 4x4 matrix\"/>"
      ],
      "params": {
        "arr": "Array: an array of numbers - should be 6 or 16 length (2<em>3 or 4</em>4 matrix values)",
        "a": "Number: numbers which define the 2×3 or 4x4 matrix to be multiplied",
        "b": "Number: numbers which define the 2×3 or 4x4 matrix to be multiplied",
        "c": "Number: numbers which define the 2×3 or 4x4 matrix to be multiplied",
        "d": "Number: numbers which define the 2×3 or 4x4 matrix to be multiplied",
        "e": "Number: numbers which define the 2×3 or 4x4 matrix to be multiplied",
        "f": "Number: numbers which define the 2×3 or 4x4 matrix to be multiplied",
        "g": "Number: numbers which define the 4x4 matrix to be multiplied",
        "h": "Number: numbers which define the 4x4 matrix to be multiplied",
        "i": "Number: numbers which define the 4x4 matrix to be multiplied",
        "j": "Number: numbers which define the 4x4 matrix to be multiplied",
        "k": "Number: numbers which define the 4x4 matrix to be multiplied",
        "l": "Number: numbers which define the 4x4 matrix to be multiplied",
        "m": "Number: numbers which define the 4x4 matrix to be multiplied",
        "n": "Number: numbers which define the 4x4 matrix to be multiplied",
        "o": "Number: numbers which define the 4x4 matrix to be multiplied",
        "p": "Number: numbers which define the 4x4 matrix to be multiplied"
      }
    },
    "resetMatrix": {
      "description": ["Replaces the current matrix with the identity matrix."]
    },
    "rotate": {
      "description": [
        "Rotates a shape by the amount specified by the angle parameter. This function accounts for <a href=\"#/p5/angleMode\">angleMode</a>, so angles can be entered in either RADIANS or DEGREES.",
        "Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulate the effect. For example, calling rotate(HALF_PI) and then rotate(HALF_PI) is the same as rotate(PI). All transformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.",
        "Technically, <a href=\"#/p5/rotate\">rotate()</a> multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>."
      ],
      "params": {
        "angle": "Number: the angle of rotation, specified in radians  or degrees, depending on current angleMode",
        "axis": "p5.Vector|Number[]: (Optional) (in 3d) the axis to rotate around"
      }
    },
    "rotateX": {
      "description": [
        "Rotates a shape around X axis by the amount specified in angle parameter. The angles can be entered in either RADIANS or DEGREES.",
        "Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction. All transformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again."
      ],
      "params": {
        "angle": "Number: the angle of rotation, specified in radians  or degrees, depending on current angleMode"
      }
    },
    "rotateY": {
      "description": [
        "Rotates a shape around Y axis by the amount specified in angle parameter. The angles can be entered in either RADIANS or DEGREES.",
        "Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction. All transformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again."
      ],
      "params": {
        "angle": "Number: the angle of rotation, specified in radians  or degrees, depending on current angleMode"
      }
    },
    "rotateZ": {
      "description": [
        "Rotates a shape around Z axis by the amount specified in angle parameter. The angles can be entered in either RADIANS or DEGREES.",
        "This method works in WEBGL mode only.",
        "Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction. All transformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again."
      ],
      "params": {
        "angle": "Number: the angle of rotation, specified in radians  or degrees, depending on current angleMode"
      }
    },
    "scale": {
      "description": [
        "Increases or decreases the size of a shape by expanding or contracting vertices. Objects always scale from their relative origin to the coordinate system. Scale values are specified as decimal percentages. For example, the function call scale(2.0) increases the dimension of a shape by 200%.",
        "Transformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling scale(2.0) and then scale(1.5) is the same as scale(3.0). If <a href=\"#/p5/scale\">scale()</a> is called within <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again.",
        "Using this function with the z parameter is only available in WEBGL mode. This function can be further controlled with <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>."
      ],
      "params": {
        "s": "Number|p5.Vector|Number[]: percent to scale the object, or percentage to  scale the object in the x-axis if multiple arguments  are given",
        "y": "Number: (Optional) percent to scale the object in the y-axis",
        "z": "Number: (Optional) percent to scale the object in the z-axis (webgl only)",
        "scales": "p5.Vector|Number[]: per-axis percents to scale the object"
      }
    },
    "shearX": {
      "description": [
        "Shears a shape around the x-axis by the amount specified by the angle parameter. Angles should be specified in the current angleMode. Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction.",
        "Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling shearX(PI/2) and then shearX(PI/2) is the same as shearX(PI). If <a href=\"#/p5/shearX\">shearX()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again.",
        "Technically, <a href=\"#/p5/shearX\">shearX()</a> multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions."
      ],
      "params": {
        "angle": "Number: angle of shear specified in radians or degrees,  depending on current angleMode"
      }
    },
    "shearY": {
      "description": [
        "Shears a shape around the y-axis the amount specified by the angle parameter. Angles should be specified in the current angleMode. Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction.",
        "Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling shearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If <a href=\"#/p5/shearY\">shearY()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again.",
        "Technically, <a href=\"#/p5/shearY\">shearY()</a> multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions."
      ],
      "params": {
        "angle": "Number: angle of shear specified in radians or degrees,  depending on current angleMode"
      }
    },
    "translate": {
      "description": [
        "Specifies an amount to displace objects within the display window. The x parameter specifies left/right translation, the y parameter specifies up/down translation.",
        "Transformations are cumulative and apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling translate(50, 0) and then translate(20, 0) is the same as translate(70, 0). If <a href=\"#/p5/translate\">translate()</a> is called within <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again. This function can be further controlled by using <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>."
      ],
      "params": {
        "x": "Number: left/right translation",
        "y": "Number: up/down translation",
        "z": "Number: (Optional) forward/backward translation (WEBGL only)",
        "vector": "p5.Vector: the vector to translate by"
      }
    },
    "storeItem": {
      "description": [
        "Stores a value in local storage under the key name.  Local storage is saved in the browser and persists  between browsing sessions and page reloads.  The key can be the name of the variable but doesn't  have to be. To retrieve stored items  see <a href=\"#/p5/getItem\">getItem</a>. Sensitive data such as passwords or personal information  should not be stored in local storage."
      ],
      "params": {
        "key": "String",
        "value": "String|Number|Object|Boolean|p5.Color|p5.Vector"
      }
    },
    "getItem": {
      "description": [
        "Returns the value of an item that was stored in local storage  using storeItem()"
      ],
      "returns": "Number|Object|String|Boolean|p5.Color|p5.Vector: Value of stored item",
      "params": {
        "key": "String: name that you wish to use to store in local storage"
      }
    },
    "clearStorage": {
      "description": [
        "Clears all local storage items set with storeItem()  for the current domain."
      ]
    },
    "removeItem": {
      "description": ["Removes an item that was stored with storeItem()"],
      "params": {
        "key": "String"
      }
    },
    "createStringDict": {
      "description": [
        "Creates a new instance of p5.StringDict using the key-value pair  or the object you provide."
      ],
      "returns": "p5.StringDict:",
      "params": {
        "key": "String",
        "value": "String",
        "object": "Object: object"
      }
    },
    "createNumberDict": {
      "description": [
        "Creates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair  or object you provide."
      ],
      "returns": "p5.NumberDict:",
      "params": {
        "key": "Number",
        "value": "Number",
        "object": "Object: object"
      }
    },
    "select": {
      "description": [
        "Searches the page for the first element that matches the given CSS selector string (can be an ID, class, tag name or a combination) and returns it as a <a href=\"#/p5.Element\">p5.Element</a>. The DOM node itself can be accessed with .elt. Returns null if none found. You can also specify a container to search within."
      ],
      "returns": "p5.Element|null: <a href=\"#/p5.Element\">p5.Element</a> containing node found",
      "params": {
        "selectors": "String: CSS selector string of element to search for",
        "container": "String|p5.Element|HTMLElement: (Optional) CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>, or  HTML element to search within"
      }
    },
    "selectAll": {
      "description": [
        "Searches the page for elements that match the given CSS selector string (can be an ID a class, tag name or a combination) and returns them as <a href=\"#/p5.Element\">p5.Element</a>s in an array. The DOM node itself can be accessed with .elt. Returns an empty array if none found. You can also specify a container to search within."
      ],
      "returns": "p5.Element[]: Array of <a href=\"#/p5.Element\">p5.Element</a>s containing nodes found",
      "params": {
        "selectors": "String: CSS selector string of elements to search for",
        "container": "String|p5.Element|HTMLElement: (Optional) CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>  , or HTML element to search within"
      }
    },
    "removeElements": {
      "description": [
        "Removes all elements created by p5, except any canvas / graphics elements created by <a href=\"#/p5/createCanvas\">createCanvas</a> or <a href=\"#/p5/createGraphics\">createGraphics</a>. Event handlers are removed, and element is removed from the DOM."
      ]
    },
    "changed": {
      "description": [
        "The .<a href=\"#/p5.Element/changed\">changed()</a> function is called when the value of an element changes. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when the value of  an element changes.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "input": {
      "description": [
        "The .<a href=\"#/p5.Element/input\">input()</a> function is called when any user input is detected with an element. The input event is often used to detect keystrokes in a input element, or changes on a slider element. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when any user input is  detected within the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "createDiv": {
      "description": [
        "Creates a <code>&lt;div&gt;&lt;/div&gt;</code> element in the DOM with given inner HTML."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "html": "String: (Optional) inner HTML for element created"
      }
    },
    "createP": {
      "description": [
        "Creates a <code>&lt;p&gt;&lt;/p&gt;</code> element in the DOM with given inner HTML. Used for paragraph length text."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "html": "String: (Optional) inner HTML for element created"
      }
    },
    "createSpan": {
      "description": [
        "Creates a <code>&lt;span&gt;&lt;/span&gt;</code> element in the DOM with given inner HTML."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "html": "String: (Optional) inner HTML for element created"
      }
    },
    "createImg": {
      "description": [
        "Creates an <code>&lt;img&gt;</code> element in the DOM with given src and alternate text."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "src": "String: src path or url for image",
        "alt": "String: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#Attributes\">alternate text</a> to be used if image does not load. You can use also an empty string (<code>\"\"</code>) if that an image is not intended to be viewed.",
        "crossOrigin": "String: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\">crossOrigin property</a> of the <code>img</code> element; use either 'anonymous' or 'use-credentials' to retrieve the image with cross-origin access (for later use with <code>canvas</code>. if an empty string(<code>\"\"</code>) is passed, CORS is not used",
        "successCallback": "Function: (Optional) callback to be called once image data is loaded with the <a href=\"#/p5.Element\">p5.Element</a> as argument"
      }
    },
    "createA": {
      "description": [
        "Creates an <code>&lt;a&gt;&lt;/a&gt;</code> element in the DOM for including a hyperlink."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "href": "String: url of page to link to",
        "html": "String: inner html of link element to display",
        "target": "String: (Optional) target where new link should open,  could be _blank, _self, _parent, _top."
      }
    },
    "createSlider": {
      "description": [
        "Creates a slider <code>&lt;input&gt;&lt;/input&gt;</code> element in the DOM. Use .size() to set the display length of the slider."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding the created node",
      "params": {
        "min": "Number: minimum value of the slider",
        "max": "Number: maximum value of the slider",
        "value": "Number: (Optional) default value of the slider",
        "step": "Number: (Optional) step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)"
      }
    },
    "createButton": {
      "description": [
        "Creates a <code>&lt;button&gt;&lt;/button&gt;</code> element in the DOM. Use .size() to set the display size of the button. Use .mousePressed() to specify behavior on press."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "label": "String: label displayed on the button",
        "value": "String: (Optional) value of the button"
      }
    },
    "createCheckbox": {
      "description": [
        "Creates a checkbox <code>&lt;input&gt;&lt;/input&gt;</code> element in the DOM. Calling .checked() on a checkbox returns a boolean indicating whether it is checked or not."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "label": "String: (Optional) label displayed after checkbox",
        "value": "Boolean: (Optional) value of the checkbox; checked is true, unchecked is false"
      }
    },
    "createSelect": {
      "description": [
        "Creates a dropdown menu <code>&lt;select&gt;&lt;/select&gt;</code> element in the DOM. It also assigns select-related methods to <a href=\"#/p5.Element\">p5.Element</a> when selecting an existing select box. Options in the menu are unique by <code>name</code> (the display text). <ul> <li><code>.option(name, [value])</code> can be used to add an option with <code>name</code> (the display text) and <code>value</code> to the select element. If an option with <code>name</code> already exists within the select element, this method will change its value to <code>value</code>.</li> <li><code>.value()</code> will return the currently selected option.</li> <li><code>.selected()</code> will return the current dropdown element which is an instance of <a href=\"#/p5.Element\">p5.Element</a>.</li> <li><code>.selected(value)</code> can be used to make given option selected by default when the page first loads.</li> <li><code>.disable()</code> marks the whole dropdown element as disabled.</li> <li><code>.disable(value)</code> marks a given option as disabled.</li> </ul>"
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "multiple": "Boolean: (Optional) true if dropdown should support multiple selections",
        "existing": "Object: DOM select element"
      }
    },
    "createRadio": {
      "description": [
        "Creates a radio button element in the DOM. It also helps existing radio buttons assign methods of <a href=\"#/p5.Element/\">p5.Element</a>. <ul> <li><code>.option(value, [label])</code> can be used to create a new option for the element. If an option with a value already exists, it will be returned. It is recommended to use string values as input for <code>value</code>. Optionally, a label can be provided as second argument for the option.</li> <li><code>.remove(value)</code> can be used to remove an option for the element. String values recommended as input for <code>value</code>.</li> <li><code>.value()</code> method will return the currently selected value.</li> <li><code>.selected()</code> method will return the currently selected input element.</li> <li><code>.selected(value)</code> method will select the option and return it. String values recommended as input for <code>value</code>.</li> <li><code>.disable(Boolean)</code> method will enable/disable the whole radio button element.</li> </ul>"
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "containerElement": "Object: A container HTML Element, either a div or span, inside which all existing radio inputs will be considered as options.",
        "name": "String: (Optional) A name parameter for each Input Element."
      }
    },
    "createColorPicker": {
      "description": [
        "Creates a colorPicker element in the DOM for color input. The .value() method will return a hex string (#rrggbb) of the color. The .color() method will return a <a href=\"#/p5.Color\">p5.Color</a> object with the current chosen color."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "value": "String|p5.Color: (Optional) default color of element"
      }
    },
    "createInput": {
      "description": [
        "Creates an <code>&lt;input&gt;&lt;/input&gt;</code> element in the DOM for text input. Use .<a href=\"#/p5.Element/size\">size()</a> to set the display length of the box."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "value": "String: default value of the input box",
        "type": "String: (Optional) type of text, ie text, password etc. Defaults to text.  Needs a value to be specified first."
      }
    },
    "createFileInput": {
      "description": [
        "Creates an <code>&lt;input&gt;&lt;/input&gt;</code> element in the DOM of type 'file'. This allows users to select local files for use in a sketch."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created DOM element",
      "params": {
        "callback": "Function: callback function for when a file is loaded",
        "multiple": "Boolean: (Optional) optional, to allow multiple files to be selected"
      }
    },
    "createVideo": {
      "description": [
        "Creates an HTML5 <code>&lt;video&gt;</code> element in the DOM for simple playback of audio/video. Shown by default, can be hidden with .<a href=\"#/p5.Element/hide\">hide()</a> and drawn into canvas using <a href=\"#/p5/image\">image()</a>. The first parameter can be either a single string path to a video file, or an array of string paths to different formats of the same video. This is useful for ensuring that your video can play across different browsers, as each supports different formats. See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this page</a> for further information about supported formats."
      ],
      "returns": "p5.MediaElement: pointer to video <a href=\"#/p5.MediaElement\">p5.MediaElement</a>",
      "params": {
        "src": "String|String[]: path to a video file, or array of paths for  supporting different browsers",
        "callback": "Function: (Optional) callback function to be called upon  'canplaythrough' event fire, that is, when the  browser can play the media, and estimates that  enough data has been loaded to play the media  up to its end without having to stop for  further buffering of content"
      }
    },
    "createAudio": {
      "description": [
        "Creates a hidden HTML5 <code>&lt;audio&gt;</code> element in the DOM for simple audio playback. The first parameter can be either a single string path to a audio file, or an array of string paths to different formats of the same audio. This is useful for ensuring that your audio can play across different browsers, as each supports different formats. See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this page for further information about supported formats</a>."
      ],
      "returns": "p5.MediaElement: pointer to audio <a href=\"#/p5.MediaElement\">p5.MediaElement</a>",
      "params": {
        "src": "String|String[]: (Optional) path to an audio file, or array of paths  for supporting different browsers",
        "callback": "Function: (Optional) callback function to be called upon  'canplaythrough' event fire, that is, when the  browser can play the media, and estimates that  enough data has been loaded to play the media  up to its end without having to stop for  further buffering of content"
      }
    },
    "createCapture": {
      "description": [
        "Creates a new HTML5 <code>&lt;video&gt;</code> element that contains the audio/video feed from a webcam. The element is separate from the canvas and is displayed by default. The element can be hidden using .<a href=\"#/p5.Element/hide\">hide()</a>. The feed can be drawn onto the canvas using <a href=\"#/p5/image\">image()</a>. The loadedmetadata property can be used to detect when the element has fully loaded (see second example).",
        "More specific properties of the feed can be passing in a Constraints object. See the <a href='http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints'> W3C spec</a> for possible properties. Note that not all of these are supported by all browsers.",
        "<em>Security note</em>: A new browser security specification requires that getUserMedia, which is behind <a href=\"#/p5/createCapture\">createCapture()</a>, only works when you're running the code locally, or on HTTPS. Learn more <a href='http://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https'>here</a> and <a href='https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia'>here</a>."
      ],
      "returns": "p5.Element: capture video <a href=\"#/p5.Element\">p5.Element</a>",
      "params": {
        "type": "String|Constant|Object: type of capture, either VIDEO or  AUDIO if none specified, default both,  or a Constraints object",
        "callback": "Function: (Optional) function to be called once  stream has loaded"
      }
    },
    "createElement": {
      "description": [
        "Creates element with given tag in the DOM with given content."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "tag": "String: tag for the new element",
        "content": "String: (Optional) html content to be inserted into the element"
      }
    },
    "deviceOrientation": {
      "description": [
        "The system variable deviceOrientation always contains the orientation of the device. The value of this variable will either be set 'landscape' or 'portrait'. If no data is available it will be set to 'undefined'. either LANDSCAPE or PORTRAIT."
      ]
    },
    "accelerationX": {
      "description": [
        "The system variable accelerationX always contains the acceleration of the device along the x axis. Value is represented as meters per second squared."
      ]
    },
    "accelerationY": {
      "description": [
        "The system variable accelerationY always contains the acceleration of the device along the y axis. Value is represented as meters per second squared."
      ]
    },
    "accelerationZ": {
      "description": [
        "The system variable accelerationZ always contains the acceleration of the device along the z axis. Value is represented as meters per second squared."
      ]
    },
    "pAccelerationX": {
      "description": [
        "The system variable pAccelerationX always contains the acceleration of the device along the x axis in the frame previous to the current frame. Value is represented as meters per second squared."
      ]
    },
    "pAccelerationY": {
      "description": [
        "The system variable pAccelerationY always contains the acceleration of the device along the y axis in the frame previous to the current frame. Value is represented as meters per second squared."
      ]
    },
    "pAccelerationZ": {
      "description": [
        "The system variable pAccelerationZ always contains the acceleration of the device along the z axis in the frame previous to the current frame. Value is represented as meters per second squared."
      ]
    },
    "rotationX": {
      "description": [
        "The system variable rotationX always contains the rotation of the device along the x axis. If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES, the value will be -180 to 180. If it is set to RADIANS, the value will be -PI to PI.",
        "Note: The order the rotations are called is important, ie. if used together, it must be called in the order Z-X-Y or there might be unexpected behaviour."
      ]
    },
    "rotationY": {
      "description": [
        "The system variable rotationY always contains the rotation of the device along the y axis. If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES, the value will be -90 to 90. If it is set to RADIANS, the value will be -PI/2 to PI/2.",
        "Note: The order the rotations are called is important, ie. if used together, it must be called in the order Z-X-Y or there might be unexpected behaviour."
      ]
    },
    "rotationZ": {
      "description": [
        "The system variable rotationZ always contains the rotation of the device along the z axis. If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES, the value will be 0 to 360. If it is set to RADIANS, the value will be 0 to 2*PI.",
        "Unlike rotationX and rotationY, this variable is available for devices with a built-in compass only.",
        "Note: The order the rotations are called is important, ie. if used together, it must be called in the order Z-X-Y or there might be unexpected behaviour."
      ]
    },
    "pRotationX": {
      "description": [
        "The system variable pRotationX always contains the rotation of the device along the x axis in the frame previous to the current frame. If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES, the value will be -180 to 180. If it is set to RADIANS, the value will be -PI to PI.",
        "pRotationX can also be used with rotationX to determine the rotate direction of the device along the X-axis."
      ]
    },
    "pRotationY": {
      "description": [
        "The system variable pRotationY always contains the rotation of the device along the y axis in the frame previous to the current frame. If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES, the value will be -90 to 90. If it is set to RADIANS, the value will be -PI/2 to PI/2.",
        "pRotationY can also be used with rotationY to determine the rotate direction of the device along the Y-axis."
      ]
    },
    "pRotationZ": {
      "description": [
        "The system variable pRotationZ always contains the rotation of the device along the z axis in the frame previous to the current frame. If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES, the value will be 0 to 360. If it is set to RADIANS, the value will be 0 to 2*PI.",
        "pRotationZ can also be used with rotationZ to determine the rotate direction of the device along the Z-axis."
      ]
    },
    "turnAxis": {
      "description": [
        "When a device is rotated, the axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method is stored in the turnAxis variable. The turnAxis variable is only defined within the scope of deviceTurned()."
      ]
    },
    "setMoveThreshold": {
      "description": [
        "The <a href=\"#/p5/setMoveThreshold\">setMoveThreshold()</a> function is used to set the movement threshold for the <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function. The default threshold is set to 0.5."
      ],
      "params": {
        "value": "Number: The threshold value"
      }
    },
    "setShakeThreshold": {
      "description": [
        "The <a href=\"#/p5/setShakeThreshold\">setShakeThreshold()</a> function is used to set the movement threshold for the <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function. The default threshold is set to 30."
      ],
      "params": {
        "value": "Number: The threshold value"
      }
    },
    "deviceMoved": {
      "description": [
        "The <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function is called when the device is moved by more than the threshold value along X, Y or Z axis. The default threshold is set to 0.5. The threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setMoveThreshold\">setMoveThreshold()</a>."
      ]
    },
    "deviceTurned": {
      "description": [
        "The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> function is called when the device rotates by more than 90 degrees continuously.",
        "The axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method is stored in the turnAxis variable. The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method can be locked to trigger on any axis: X, Y or Z by comparing the turnAxis variable to 'X', 'Y' or 'Z'."
      ]
    },
    "deviceShaken": {
      "description": [
        "The <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function is called when the device total acceleration changes of accelerationX and accelerationY values is more than the threshold value. The default threshold is set to 30. The threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setShakeThreshold\">setShakeThreshold()</a>."
      ]
    },
    "keyIsPressed": {
      "description": [
        "The boolean system variable <a href=\"#/p5/keyIsPressed\">keyIsPressed</a> is true if any key is pressed and false if no keys are pressed."
      ]
    },
    "key": {
      "description": [
        "The system variable key always contains the value of the most recent key on the keyboard that was typed. To get the proper capitalization, it is best to use it within <a href=\"#/p5/keyTyped\">keyTyped()</a>. For non-ASCII keys, use the <a href=\"#/p5/keyCode\">keyCode</a> variable."
      ]
    },
    "keyCode": {
      "description": [
        "The variable keyCode is used to detect special keys such as BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW. You can also check for custom keys by looking up the keyCode of any key on a site like this: <a href=\"http://keycode.info/\">keycode.info</a>."
      ]
    },
    "keyPressed": {
      "description": [
        "The <a href=\"#/p5/keyPressed\">keyPressed()</a> function is called once every time a key is pressed. The keyCode for the key that was pressed is stored in the <a href=\"#/p5/keyCode\">keyCode</a> variable.",
        "For non-ASCII keys, use the keyCode variable. You can check if the keyCode equals BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.",
        "For ASCII keys, the key that was pressed is stored in the key variable. However, it does not distinguish between uppercase and lowercase. For this reason, it is recommended to use <a href=\"#/p5/keyTyped\">keyTyped()</a> to read the key variable, in which the case of the variable will be distinguished.",
        "Because of how operating systems handle key repeats, holding down a key may cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The rate of repeat is set by the operating system and how each computer is configured. Browsers may have different default behaviors attached to various key events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional KeyboardEvent callback argument."
      }
    },
    "keyReleased": {
      "description": [
        "The <a href=\"#/p5/keyReleased\">keyReleased()</a> function is called once every time a key is released. See <a href=\"#/p5/key\">key</a> and <a href=\"#/p5/keyCode\">keyCode</a> for more information. Browsers may have different default behaviors attached to various key events. To prevent any default behavior for this event, add \"return false\" to the end of the function."
      ],
      "params": {
        "event": "Object: (Optional) optional KeyboardEvent callback argument."
      }
    },
    "keyTyped": {
      "description": [
        "The <a href=\"#/p5/keyTyped\">keyTyped()</a> function is called once every time a key is pressed, but action keys such as Backspace, Delete, Ctrl, Shift, and Alt are ignored. If you are trying to detect a keyCode for one of these keys, use the <a href=\"#/p5/keyPressed\">keyPressed()</a> function instead. The most recent key typed will be stored in the key variable.",
        "Because of how operating systems handle key repeats, holding down a key will cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The rate of repeat is set by the operating system and how each computer is configured. Browsers may have different default behaviors attached to various key events. To prevent any default behavior for this event, add \"return false\" to the end of the function."
      ],
      "params": {
        "event": "Object: (Optional) optional KeyboardEvent callback argument."
      }
    },
    "keyIsDown": {
      "description": [
        "The <a href=\"#/p5/keyIsDown\">keyIsDown()</a> function checks if the key is currently down, i.e. pressed. It can be used if you have an object that moves, and you want several keys to be able to affect its behaviour simultaneously, such as moving a sprite diagonally. You can put in any number representing the keyCode of the key, or use any of the variable <a href=\"#/p5/keyCode\">keyCode</a> names listed <a href=\"http://p5js.org/reference/#p5/keyCode\">here</a>."
      ],
      "returns": "Boolean: whether key is down or not",
      "params": {
        "code": "Number: The key to check for."
      }
    },
    "movedX": {
      "description": [
        "The variable movedX contains the horizontal movement of the mouse since the last frame"
      ]
    },
    "movedY": {
      "description": [
        "The variable movedY contains the vertical movement of the mouse since the last frame"
      ]
    },
    "mouseX": {
      "description": [
        "The system variable mouseX always contains the current horizontal position of the mouse, relative to (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL. If touch is used instead of mouse input, mouseX will hold the x value of the most recent touch point."
      ]
    },
    "mouseY": {
      "description": [
        "The system variable mouseY always contains the current vertical position of the mouse, relative to (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL. If touch is used instead of mouse input, mouseY will hold the y value of the most recent touch point."
      ]
    },
    "pmouseX": {
      "description": [
        "The system variable pmouseX always contains the horizontal position of the mouse or finger in the frame previous to the current frame, relative to (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL. Note: pmouseX will be reset to the current mouseX value at the start of each touch event."
      ]
    },
    "pmouseY": {
      "description": [
        "The system variable pmouseY always contains the vertical position of the mouse or finger in the frame previous to the current frame, relative to (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL. Note: pmouseY will be reset to the current mouseY value at the start of each touch event."
      ]
    },
    "winMouseX": {
      "description": [
        "The system variable winMouseX always contains the current horizontal position of the mouse, relative to (0, 0) of the window."
      ]
    },
    "winMouseY": {
      "description": [
        "The system variable winMouseY always contains the current vertical position of the mouse, relative to (0, 0) of the window."
      ]
    },
    "pwinMouseX": {
      "description": [
        "The system variable pwinMouseX always contains the horizontal position of the mouse in the frame previous to the current frame, relative to (0, 0) of the window. Note: pwinMouseX will be reset to the current winMouseX value at the start of each touch event."
      ]
    },
    "pwinMouseY": {
      "description": [
        "The system variable pwinMouseY always contains the vertical position of the mouse in the frame previous to the current frame, relative to (0, 0) of the window. Note: pwinMouseY will be reset to the current winMouseY value at the start of each touch event."
      ]
    },
    "mouseButton": {
      "description": [
        "p5 automatically tracks if the mouse button is pressed and which button is pressed. The value of the system variable mouseButton is either LEFT, RIGHT, or CENTER depending on which button was pressed last. Warning: different browsers may track mouseButton differently."
      ]
    },
    "mouseIsPressed": {
      "description": [
        "The boolean system variable mouseIsPressed is true if the mouse is pressed and false if not."
      ]
    },
    "mouseMoved": {
      "description": [
        "The <a href=\"#/p5/mouseMoved\">mouseMoved()</a> function is called every time the mouse moves and a mouse button is not pressed. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseDragged": {
      "description": [
        "The <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is called once every time the mouse moves and a mouse button is pressed. If no <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is defined, the <a href=\"#/p5/touchMoved\">touchMoved()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the function."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mousePressed": {
      "description": [
        "The <a href=\"#/p5/mousePressed\">mousePressed()</a> function is called once after every time a mouse button is pressed. The mouseButton variable (see the related reference entry) can be used to determine which button has been pressed. If no <a href=\"#/p5/mousePressed\">mousePressed()</a> function is defined, the <a href=\"#/p5/touchStarted\">touchStarted()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the function."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseReleased": {
      "description": [
        "The <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is called every time a mouse button is released. If no <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is defined, the <a href=\"#/p5/touchEnded\">touchEnded()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the function."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseClicked": {
      "description": [
        "The <a href=\"#/p5/mouseClicked\">mouseClicked()</a> function is called once after a mouse button has been pressed and then released. Browsers handle clicks differently, so this function is only guaranteed to be run when the left mouse button is clicked. To handle other mouse buttons being pressed or released, see <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/mouseReleased\">mouseReleased()</a>. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the function."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "doubleClicked": {
      "description": [
        "The <a href=\"#/p5/doubleClicked\">doubleClicked()</a> function is executed every time a event listener has detected a dblclick event which is a part of the DOM L3 specification. The doubleClicked event is fired when a pointing device button (usually a mouse's primary button) is clicked twice on a single element. For more info on the dblclick event refer to mozilla's documentation here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dblclick\">https://developer.mozilla.org/en-US/docs/Web/Events/dblclick</a>"
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseWheel": {
      "description": [
        "The function <a href=\"#/p5/mouseWheel\">mouseWheel()</a> is executed every time a vertical mouse wheel event is detected either triggered by an actual mouse wheel or by a touchpad. The event.delta property returns the amount the mouse wheel have scrolled. The values can be positive or negative depending on the scroll direction (on macOS with \"natural\" scrolling enabled, the signs are inverted). Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method. Due to the current support of the \"wheel\" event on Safari, the function may only work as expected if \"return false\" is included while using Safari."
      ],
      "params": {
        "event": "Object: (Optional) optional WheelEvent callback argument."
      }
    },
    "requestPointerLock": {
      "description": [
        "The function <a href=\"#/p5/requestPointerLock\">requestPointerLock()</a> locks the pointer to its current position and makes it invisible. Use <a href=\"#/p5/movedX\">movedX</a> and <a href=\"#/p5/movedY\">movedY</a> to get the difference the mouse was moved since the last call of draw. Note that not all browsers support this feature. This enables you to create experiences that aren't limited by the mouse moving out of the screen even if it is repeatedly moved into one direction. For example, a first person perspective experience."
      ]
    },
    "exitPointerLock": {
      "description": [
        "The function <a href=\"#/p5/exitPointerLock\">exitPointerLock()</a> exits a previously triggered <a href=\"#/p5/requestPointerLock\">pointer Lock</a> for example to make ui elements usable etc"
      ]
    },
    "touches": {
      "description": [
        "The system variable touches[] contains an array of the positions of all current touch points, relative to (0, 0) of the canvas, and IDs identifying a unique touch as it moves. Each element in the array is an object with x, y, and id properties.",
        "The touches[] array is not supported on Safari and IE on touch-based desktops (laptops)."
      ]
    },
    "touchStarted": {
      "description": [
        "The touchStarted() function is called once after every time a touch is registered. If no <a href=\"#/p5/touchStarted\">touchStarted()</a> function is defined, the <a href=\"#/p5/mousePressed\">mousePressed()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various touch events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional TouchEvent callback argument."
      }
    },
    "touchMoved": {
      "description": [
        "The <a href=\"#/p5/touchMoved\">touchMoved()</a> function is called every time a touch move is registered. If no <a href=\"#/p5/touchMoved\">touchMoved()</a> function is defined, the <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various touch events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional TouchEvent callback argument."
      }
    },
    "touchEnded": {
      "description": [
        "The <a href=\"#/p5/touchEnded\">touchEnded()</a> function is called every time a touch ends. If no <a href=\"#/p5/touchEnded\">touchEnded()</a> function is defined, the <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various touch events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional TouchEvent callback argument."
      }
    },
    "createImage": {
      "description": [
        "Creates a new <a href=\"#/p5.Image\">p5.Image</a> (the datatype for storing images). This provides a fresh buffer of pixels to play with. Set the size of the buffer with the width and height parameters.",
        ".<a href=\"#/p5.Image/pixels\">pixels</a> gives access to an array containing the values for all the pixels in the display window. These values are numbers. This array is the size (including an appropriate factor for the <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4, representing the R, G, B, A values in order for each pixel, moving from left to right across each row, then down each column. See .<a href=\"#/p5.Image/pixels\">pixels</a> for more info. It may also be simpler to use <a href=\"#/p5.Image/set\">set()</a> or <a href=\"#/p5.Image/get\">get()</a>.",
        "Before accessing the pixels of an image, the data must loaded with the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the <a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes."
      ],
      "returns": "p5.Image: the <a href=\"#/p5.Image\">p5.Image</a> object",
      "params": {
        "width": "Integer: width in pixels",
        "height": "Integer: height in pixels"
      }
    },
    "saveCanvas": {
      "description": [
        "Save the current canvas as an image. The browser will either save the file immediately, or prompt the user with a dialogue window."
      ],
      "params": {
        "selectedCanvas": "p5.Element|HTMLCanvasElement: a variable  representing a specific html5 canvas (optional)",
        "filename": "String (Optional)",
        "extension": "String: (Optional) 'jpg' or 'png'"
      }
    },
    "saveFrames": {
      "description": [
        "Capture a sequence of frames that can be used to create a movie. Accepts a callback. For example, you may wish to send the frames to a server where they can be stored or converted into a movie. If no callback is provided, the browser will pop up save dialogues in an attempt to download all of the images that have just been created. With the callback provided the image data isn't saved by default but instead passed as an argument to the callback function as an array of objects, with the size of array equal to the total number of frames.",
        "The arguments <code>duration</code> and <code>framerate</code> are constrained to be less or equal to 15 and 22, respectively, which means you can only download a maximum of 15 seconds worth of frames at 22 frames per second, adding up to 330 frames. This is done in order to avoid memory problems since a large enough canvas can fill up the memory in your computer very easily and crash your program or even your browser.",
        "To export longer animations, you might look into a library like <a href=\"https://github.com/spite/ccapture.js/\">ccapture.js</a>."
      ],
      "params": {
        "filename": "String",
        "extension": "String: 'jpg' or 'png'",
        "duration": "Number: Duration in seconds to save the frames for. This parameter will be constrained to be less or equal to 15.",
        "framerate": "Number: Framerate to save the frames in. This parameter will be constrained to be less or equal to 22.",
        "callback": "Function(Array): (Optional) A callback function that will be executed  to handle the image data. This function  should accept an array as argument. The  array will contain the specified number of  frames of objects. Each object has three  properties: imageData - an  image/octet-stream, filename and extension."
      }
    },
    "loadImage": {
      "description": [
        "Loads an image from a path and creates a <a href=\"#/p5.Image\">p5.Image</a> from it.",
        "The image may not be immediately available for rendering. If you want to ensure that the image is ready before doing anything with it, place the <a href=\"#/p5/loadImage\">loadImage()</a> call in <a href=\"#/p5/preload\">preload()</a>. You may also supply a callback function to handle the image when it's ready.",
        "The path to the image should be relative to the HTML file that links in your sketch. Loading an image from a URL or other remote location may be blocked due to your browser's built-in security.",
        "You can also pass in a string of a base64 encoded image as an alternative to the file path. Remember to add \"data:image/png;base64,\" in front of the string."
      ],
      "returns": "p5.Image: the <a href=\"#/p5.Image\">p5.Image</a> object",
      "params": {
        "path": "String: Path of the image to be loaded",
        "successCallback": "function(p5.Image): (Optional) Function to be called once  the image is loaded. Will be passed the  <a href=\"#/p5.Image\">p5.Image</a>.",
        "failureCallback": "Function(Event): (Optional) called with event error if  the image fails to load."
      }
    },
    "saveGif": {
      "description": [
        "Generates a gif of your current animation and downloads it to your computer!",
        "The duration argument specifies how many seconds you want to record from your animation. This value is then converted to the necessary number of frames to generate it, depending on the value of units. More on that on the next paragraph.",
        "An optional object that can contain two more arguments: delay (number) and units (string).",
        "<code>delay</code>, specifying how much time we should wait before recording",
        "<code>units</code>, a string that can be either 'seconds' or 'frames'. By default it's 'seconds'.",
        "<code>units</code> specifies how the duration and delay arguments will behave. If 'seconds', these arguments will correspond to seconds, meaning that 3 seconds worth of animation will be created. If 'frames', the arguments now correspond to the number of frames you want your animation to be, if you are very sure of this number.",
        "This may be called in setup, or, like in the example below, inside an event function, like keyPressed or mousePressed."
      ],
      "params": {
        "filename": "String: File name of your gif",
        "duration": "Number: Duration in seconds that you wish to capture from your sketch",
        "options": "Object: An optional object that can contain two more arguments: delay, specifying how much time we should wait before recording, and units, a string that can be either 'seconds' or 'frames'. By default it's 'seconds'."
      }
    },
    "image": {
      "description": [
        "Draw an image to the p5.js canvas.",
        "This function can be used with different numbers of parameters. The simplest use requires only three parameters: img, x, and y—where (x, y) is the position of the image. Two more parameters can optionally be added to specify the width and height of the image.",
        "This function can also be used with eight Number parameters. To differentiate between all these parameters, p5.js uses the language of \"destination rectangle\" (which corresponds to \"dx\", \"dy\", etc.) and \"source image\" (which corresponds to \"sx\", \"sy\", etc.) below. Specifying the \"source image\" dimensions can be useful when you want to display a subsection of the source image instead of the whole thing. Here's a diagram to explain further: <img src=\"assets/drawImage.png\"></img>",
        "This function can also be used to draw images without distorting the orginal aspect ratio, by adding 9th parameter, fit, which can either be COVER or CONTAIN. CONTAIN, as the name suggests, contains the whole image within the specified destination box without distorting the image ratio. COVER covers the entire destination box."
      ],
      "params": {
        "img": "p5.Image|p5.Element|p5.Texture: the image to display",
        "x": "Number: the x-coordinate of the top-left corner of the image",
        "y": "Number: the y-coordinate of the top-left corner of the image",
        "width": "Number: (Optional) the width to draw the image",
        "height": "Number: (Optional) the height to draw the image",
        "dx": "Number: the x-coordinate of the destination  rectangle in which to draw the source image",
        "dy": "Number: the y-coordinate of the destination  rectangle in which to draw the source image",
        "dWidth": "Number: the width of the destination rectangle",
        "dHeight": "Number: the height of the destination rectangle",
        "sx": "Number: the x-coordinate of the subsection of the source image to draw into the destination rectangle",
        "sy": "Number: the y-coordinate of the subsection of the source image to draw into the destination rectangle",
        "sWidth": "Number: (Optional) the width of the subsection of the  source image to draw into the destination  rectangle",
        "sHeight": "Number: (Optional) the height of the subsection of the  source image to draw into the destination rectangle",
        "fit": "Constant: (Optional) either CONTAIN or COVER",
        "xAlign": "Constant: (Optional) either LEFT, RIGHT or CENTER default is CENTER",
        "yAlign": "Constant: (Optional) either TOP, BOTTOM or CENTER default is CENTER"
      }
    },
    "tint": {
      "description": [
        "Sets the fill value for displaying images. Images can be tinted to specified colors or made transparent by including an alpha value.",
        "To apply transparency to an image without affecting its color, use white as the tint color and specify an alpha value. For instance, tint(255, 128) will make an image 50% transparent (assuming the default alpha range of 0-255, which can be changed with <a href=\"#/p5/colorMode\">colorMode()</a>).",
        "The value for the gray parameter must be less than or equal to the current maximum value as specified by <a href=\"#/p5/colorMode\">colorMode()</a>. The default maximum value is 255."
      ],
      "params": {
        "v1": "Number: red or hue value relative to  the current color range",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "alpha": "Number (Optional)",
        "value": "String: a color string",
        "gray": "Number: a gray value",
        "values": "Number[]: an array containing the red,green,blue &  and alpha components of the color",
        "color": "p5.Color: the tint color"
      }
    },
    "noTint": {
      "description": [
        "Removes the current fill value for displaying images and reverts to displaying images with their original hues."
      ]
    },
    "imageMode": {
      "description": [
        "Set image mode. Modifies the location from which images are drawn by changing the way in which parameters given to <a href=\"#/p5/image\">image()</a> are interpreted. The default mode is imageMode(CORNER), which interprets the second and third parameters of <a href=\"#/p5/image\">image()</a> as the upper-left corner of the image. If two additional parameters are specified, they are used to set the image's width and height.",
        "imageMode(CORNERS) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a> as the location of one corner, and the fourth and fifth parameters as the opposite corner.",
        "imageMode(CENTER) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a> as the image's center point. If two additional parameters are specified, they are used to set the image's width and height."
      ],
      "params": {
        "mode": "Constant: either CORNER, CORNERS, or CENTER"
      }
    },
    "pixels": {
      "description": [
        "<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference /Global_Objects/Uint8ClampedArray' target='_blank'>Uint8ClampedArray</a> containing the values for all the pixels in the display window. These values are numbers. This array is the size (include an appropriate factor for <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4, representing the R, G, B, A values in order for each pixel, moving from left to right across each row, then down each column. Retina and other high density displays will have more pixels[] (by a factor of pixelDensity^2). For example, if the image is 100×100 pixels, there will be 40,000. On a retina display, there will be 160,000.",
        "The first four values (indices 0-3) in the array will be the R, G, B, A values of the pixel at (0, 0). The second four values (indices 4-7) will contain the R, G, B, A values of the pixel at (1, 0). More generally, to set values for a pixel at (x, y): <pre><code class=\"language-javascript\">let d = pixelDensity(); for (let i = 0; i < d; i++) {  for (let j = 0; j < d; j++) {  // loop over  index = 4 * ((y * d + j) * width * d + (x * d + i));  pixels[index] = r;  pixels[index+1] = g;  pixels[index+2] = b;  pixels[index+3] = a;  } } </code></pre>",
        "While the above method is complex, it is flexible enough to work with any pixelDensity. Note that <a href=\"#/p5/set\">set()</a> will automatically take care of setting all the appropriate values in <a href=\"#/p5/pixels\">pixels[]</a> for a given (x, y) at any pixelDensity, but the performance may not be as fast when lots of modifications are made to the pixel array.",
        "Before accessing this array, the data must loaded with the <a href=\"#/p5/loadPixels\">loadPixels()</a> function. After the array data has been modified, the <a href=\"#/p5/updatePixels\">updatePixels()</a> function must be run to update the changes.",
        "Note that this is not a standard javascript array. This means that standard javascript functions such as <a href=\"#/p5/slice\">slice()</a> or <a href=\"#/p5/arrayCopy\">arrayCopy()</a> do not work."
      ]
    },
    "blend": {
      "description": [
        "Copies a region of pixels from one image to another, using a specified blend mode to do the operation."
      ],
      "params": {
        "srcImage": "p5.Image: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height",
        "blendMode": "Constant: the blend mode. either  BLEND, DARKEST, LIGHTEST, DIFFERENCE,  MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,  SOFT_LIGHT, DODGE, BURN, ADD or NORMAL."
      }
    },
    "copy": {
      "description": [
        "Copies a region of the canvas to another region of the canvas and copies a region of pixels from an image used as the srcImg parameter into the canvas srcImage is specified this is used as the source. If the source and destination regions aren't the same size, it will automatically resize source pixels to fit the specified target region."
      ],
      "params": {
        "srcImage": "p5.Image|p5.Element: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height"
      }
    },
    "filter": {
      "description": [
        "Applies a filter to the canvas. The presets options are:",
        "THRESHOLD Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.",
        "GRAY Converts any colors in the image to grayscale equivalents. No parameter is used.",
        "OPAQUE Sets the alpha channel to entirely opaque. No parameter is used.",
        "INVERT Sets each pixel to its inverse value. No parameter is used.",
        "POSTERIZE Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges.",
        "BLUR Executes a Gaussian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Gaussian blur of radius 1. Larger values increase the blur.",
        "ERODE Reduces the light areas. No parameter is used.",
        "DILATE Increases the light areas. No parameter is used.",
        "filter() does not work in WEBGL mode. A similar effect can be achieved in WEBGL mode using custom shaders. Adam Ferriss has written a <a href=\"https://github.com/aferriss/p5jsShaderExamples\" target='_blank'>selection of shader examples</a> that contains many of the effects present in the filter examples."
      ],
      "params": {
        "filterType": "Constant: either THRESHOLD, GRAY, OPAQUE, INVERT,  POSTERIZE, BLUR, ERODE, DILATE or BLUR.  See Filters.js for docs on  each available filter",
        "filterParam": "Number: (Optional) an optional parameter unique  to each filter, see above"
      }
    },
    "get": {
      "description": [
        "Get a region of pixels, or a single pixel, from the canvas.",
        "Returns an array of [R,G,B,A] values for any pixel or grabs a section of an image. If no parameters are specified, the entire image is returned. Use the x and y parameters to get the value of one pixel. Get a section of the display window by specifying additional w and h parameters. When getting an image, the x and y parameters define the coordinates for the upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.",
        "Getting the color of a single pixel with get(x, y) is easy, but not as fast as grabbing the data directly from <a href=\"#/p5/pixels\">pixels[]</a>. The equivalent statement to get(x, y) using <a href=\"#/p5/pixels\">pixels[]</a> with pixel density d is <pre><code class=\"language-javascript\">let x, y, d; // set these to the coordinates let off = (y * width + x) * d * 4; let components = [  pixels[off],  pixels[off + 1],  pixels[off + 2],  pixels[off + 3] ]; print(components); </code></pre>",
        "See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.",
        "If you want to extract an array of colors or a subimage from an p5.Image object, take a look at <a href=\"#/p5.Image/get\">p5.Image.get()</a>"
      ],
      "returns": "p5.Image: the rectangle <a href=\"#/p5.Image\">p5.Image</a>",
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "w": "Number: width",
        "h": "Number: height"
      }
    },
    "loadPixels": {
      "description": [
        "Loads the pixel data for the display window into the <a href=\"#/p5/pixels\">pixels[]</a> array. This function must always be called before reading from or writing to <a href=\"#/p5/pixels\">pixels[]</a>. Note that only changes made with <a href=\"#/p5/set\">set()</a> or direct manipulation of <a href=\"#/p5/pixels\">pixels[]</a> will occur."
      ]
    },
    "set": {
      "description": [
        "Changes the color of any pixel, or writes an image directly to the display window. The x and y parameters specify the pixel to change and the c parameter specifies the color value. This can be a <a href=\"#/p5.Color\">p5.Color</a> object, or [R, G, B, A] pixel array. It can also be a single grayscale value. When setting an image, the x and y parameters define the coordinates for the upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.",
        "After using <a href=\"#/p5/set\">set()</a>, you must call <a href=\"#/p5/updatePixels\">updatePixels()</a> for your changes to appear. This should be called once all pixels have been set, and must be called before calling .<a href=\"#/p5/get\">get()</a> or drawing the image.",
        "Setting the color of a single pixel with set(x, y) is easy, but not as fast as putting the data directly into <a href=\"#/p5/pixels\">pixels[]</a>. Setting the <a href=\"#/p5/pixels\">pixels[]</a> values directly may be complicated when working with a retina display, but will perform better when lots of pixels need to be set directly on every loop. See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information."
      ],
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "c": "Number|Number[]|Object: insert a grayscale value | a pixel array |  a <a href=\"#/p5.Color\">p5.Color</a> object | a <a href=\"#/p5.Image\">p5.Image</a> to copy"
      }
    },
    "updatePixels": {
      "description": [
        "Updates the display window with the data in the <a href=\"#/p5/pixels\">pixels[]</a> array. Use in conjunction with <a href=\"#/p5/loadPixels\">loadPixels()</a>. If you're only reading pixels from the array, there's no need to call <a href=\"#/p5/updatePixels\">updatePixels()</a> — updating is only necessary to apply changes. <a href=\"#/p5/updatePixels\">updatePixels()</a> should be called anytime the pixels array is manipulated or <a href=\"#/p5/set\">set()</a> is called, and only changes made with <a href=\"#/p5/set\">set()</a> or direct changes to <a href=\"#/p5/pixels\">pixels[]</a> will occur."
      ],
      "params": {
        "x": "Number: (Optional) x-coordinate of the upper-left corner of region  to update",
        "y": "Number: (Optional) y-coordinate of the upper-left corner of region  to update",
        "w": "Number: (Optional) width of region to update",
        "h": "Number: (Optional) height of region to update"
      }
    },
    "loadJSON": {
      "description": [
        "Loads a JSON file from a file or a URL, and returns an Object. Note that even if the JSON file contains an Array, an Object will be returned with index numbers as keys.",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. JSONP is supported via a polyfill and you can pass in as the second argument an object with definitions of the json callback following the syntax specified <a href=\"https://github.com/camsong/ fetch-jsonp\">here</a>.",
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object|Array: JSON data",
      "params": {
        "path": "String: name of the file or url to load",
        "jsonpOptions": "Object: (Optional) options object for jsonp related settings",
        "datatype": "String: (Optional) \"json\" or \"jsonp\"",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/loadJSON\">loadJSON()</a> completes, data is passed  in as first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "loadStrings": {
      "description": [
        "Reads the contents of a file and creates a String array of its individual lines. If the name of the file is used as the parameter, as in the above example, the file must be located in the sketch directory/folder.",
        "Alternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network.",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed.",
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "String[]: Array of Strings",
      "params": {
        "filename": "String: name of the file or url to load",
        "callback": "Function: (Optional) function to be executed after <a href=\"#/p5/loadStrings\">loadStrings()</a>  completes, Array is passed in as first  argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "loadTable": {
      "description": [
        "Reads the contents of a file or URL and creates a <a href=\"#/p5.Table\">p5.Table</a> object with its values. If a file is specified, it must be located in the sketch's \"data\" folder. The filename parameter can also be a URL to a file found online. By default, the file is assumed to be comma-separated (in CSV format). Table only looks for a header row if the 'header' option is included.",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. Calling <a href=\"#/p5/loadTable\">loadTable()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called. Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the object:",
        "All files loaded and saved use UTF-8 encoding. This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object: <a href=\"#/p5.Table\">Table</a> object containing data",
      "params": {
        "filename": "String: name of the file or URL to load",
        "extension": "String: (Optional) parse the table by comma-separated values \"csv\", semicolon-separated  values \"ssv\", or tab-separated values \"tsv\"",
        "header": "String: (Optional) \"header\" to indicate table has header row",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/loadTable\">loadTable()</a> completes. On success, the  <a href=\"#/p5.Table\">Table</a> object is passed in as the  first argument.",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "loadXML": {
      "description": [
        "Reads the contents of a file and creates an XML object with its values. If the name of the file is used as the parameter, as in the above example, the file must be located in the sketch directory/folder.",
        "Alternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network.",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. Calling <a href=\"#/p5/loadXML\">loadXML()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.",
        "Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the object.",
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object: XML object containing data",
      "params": {
        "filename": "String: name of the file or URL to load",
        "callback": "Function: (Optional) function to be executed after <a href=\"#/p5/loadXML\">loadXML()</a>  completes, XML object is passed in as  first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "loadBytes": {
      "description": [
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object: an object whose 'bytes' property will be the loaded buffer",
      "params": {
        "file": "String: name of the file or URL to load",
        "callback": "Function: (Optional) function to be executed after <a href=\"#/p5/loadBytes\">loadBytes()</a>  completes",
        "errorCallback": "Function: (Optional) function to be executed if there  is an error"
      }
    },
    "httpGet": {
      "description": [
        "Method for executing an HTTP GET request. If data type is not specified, p5 will try to guess based on the URL, defaulting to text. This is equivalent to calling <code>httpDo(path, 'GET')</code>. The 'binary' datatype will return a Blob object, and the 'arrayBuffer' datatype will return an ArrayBuffer which can be used to initialize typed arrays (such as Uint8Array)."
      ],
      "returns": "Promise: A promise that resolves with the data when the operation  completes successfully or rejects with the error after  one occurs.",
      "params": {
        "path": "String: name of the file or url to load",
        "datatype": "String: (Optional) \"json\", \"jsonp\", \"binary\", \"arrayBuffer\",  \"xml\", or \"text\"",
        "data": "Object|Boolean: (Optional) param data passed sent with request",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in  as first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "httpPost": {
      "description": [
        "Method for executing an HTTP POST request. If data type is not specified, p5 will try to guess based on the URL, defaulting to text. This is equivalent to calling <code>httpDo(path, 'POST')</code>."
      ],
      "returns": "Promise: A promise that resolves with the data when the operation  completes successfully or rejects with the error after  one occurs.",
      "params": {
        "path": "String: name of the file or url to load",
        "datatype": "String: (Optional) \"json\", \"jsonp\", \"xml\", or \"text\".  If omitted, <a href=\"#/p5/httpPost\">httpPost()</a> will guess.",
        "data": "Object|Boolean: (Optional) param data passed sent with request",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/httpPost\">httpPost()</a> completes, data is passed in  as first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "httpDo": {
      "description": [
        "Method for executing an HTTP request. If data type is not specified, p5 will try to guess based on the URL, defaulting to text. For more advanced use, you may also pass in the path as the first argument and a object as the second argument, the signature follows the one specified in the Fetch API specification. This method is suitable for fetching files up to size of 64MB when \"GET\" is used."
      ],
      "returns": "Promise: A promise that resolves with the data when the operation  completes successfully or rejects with the error after  one occurs.",
      "params": {
        "path": "String: name of the file or url to load",
        "method": "String: (Optional) either \"GET\", \"POST\", or \"PUT\",  defaults to \"GET\"",
        "datatype": "String: (Optional) \"json\", \"jsonp\", \"xml\", or \"text\"",
        "data": "Object: (Optional) param data passed sent with request",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in  as first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument",
        "options": "Object: Request object options as documented in the  \"fetch\" API <a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">reference</a>"
      }
    },
    "createWriter": {
      "returns": "p5.PrintWriter:",
      "params": {
        "name": "String: name of the file to be created",
        "extension": "String (Optional)"
      }
    },
    "save": {
      "description": [
        "Saves a given element(image, text, json, csv, wav, or html) to the client's computer. The first parameter can be a pointer to element we want to save. The element can be one of <a href=\"#/p5.Element\">p5.Element</a>,an Array of Strings, an Array of JSON, a JSON object, a <a href=\"#/p5.Table\">p5.Table </a>, a <a href=\"#/p5.Image\">p5.Image</a>, or a p5.SoundFile (requires p5.sound). The second parameter is a filename (including extension).The third parameter is for options specific to this type of object. This method will save a file that fits the given parameters. If it is called without specifying an element, by default it will save the whole canvas as an image file. You can optionally specify a filename as the first parameter in such a case. <strong>Note that it is not recommended to call this method within draw, as it will open a new save dialog on every render.</strong>"
      ],
      "params": {
        "objectOrFilename": "Object|String: (Optional) If filename is provided, will  save canvas as an image with  either png or jpg extension  depending on the filename.  If object is provided, will  save depending on the object  and filename (see examples  above).",
        "filename": "String: (Optional) If an object is provided as the first  parameter, then the second parameter  indicates the filename,  and should include an appropriate  file extension (see examples above).",
        "options": "Boolean|String: (Optional) Additional options depend on  filetype. For example, when saving JSON,  <code>true</code> indicates that the  output will be optimized for filesize,  rather than readability."
      }
    },
    "saveJSON": {
      "description": [
        "Writes the contents of an Array or a JSON object to a .json file. The file saving process and location of the saved file will vary between web browsers."
      ],
      "params": {
        "json": "Array|Object",
        "filename": "String",
        "optimize": "Boolean: (Optional) If true, removes line breaks  and spaces from the output  file to optimize filesize  (but not readability)."
      }
    },
    "saveStrings": {
      "description": [
        "Writes an array of Strings to a text file, one line per String. The file saving process and location of the saved file will vary between web browsers."
      ],
      "params": {
        "list": "String[]: string array to be written",
        "filename": "String: filename for output",
        "extension": "String: (Optional) the filename's extension",
        "isCRLF": "Boolean: (Optional) if true, change line-break to CRLF"
      }
    },
    "saveTable": {
      "description": [
        "Writes the contents of a <a href=\"#/p5.Table\">Table</a> object to a file. Defaults to a text file with comma-separated-values ('csv') but can also use tab separation ('tsv'), or generate an HTML table ('html'). The file saving process and location of the saved file will vary between web browsers."
      ],
      "params": {
        "Table": "p5.Table: the <a href=\"#/p5.Table\">Table</a> object to save to a file",
        "filename": "String: the filename to which the Table should be saved",
        "options": "String: (Optional) can be one of \"tsv\", \"csv\", or \"html\""
      }
    },
    "abs": {
      "description": [
        "Calculates the absolute value (magnitude) of a number. Maps to Math.abs(). The absolute value of a number is always positive."
      ],
      "returns": "Number: absolute value of given number",
      "params": {
        "n": "Number: number to compute"
      }
    },
    "ceil": {
      "description": [
        "Calculates the closest int value that is greater than or equal to the value of the parameter. Maps to Math.ceil(). For example, ceil(9.03) returns the value 10."
      ],
      "returns": "Integer: rounded up number",
      "params": {
        "n": "Number: number to round up"
      }
    },
    "constrain": {
      "description": [
        "Constrains a value between a minimum and maximum value."
      ],
      "returns": "Number: constrained number",
      "params": {
        "n": "Number: number to constrain",
        "low": "Number: minimum limit",
        "high": "Number: maximum limit"
      }
    },
    "dist": {
      "description": [
        "Calculates the distance between two points, in either two or three dimensions. If you looking for distance between two vectors see <a herf=\"#/p5.Vector/dist\">p5.Vector.dist()</a>"
      ],
      "returns": "Number: distance between the two points",
      "params": {
        "x1": "Number: x-coordinate of the first point",
        "y1": "Number: y-coordinate of the first point",
        "x2": "Number: x-coordinate of the second point",
        "y2": "Number: y-coordinate of the second point",
        "z1": "Number: z-coordinate of the first point",
        "z2": "Number: z-coordinate of the second point"
      }
    },
    "exp": {
      "description": [
        "Returns Euler's number e (2.71828...) raised to the power of the n parameter. Maps to Math.exp()."
      ],
      "returns": "Number: e^n",
      "params": {
        "n": "Number: exponent to raise"
      }
    },
    "floor": {
      "description": [
        "Calculates the closest int value that is less than or equal to the value of the parameter. Maps to Math.floor()."
      ],
      "returns": "Integer: rounded down number",
      "params": {
        "n": "Number: number to round down"
      }
    },
    "lerp": {
      "description": [
        "Calculates a number between two numbers at a specific increment. The amt parameter is the amount to interpolate between the two values where 0.0 is equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, and 1.0 is equal to the second point. If the value of amt is more than 1.0 or less than 0.0, the number will be calculated accordingly in the ratio of the two given numbers. The lerp() function is convenient for creating motion along a straight path and for drawing dotted lines."
      ],
      "returns": "Number: lerped value",
      "params": {
        "start": "Number: first value",
        "stop": "Number: second value",
        "amt": "Number: number"
      }
    },
    "log": {
      "description": [
        "Calculates the natural logarithm (the base-e logarithm) of a number. This function expects the n parameter to be a value greater than 0.0. Maps to Math.log()."
      ],
      "returns": "Number: natural logarithm of n",
      "params": {
        "n": "Number: number greater than 0"
      }
    },
    "mag": {
      "description": [
        "Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \"start\" position, the magnitude of a vector can be thought of as the distance from the coordinate 0,0 to its x,y value. Therefore, <a href=\"#/p5/mag\">mag()</a> is a shortcut for writing dist(0, 0, x, y)."
      ],
      "returns": "Number: magnitude of vector from (0,0) to (a,b)",
      "params": {
        "a": "Number: first value",
        "b": "Number: second value"
      }
    },
    "map": {
      "description": [
        "Re-maps a number from one range to another.",
        "In the first example above, the number 25 is converted from a value in the range of 0 to 100 into a value that ranges from the left edge of the window (0) to the right edge (width)."
      ],
      "returns": "Number: remapped number",
      "params": {
        "value": "Number: the incoming value to be converted",
        "start1": "Number: lower bound of the value's current range",
        "stop1": "Number: upper bound of the value's current range",
        "start2": "Number: lower bound of the value's target range",
        "stop2": "Number: upper bound of the value's target range",
        "withinBounds": "Boolean: (Optional) constrain the value to the newly mapped range"
      }
    },
    "max": {
      "description": [
        "Determines the largest value in a sequence of numbers, and then returns that value. <a href=\"#/p5/max\">max()</a> accepts any number of Number parameters, or an Array of any length."
      ],
      "returns": "Number: maximum Number",
      "params": {
        "n0": "Number: Number to compare",
        "n1": "Number: Number to compare",
        "nums": "Number[]: Numbers to compare"
      }
    },
    "min": {
      "description": [
        "Determines the smallest value in a sequence of numbers, and then returns that value. <a href=\"#/p5/min\">min()</a> accepts any number of Number parameters, or an Array of any length."
      ],
      "returns": "Number: minimum Number",
      "params": {
        "n0": "Number: Number to compare",
        "n1": "Number: Number to compare",
        "nums": "Number[]: Numbers to compare"
      }
    },
    "norm": {
      "description": [
        "Normalizes a number from another range into a value between 0 and 1. Identical to map(value, low, high, 0, 1). Numbers outside of the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful. (See the example above.)"
      ],
      "returns": "Number: normalized number",
      "params": {
        "value": "Number: incoming value to be normalized",
        "start": "Number: lower bound of the value's current range",
        "stop": "Number: upper bound of the value's current range"
      }
    },
    "pow": {
      "description": [
        "Facilitates exponential expressions. The <a href=\"#/p5/pow\">pow()</a> function is an efficient way of multiplying numbers by themselves (or their reciprocals) in large quantities. For example, pow(3, 5) is equivalent to the expression 3 × 3 × 3 × 3 × 3 and pow(3, -5) is equivalent to 1 / 3 × 3 × 3 × 3 × 3. Maps to Math.pow()."
      ],
      "returns": "Number: n^e",
      "params": {
        "n": "Number: base of the exponential expression",
        "e": "Number: power by which to raise the base"
      }
    },
    "round": {
      "description": [
        "Calculates the integer closest to the n parameter. For example, round(133.8) returns the value 134. Maps to Math.round()."
      ],
      "returns": "Integer: rounded number",
      "params": {
        "n": "Number: number to round",
        "decimals": "Number: (Optional) number of decimal places to round to, default is 0"
      }
    },
    "sq": {
      "description": [
        "Squares a number (multiplies a number by itself). The result is always a positive number, as multiplying two negative numbers always yields a positive result. For example, -1 * -1 = 1."
      ],
      "returns": "Number: squared number",
      "params": {
        "n": "Number: number to square"
      }
    },
    "sqrt": {
      "description": [
        "Calculates the square root of a number. The square root of a number is always positive, even though there may be a valid negative root. The square root s of number a is such that s*s = a. It is the opposite of squaring. Maps to Math.sqrt()."
      ],
      "returns": "Number: square root of number",
      "params": {
        "n": "Number: non-negative number to square root"
      }
    },
    "fract": {
      "description": ["Calculates the fractional part of a number."],
      "returns": "Number: fractional part of x, i.e, {x}",
      "params": {
        "num": "Number: Number whose fractional part needs to be found out"
      }
    },
    "createVector": {
      "description": [
        "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a two or three-dimensional vector, specifically a Euclidean (also known as geometric) vector. A vector is an entity that has both magnitude and direction."
      ],
      "returns": "p5.Vector:",
      "params": {
        "x": "Number: (Optional) x component of the vector",
        "y": "Number: (Optional) y component of the vector",
        "z": "Number: (Optional) z component of the vector"
      }
    },
    "noise": {
      "description": [
        "Returns the Perlin noise value at specified coordinates. Perlin noise is a random sequence generator producing a more naturally ordered, harmonic succession of numbers compared to the standard <a href=\"#/p5/random\">random()</a> function. It was invented by Ken Perlin in the 1980s and been used since in graphical applications to produce procedural textures, natural motion, shapes, terrains etc.<br /><br /> The main difference to the <a href=\"#/p5/random\">random()</a> function is that Perlin noise is defined in an infinite n-dimensional space where each pair of coordinates corresponds to a fixed semi-random value (fixed only for the lifespan of the program; see the <a href=\"#/p5/noiseSeed\">noiseSeed()</a> function). p5.js can compute 1D, 2D and 3D noise, depending on the number of coordinates given. The resulting value will always be between 0.0 and 1.0. The noise value can be animated by moving through the noise space as demonstrated in the example above. The 2nd and 3rd dimensions can also be interpreted as time.<br /><br />The actual noise is structured similar to an audio signal, in respect to the function's use of frequencies. Similar to the concept of harmonics in physics, Perlin noise is computed over several octaves which are added together for the final result. <br /><br />Another way to adjust the character of the resulting sequence is the scale of the input coordinates. As the function works within an infinite space the value of the coordinates doesn't matter as such, only the distance between successive coordinates does (eg. when using <a href=\"#/p5/noise\">noise()</a> within a loop). As a general rule the smaller the difference between coordinates, the smoother the resulting noise sequence will be. Steps of 0.005-0.03 work best for most applications, but this will differ depending on use."
      ],
      "returns": "Number: Perlin noise value (between 0 and 1) at specified  coordinates",
      "params": {
        "x": "Number: x-coordinate in noise space",
        "y": "Number: (Optional) y-coordinate in noise space",
        "z": "Number: (Optional) z-coordinate in noise space"
      }
    },
    "noiseDetail": {
      "description": [
        "Adjusts the character and level of detail produced by the Perlin noise  function. Similar to harmonics in physics, noise is computed over  several octaves. Lower octaves contribute more to the output signal and  as such define the overall intensity of the noise, whereas higher octaves  create finer-grained details in the noise sequence. By default, noise is computed over 4 octaves with each octave contributing  exactly half as much as its predecessor, starting at 50% strength for the 1st  octave. This falloff amount can be changed by adding an additional function  parameter. Eg. a falloff factor of 0.75 means each octave will now have  75% impact (25% less) of the previous lower octave. Any value between  0.0 and 1.0 is valid, however, note that values greater than 0.5 might  result in greater than 1.0 values returned by <a href=\"#/p5/noise\">noise()</a>. By changing these parameters, the signal created by the <a href=\"#/p5/noise\">noise()</a>  function can be adapted to fit very specific needs and characteristics."
      ],
      "params": {
        "lod": "Number: number of octaves to be used by the noise",
        "falloff": "Number: falloff factor for each octave"
      }
    },
    "noiseSeed": {
      "description": [
        "Sets the seed value for <a href=\"#/p5/noise\">noise()</a>. By default, <a href=\"#/p5/noise\">noise()</a> produces different results each time the program is run. Set the <code>seed</code> parameter to a constant to return the same pseudo-random numbers each time the software is run."
      ],
      "params": {
        "seed": "Number: the seed value"
      }
    },
    "randomSeed": {
      "description": [
        "Sets the seed value for <a href=\"#/p5/random\">random()</a>.",
        "By default, <a href=\"#/p5/random\">random()</a> produces different results each time the program is run. Set the seed parameter to a constant to return the same pseudo-random numbers each time the software is run."
      ],
      "params": {
        "seed": "Number: the seed value"
      }
    },
    "random": {
      "description": [
        "Return a random floating-point number.",
        "Takes either 0, 1 or 2 arguments.",
        "If no argument is given, returns a random number from 0 up to (but not including) 1.",
        "If one argument is given and it is a number, returns a random number from 0 up to (but not including) the number.",
        "If one argument is given and it is an array, returns a random element from that array.",
        "If two arguments are given, returns a random number from the first argument up to (but not including) the second argument."
      ],
      "returns": "Number: the random number",
      "params": {
        "min": "Number: (Optional) the lower bound (inclusive)",
        "max": "Number: (Optional) the upper bound (exclusive)",
        "choices": "Array: the array to choose from"
      }
    },
    "randomGaussian": {
      "description": [
        "Returns a random number fitting a Gaussian, or  normal, distribution. There is theoretically no minimum or maximum  value that <a href=\"#/p5/randomGaussian\">randomGaussian()</a> might return. Rather, there is  just a very low probability that values far from the mean will be  returned; and a higher probability that numbers near the mean will  be returned. Takes either 0, 1 or 2 arguments.  If no args, the mean is 0 and the standard deviation is 1.  If one arg, that arg is the mean and the standard deviation is 1.  If two args, the first arg is the mean and the second is the standard deviation."
      ],
      "returns": "Number: the random number",
      "params": {
        "mean": "Number: (Optional) the mean",
        "sd": "Number: (Optional) the standard deviation"
      }
    },
    "acos": {
      "description": [
        "The inverse of <a href=\"#/p5/cos\">cos()</a>, returns the arc cosine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range 0 to PI (3.1415927) if the <a href=\"#/p5/angleMode\">angleMode()</a> is RADIANS or 0 to 180 if the <a href=\"#/p5/angleMode\">angleMode()</a> is DEGREES."
      ],
      "returns": "Number: the arc cosine of the given value",
      "params": {
        "value": "Number: the value whose arc cosine is to be returned"
      }
    },
    "asin": {
      "description": [
        "The inverse of <a href=\"#/p5/sin\">sin()</a>, returns the arc sine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range -PI/2 to PI/2 if the angleMode is RADIANS or -90 to 90 if the angle mode is DEGREES."
      ],
      "returns": "Number: the arc sine of the given value",
      "params": {
        "value": "Number: the value whose arc sine is to be returned"
      }
    },
    "atan": {
      "description": [
        "The inverse of <a href=\"#/p5/tan\">tan()</a>, returns the arc tangent of a value. This function expects the values in the range of -Infinity to Infinity (exclusive) and values are returned in the range -PI/2 to PI/2 if the angleMode is RADIANS or -90 to 90 if the angle mode is DEGREES."
      ],
      "returns": "Number: the arc tangent of the given value",
      "params": {
        "value": "Number: the value whose arc tangent is to be returned"
      }
    },
    "atan2": {
      "description": [
        "Calculates the angle (in radians) from a specified point to the coordinate origin as measured from the positive x-axis. Values are returned as a float in the range from PI to -PI if the <a href=\"#/p5/angleMode\">angleMode()</a> is RADIANS or 180 to -180 if the <a href=\"#/p5/angleMode\">angleMode()</a> is DEGREES. The <a href=\"#/p5/\">atan2()</a> function is most often used for orienting geometry to the position of the cursor.",
        "Note: The y-coordinate of the point is the first parameter, and the x-coordinate is the second parameter, due to the structure of calculating the tangent."
      ],
      "returns": "Number: the arc tangent of the given point",
      "params": {
        "y": "Number: y-coordinate of the point",
        "x": "Number: x-coordinate of the point"
      }
    },
    "cos": {
      "description": [
        "Calculates the cosine of an angle. This function takes into account the current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1."
      ],
      "returns": "Number: the cosine of the angle",
      "params": {
        "angle": "Number: the angle"
      }
    },
    "sin": {
      "description": [
        "Calculates the sine of an angle. This function takes into account the current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1."
      ],
      "returns": "Number: the sine of the angle",
      "params": {
        "angle": "Number: the angle"
      }
    },
    "tan": {
      "description": [
        "Calculates the tangent of an angle. This function takes into account the current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range of all real numbers."
      ],
      "returns": "Number: the tangent of the angle",
      "params": {
        "angle": "Number: the angle"
      }
    },
    "degrees": {
      "description": [
        "Converts a radian measurement to its corresponding value in degrees. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 = 1.5707964. This function does not take into account the current <a href=\"#/p5/angleMode\">angleMode()</a>."
      ],
      "returns": "Number: the converted angle",
      "params": {
        "radians": "Number: the radians value to convert to degrees"
      }
    },
    "radians": {
      "description": [
        "Converts a degree measurement to its corresponding value in radians. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 = 1.5707964. This function does not take into account the current <a href=\"#/p5/angleMode\">angleMode</a>."
      ],
      "returns": "Number: the converted angle",
      "params": {
        "degrees": "Number: the degree value to convert to radians"
      }
    },
    "angleMode": {
      "description": [
        "Sets the current mode of p5 to the given mode. Default mode is RADIANS.",
        "Calling <a href=\"#/p5/angleMode\">angleMode()</a> with no arguments returns current anglemode."
      ],
      "params": {
        "mode": "Constant: either RADIANS or DEGREES"
      }
    },
    "textAlign": {
      "description": [
        "Sets the current alignment for drawing text. Accepts two arguments: horizAlign (LEFT, CENTER, or RIGHT) and vertAlign (TOP, BOTTOM, CENTER, or BASELINE).",
        "The horizAlign parameter is in reference to the x value of the <a href=\"#/p5/text\">text()</a> function, while the vertAlign parameter is in reference to the y value.",
        "So if you write textAlign(LEFT), you are aligning the left edge of your text to the x value you give in <a href=\"#/p5/text\">text()</a>. If you write textAlign(RIGHT, TOP), you are aligning the right edge of your text to the x value and the top edge of the text to the y value."
      ],
      "params": {
        "horizAlign": "Constant: horizontal alignment, either LEFT,  CENTER, or RIGHT",
        "vertAlign": "Constant: (Optional) vertical alignment, either TOP,  BOTTOM, CENTER, or BASELINE"
      }
    },
    "textLeading": {
      "description": [
        "Sets/gets the spacing, in pixels, between lines of text. This setting will be used in all subsequent calls to the <a href=\"#/p5/text\">text()</a> function."
      ],
      "params": {
        "leading": "Number: the size in pixels for spacing between lines"
      }
    },
    "textSize": {
      "description": [
        "Sets/gets the current font size. This size will be used in all subsequent calls to the <a href=\"#/p5/text\">text()</a> function. Font size is measured in pixels."
      ],
      "params": {
        "theSize": "Number: the size of the letters in units of pixels"
      }
    },
    "textStyle": {
      "description": [
        "Sets/gets the style of the text for system fonts to NORMAL, ITALIC, BOLD or BOLDITALIC. Note: this may be is overridden by CSS styling. For non-system fonts (opentype, truetype, etc.) please load styled fonts instead."
      ],
      "params": {
        "theStyle": "Constant: styling for text, either NORMAL,  ITALIC, BOLD or BOLDITALIC"
      }
    },
    "textWidth": {
      "description": [
        "Calculates and returns the width of any character or text string."
      ],
      "returns": "Number: the calculated width",
      "params": {
        "theText": "String: the String of characters to measure"
      }
    },
    "textAscent": {
      "description": [
        "Returns the ascent of the current font at its current size. The ascent represents the distance, in pixels, of the tallest character above the baseline."
      ],
      "returns": "Number:"
    },
    "textDescent": {
      "description": [
        "Returns the descent of the current font at its current size. The descent represents the distance, in pixels, of the character with the longest descender below the baseline."
      ],
      "returns": "Number:"
    },
    "textWrap": {
      "description": [
        "Specifies how lines of text are wrapped within a text box. This requires a max-width set on the text area, specified in <a href=\"#/p5/text\">text()</a> as parameter <code>x2</code>.",
        "WORD wrap style only breaks lines at spaces. A single string without spaces that exceeds the boundaries of the canvas or text area is not truncated, and will overflow the desired area, disappearing at the canvas edge.",
        "CHAR wrap style breaks lines wherever needed to stay within the text box.",
        "WORD is the default wrap style, and both styles will still break lines at any line breaks (<code>\\n</code>) specified in the original text. The text area max-height parameter (<code>y2</code>) also still applies to wrapped text in both styles, lines of text that do not fit within the text area will not be drawn to the screen."
      ],
      "returns": "String: wrapStyle",
      "params": {
        "wrapStyle": "Constant: text wrapping style, either WORD or CHAR"
      }
    },
    "loadFont": {
      "description": [
        "Loads an opentype font file (.otf, .ttf) from a file or a URL, and returns a <a href=\"#/p5.Font\">p5.Font</a> object. This function is asynchronous, meaning it may not finish before the next line in your sketch is executed.",
        "The path to the font should be relative to the HTML file that links in your sketch. Loading fonts from a URL or other remote location may be blocked due to your browser's built-in security."
      ],
      "returns": "p5.Font: <a href=\"#/p5.Font\">p5.Font</a> object",
      "params": {
        "path": "String: name of the file or url to load",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/loadFont\">loadFont()</a> completes",
        "onError": "Function: (Optional) function to be executed if  an error occurs"
      }
    },
    "text": {
      "description": [
        "Draws text to the screen. Displays the information specified in the first parameter on the screen in the position specified by the additional parameters. A default font will be used unless a font is set with the <a href=\"#/p5/textFont\">textFont()</a> function and a default size will be used unless a font is set with <a href=\"#/p5/textSize\">textSize()</a>. Change the color of the text with the <a href=\"#/p5/fill\">fill()</a> function. Change the outline of the text with the <a href=\"#/p5/stroke\">stroke()</a> and <a href=\"#/p5/strokeWeight\">strokeWeight()</a> functions.",
        "The text displays in relation to the <a href=\"#/p5/textAlign\">textAlign()</a> function, which gives the option to draw to the left, right, and center of the coordinates.",
        "The x2 and y2 parameters define a rectangular area to display within and may only be used with string data. When these parameters are specified, they are interpreted based on the current <a href=\"#/p5/rectMode\">rectMode()</a> setting. Text that does not fit completely within the rectangle specified will not be drawn to the screen. If x2 and y2 are not specified, the baseline alignment is the default, which means that the text will be drawn upwards from x and y.",
        "<b>WEBGL</b>: Only opentype/truetype fonts are supported. You must load a font using the <a href=\"#/p5/loadFont\">loadFont()</a> method (see the example above). <a href=\"#/p5/stroke\">stroke()</a> currently has no effect in webgl mode. Learn more about working with text in webgl mode on the <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5#text\">wiki</a>."
      ],
      "params": {
        "str": "String|Object|Array|Number|Boolean: the alphanumeric  symbols to be displayed",
        "x": "Number: x-coordinate of text",
        "y": "Number: y-coordinate of text",
        "x2": "Number: (Optional) by default, the width of the text box,  see <a href=\"#/p5/rectMode\">rectMode()</a> for more info",
        "y2": "Number: (Optional) by default, the height of the text box,  see <a href=\"#/p5/rectMode\">rectMode()</a> for more info"
      }
    },
    "textFont": {
      "description": [
        "Sets the current font that will be drawn with the <a href=\"#/p5/text\">text()</a> function. If textFont() is called without any argument, it will return the current font if one has been set already. If not, it will return the name of the default font as a string. If textFont() is called with a font to use, it will return the p5 object.",
        "<b>WEBGL</b>: Only fonts loaded via <a href=\"#/p5/loadFont\">loadFont()</a> are supported."
      ],
      "returns": "Object: the current font / p5 Object",
      "params": {
        "font": "Object|String: a font loaded via <a href=\"#/p5/loadFont\">loadFont()</a>, or a String representing a <a href=\"https://mzl.la/2dOw8WD\">web safe font</a> (a font that is generally available across all systems)",
        "size": "Number: (Optional) the font size to use"
      }
    },
    "append": {
      "description": [
        "Adds a value to the end of an array. Extends the length of the array by one. Maps to Array.push()."
      ],
      "returns": "Array: the array that was appended to",
      "params": {
        "array": "Array: Array to append",
        "value": "Any: to be added to the Array"
      }
    },
    "arrayCopy": {
      "description": [
        "Copies an array (or part of an array) to another array. The src array is copied to the dst array, beginning at the position specified by srcPosition and into the position specified by dstPosition. The number of elements to copy is determined by length. Note that copying values overwrites existing values in the destination array. To append values instead of overwriting them, use <a href=\"#/p5/concat\">concat()</a>.",
        "The simplified version with only two arguments, arrayCopy(src, dst), copies an entire array to another of the same size. It is equivalent to arrayCopy(src, 0, dst, 0, src.length).",
        "Using this function is far more efficient for copying array data than iterating through a for() loop and copying each element individually."
      ],
      "params": {
        "src": "Array: the source Array",
        "srcPosition": "Integer: starting position in the source Array",
        "dst": "Array: the destination Array",
        "dstPosition": "Integer: starting position in the destination Array",
        "length": "Integer: number of Array elements to be copied"
      }
    },
    "concat": {
      "description": [
        "Concatenates two arrays, maps to Array.concat(). Does not modify the input arrays."
      ],
      "returns": "Array: concatenated array",
      "params": {
        "a": "Array: first Array to concatenate",
        "b": "Array: second Array to concatenate"
      }
    },
    "reverse": {
      "description": [
        "Reverses the order of an array, maps to Array.reverse()"
      ],
      "returns": "Array: the reversed list",
      "params": {
        "list": "Array: Array to reverse"
      }
    },
    "shorten": {
      "description": [
        "Decreases an array by one element and returns the shortened array, maps to Array.pop()."
      ],
      "returns": "Array: shortened Array",
      "params": {
        "list": "Array: Array to shorten"
      }
    },
    "shuffle": {
      "description": [
        "Randomizes the order of the elements of an array. Implements <a href='http://Bost.Ocks.org/mike/shuffle/' target=_blank> Fisher-Yates Shuffle Algorithm</a>."
      ],
      "returns": "Array: shuffled Array",
      "params": {
        "array": "Array: Array to shuffle",
        "bool": "Boolean: (Optional) modify passed array"
      }
    },
    "sort": {
      "description": [
        "Sorts an array of numbers from smallest to largest, or puts an array of words in alphabetical order. The original array is not modified; a re-ordered array is returned. The count parameter states the number of elements to sort. For example, if there are 12 elements in an array and count is set to 5, only the first 5 elements in the array will be sorted."
      ],
      "returns": "Array: the sorted list",
      "params": {
        "list": "Array: Array to sort",
        "count": "Integer: (Optional) number of elements to sort, starting from 0"
      }
    },
    "splice": {
      "description": [
        "Inserts a value or an array of values into an existing array. The first parameter specifies the initial array to be modified, and the second parameter defines the data to be inserted. The third parameter is an index value which specifies the array position from which to insert data. (Remember that array index numbering starts at zero, so the first position is 0, the second position is 1, and so on.)"
      ],
      "returns": "Array: the list",
      "params": {
        "list": "Array: Array to splice into",
        "value": "Any: value to be spliced in",
        "position": "Integer: in the array from which to insert data"
      }
    },
    "subset": {
      "description": [
        "Extracts an array of elements from an existing array. The list parameter defines the array from which the elements will be copied, and the start and count parameters specify which elements to extract. If no count is given, elements will be extracted from the start to the end of the array. When specifying the start, remember that the first array element is 0. This function does not change the source array."
      ],
      "returns": "Array: Array of extracted elements",
      "params": {
        "list": "Array: Array to extract from",
        "start": "Integer: position to begin",
        "count": "Integer: (Optional) number of values to extract"
      }
    },
    "float": {
      "description": [
        "Converts a string to its floating point representation. The contents of a string must resemble a number, or NaN (not a number) will be returned. For example, float(\"1234.56\") evaluates to 1234.56, but float(\"giraffe\") will return NaN.",
        "When an array of values is passed in, then an array of floats of the same length is returned."
      ],
      "returns": "Number: floating point representation of string",
      "params": {
        "str": "String: float string to parse"
      }
    },
    "int": {
      "description": [
        "Converts a boolean, string, or float to its integer representation. When an array of values is passed in, then an int array of the same length is returned."
      ],
      "returns": "Number: integer representation of value",
      "params": {
        "n": "String|Boolean|Number: value to parse",
        "radix": "Integer: (Optional) the radix to convert to (default: 10)",
        "ns": "Array: values to parse"
      }
    },
    "str": {
      "description": [
        "Converts a boolean, string or number to its string representation. When an array of values is passed in, then an array of strings of the same length is returned."
      ],
      "returns": "String: string representation of value",
      "params": {
        "n": "String|Boolean|Number|Array: value to parse"
      }
    },
    "byte": {
      "description": [
        "Converts a number, string representation of a number, or boolean to its byte representation. A byte can be only a whole number between -128 and 127, so when a value outside of this range is converted, it wraps around to the corresponding byte representation. When an array of number, string or boolean values is passed in, then an array of bytes the same length is returned."
      ],
      "returns": "Number: byte representation of value",
      "params": {
        "n": "String|Boolean|Number: value to parse",
        "ns": "Array: values to parse"
      }
    },
    "char": {
      "description": [
        "Converts a number or string to its corresponding single-character string representation. If a string parameter is provided, it is first parsed as an integer and then translated into a single-character string. When an array of number or string values is passed in, then an array of single-character strings of the same length is returned."
      ],
      "returns": "String: string representation of value",
      "params": {
        "n": "String|Number: value to parse",
        "ns": "Array: values to parse"
      }
    },
    "unchar": {
      "description": [
        "Converts a single-character string to its corresponding integer representation. When an array of single-character string values is passed in, then an array of integers of the same length is returned."
      ],
      "returns": "Number: integer representation of value",
      "params": {
        "n": "String: value to parse",
        "ns": "Array: values to parse"
      }
    },
    "hex": {
      "description": [
        "Converts a number to a string in its equivalent hexadecimal notation. If a second parameter is passed, it is used to set the number of characters to generate in the hexadecimal notation. When an array is passed in, an array of strings in hexadecimal notation of the same length is returned."
      ],
      "returns": "String: hexadecimal string representation of value",
      "params": {
        "n": "Number: value to parse",
        "digits": "Number (Optional)",
        "ns": "Number[]: array of values to parse"
      }
    },
    "unhex": {
      "description": [
        "Converts a string representation of a hexadecimal number to its equivalent integer value. When an array of strings in hexadecimal notation is passed in, an array of integers of the same length is returned."
      ],
      "returns": "Number: integer representation of hexadecimal value",
      "params": {
        "n": "String: value to parse",
        "ns": "Array: values to parse"
      }
    },
    "join": {
      "description": [
        "Combines an array of Strings into one String, each separated by the character(s) used for the separator parameter. To join arrays of ints or floats, it's necessary to first convert them to Strings using <a href=\"#/p5/nf\">nf()</a> or nfs()."
      ],
      "returns": "String: joined String",
      "params": {
        "list": "Array: array of Strings to be joined",
        "separator": "String: String to be placed between each item"
      }
    },
    "match": {
      "description": [
        "This function is used to apply a regular expression to a piece of text, and return matching groups (elements found inside parentheses) as a String array. If there are no matches, a null value will be returned. If no groups are specified in the regular expression, but the sequence matches, an array of length 1 (with the matched text as the first element of the array) will be returned.",
        "To use the function, first check to see if the result is null. If the result is null, then the sequence did not match at all. If the sequence did match, an array is returned.",
        "If there are groups (specified by sets of parentheses) in the regular expression, then the contents of each will be returned in the array. Element [0] of a regular expression match returns the entire matching string, and the match groups start at element [1] (the first group is [1], the second [2], and so on)."
      ],
      "returns": "String[]: Array of Strings found",
      "params": {
        "str": "String: the String to be searched",
        "regexp": "String: the regexp to be used for matching"
      }
    },
    "matchAll": {
      "description": [
        "This function is used to apply a regular expression to a piece of text, and return a list of matching groups (elements found inside parentheses) as a two-dimensional String array. If there are no matches, a null value will be returned. If no groups are specified in the regular expression, but the sequence matches, a two dimensional array is still returned, but the second dimension is only of length one.",
        "To use the function, first check to see if the result is null. If the result is null, then the sequence did not match at all. If the sequence did match, a 2D array is returned.",
        "If there are groups (specified by sets of parentheses) in the regular expression, then the contents of each will be returned in the array. Assuming a loop with counter variable i, element [i][0] of a regular expression match returns the entire matching string, and the match groups start at element [i][1] (the first group is [i][1], the second [i][2], and so on)."
      ],
      "returns": "String[]: 2d Array of Strings found",
      "params": {
        "str": "String: the String to be searched",
        "regexp": "String: the regexp to be used for matching"
      }
    },
    "nf": {
      "description": [
        "Utility function for formatting numbers into strings. There are two versions: one for formatting floats, and one for formatting ints.",
        "The values for the digits, left, and right parameters should always be positive integers.",
        "(NOTE): Be cautious when using left and right parameters as it prepends numbers of 0's if the parameter if greater than the current length of the number.",
        "For example if number is 123.2 and left parameter passed is 4 which is greater than length of 123 (integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than the result will be 123.200."
      ],
      "returns": "String: formatted String",
      "params": {
        "num": "Number|String: the Number to format",
        "left": "Integer|String: (Optional) number of digits to the left of the  decimal point",
        "right": "Integer|String: (Optional) number of digits to the right of the  decimal point",
        "nums": "Array: the Numbers to format"
      }
    },
    "nfc": {
      "description": [
        "Utility function for formatting numbers into strings and placing appropriate commas to mark units of 1000. There are two versions: one for formatting ints, and one for formatting an array of ints. The value for the right parameter should always be a positive integer."
      ],
      "returns": "String: formatted String",
      "params": {
        "num": "Number|String: the Number to format",
        "right": "Integer|String: (Optional) number of digits to the right of the  decimal point",
        "nums": "Array: the Numbers to format"
      }
    },
    "nfp": {
      "description": [
        "Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but puts a \"+\" in front of positive numbers and a \"-\" in front of negative numbers. There are two versions: one for formatting floats, and one for formatting ints. The values for left, and right parameters should always be positive integers."
      ],
      "returns": "String: formatted String",
      "params": {
        "num": "Number: the Number to format",
        "left": "Integer: (Optional) number of digits to the left of the decimal  point",
        "right": "Integer: (Optional) number of digits to the right of the  decimal point",
        "nums": "Number[]: the Numbers to format"
      }
    },
    "nfs": {
      "description": [
        "Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but puts an additional \"_\" (space) in front of positive numbers just in case to align it with negative numbers which includes \"-\" (minus) sign.",
        "The main usecase of nfs() can be seen when one wants to align the digits (place values) of a non-negative number with some negative number (See the example to get a clear picture). There are two versions: one for formatting float, and one for formatting int.",
        "The values for the digits, left, and right parameters should always be positive integers.",
        "(IMP): The result on the canvas basically the expected alignment can vary based on the typeface you are using.",
        "(NOTE): Be cautious when using left and right parameters as it prepends numbers of 0's if the parameter if greater than the current length of the number.",
        "For example if number is 123.2 and left parameter passed is 4 which is greater than length of 123 (integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than the result will be 123.200."
      ],
      "returns": "String: formatted String",
      "params": {
        "num": "Number: the Number to format",
        "left": "Integer: (Optional) number of digits to the left of the decimal  point",
        "right": "Integer: (Optional) number of digits to the right of the  decimal point",
        "nums": "Array: the Numbers to format"
      }
    },
    "split": {
      "description": [
        "The <a href=\"#/p5/split\">split()</a> function maps to String.split(), it breaks a String into pieces using a character or string as the delimiter. The delim parameter specifies the character or characters that mark the boundaries between each piece. A String[] array is returned that contains each of the pieces.",
        "The <a href=\"#/p5/splitTokens\">splitTokens()</a> function works in a similar fashion, except that it splits using a range of characters instead of a specific character or sequence."
      ],
      "returns": "String[]: Array of Strings",
      "params": {
        "value": "String: the String to be split",
        "delim": "String: the String used to separate the data"
      }
    },
    "splitTokens": {
      "description": [
        "The <a href=\"#/p5/splitTokens\">splitTokens()</a> function splits a String at one or many character delimiters or \"tokens.\" The delim parameter specifies the character or characters to be used as a boundary.",
        "If no delim characters are specified, any whitespace character is used to split. Whitespace characters include tab (\\t), line feed (\\n), carriage return (\\r), form feed (\\f), and space."
      ],
      "returns": "String[]: Array of Strings",
      "params": {
        "value": "String: the String to be split",
        "delim": "String: (Optional) list of individual Strings that will be used as  separators"
      }
    },
    "trim": {
      "description": [
        "Removes whitespace characters from the beginning and end of a String. In addition to standard whitespace characters such as space, carriage return, and tab, this function also removes the Unicode \"nbsp\" character."
      ],
      "returns": "String: a trimmed String",
      "params": {
        "str": "String: a String to be trimmed",
        "strs": "Array: an Array of Strings to be trimmed"
      }
    },
    "day": {
      "description": [
        "p5.js communicates with the clock on your computer. The <a href=\"#/p5/day\">day()</a> function returns the current day as a value from 1 - 31."
      ],
      "returns": "Integer: the current day"
    },
    "hour": {
      "description": [
        "p5.js communicates with the clock on your computer. The <a href=\"#/p5/hour\">hour()</a> function returns the current hour as a value from 0 - 23."
      ],
      "returns": "Integer: the current hour"
    },
    "minute": {
      "description": [
        "p5.js communicates with the clock on your computer. The <a href=\"#/p5/minute\">minute()</a> function returns the current minute as a value from 0 - 59."
      ],
      "returns": "Integer: the current minute"
    },
    "millis": {
      "description": [
        "Returns the number of milliseconds (thousandths of a second) since starting the sketch (when <code>setup()</code> is called). This information is often used for timing events and animation sequences."
      ],
      "returns": "Number: the number of milliseconds since starting the sketch"
    },
    "month": {
      "description": [
        "p5.js communicates with the clock on your computer. The <a href=\"#/p5/month\">month()</a> function returns the current month as a value from 1 - 12."
      ],
      "returns": "Integer: the current month"
    },
    "second": {
      "description": [
        "p5.js communicates with the clock on your computer. The <a href=\"#/p5/second\">second()</a> function returns the current second as a value from 0 - 59."
      ],
      "returns": "Integer: the current second"
    },
    "year": {
      "description": [
        "p5.js communicates with the clock on your computer. The <a href=\"#/p5/year\">year()</a> function returns the current year as an integer (2014, 2015, 2016, etc)."
      ],
      "returns": "Integer: the current year"
    },
    "plane": {
      "description": ["Draw a plane with given a width and height"],
      "params": {
        "width": "Number: (Optional) width of the plane",
        "height": "Number: (Optional) height of the plane",
        "detailX": "Integer: (Optional) Optional number of triangle  subdivisions in x-dimension",
        "detailY": "Integer: (Optional) Optional number of triangle  subdivisions in y-dimension"
      }
    },
    "box": {
      "description": ["Draw a box with given width, height and depth"],
      "params": {
        "width": "Number: (Optional) width of the box",
        "height": "Number: (Optional) height of the box",
        "depth": "Number: (Optional) depth of the box",
        "detailX": "Integer: (Optional) Optional number of triangle  subdivisions in x-dimension",
        "detailY": "Integer: (Optional) Optional number of triangle  subdivisions in y-dimension"
      }
    },
    "sphere": {
      "description": [
        "Draw a sphere with given radius.",
        "DetailX and detailY determines the number of subdivisions in the x-dimension and the y-dimension of a sphere. More subdivisions make the sphere seem smoother. The recommended maximum values are both 24. Using a value greater than 24 may cause a warning or slow down the browser."
      ],
      "params": {
        "radius": "Number: (Optional) radius of circle",
        "detailX": "Integer: (Optional) optional number of subdivisions in x-dimension",
        "detailY": "Integer: (Optional) optional number of subdivisions in y-dimension"
      }
    },
    "cylinder": {
      "description": [
        "Draw a cylinder with given radius and height",
        "DetailX and detailY determines the number of subdivisions in the x-dimension and the y-dimension of a cylinder. More subdivisions make the cylinder seem smoother. The recommended maximum value for detailX is 24. Using a value greater than 24 may cause a warning or slow down the browser."
      ],
      "params": {
        "radius": "Number: (Optional) radius of the surface",
        "height": "Number: (Optional) height of the cylinder",
        "detailX": "Integer: (Optional) number of subdivisions in x-dimension;  default is 24",
        "detailY": "Integer: (Optional) number of subdivisions in y-dimension;  default is 1",
        "bottomCap": "Boolean: (Optional) whether to draw the bottom of the cylinder",
        "topCap": "Boolean: (Optional) whether to draw the top of the cylinder"
      }
    },
    "cone": {
      "description": [
        "Draw a cone with given radius and height",
        "DetailX and detailY determine the number of subdivisions in the x-dimension and the y-dimension of a cone. More subdivisions make the cone seem smoother. The recommended maximum value for detailX is 24. Using a value greater than 24 may cause a warning or slow down the browser."
      ],
      "params": {
        "radius": "Number: (Optional) radius of the bottom surface",
        "height": "Number: (Optional) height of the cone",
        "detailX": "Integer: (Optional) number of segments,  the more segments the smoother geometry  default is 24",
        "detailY": "Integer: (Optional) number of segments,  the more segments the smoother geometry  default is 1",
        "cap": "Boolean: (Optional) whether to draw the base of the cone"
      }
    },
    "ellipsoid": {
      "description": [
        "Draw an ellipsoid with given radius",
        "DetailX and detailY determine the number of subdivisions in the x-dimension and the y-dimension of a cone. More subdivisions make the ellipsoid appear to be smoother. Avoid detail number above 150, it may crash the browser."
      ],
      "params": {
        "radiusx": "Number: (Optional) x-radius of ellipsoid",
        "radiusy": "Number: (Optional) y-radius of ellipsoid",
        "radiusz": "Number: (Optional) z-radius of ellipsoid",
        "detailX": "Integer: (Optional) number of segments,  the more segments the smoother geometry  default is 24. Avoid detail number above  150, it may crash the browser.",
        "detailY": "Integer: (Optional) number of segments,  the more segments the smoother geometry  default is 16. Avoid detail number above  150, it may crash the browser."
      }
    },
    "torus": {
      "description": [
        "Draw a torus with given radius and tube radius",
        "DetailX and detailY determine the number of subdivisions in the x-dimension and the y-dimension of a torus. More subdivisions make the torus appear to be smoother. The default and maximum values for detailX and detailY are 24 and 16, respectively. Setting them to relatively small values like 4 and 6 allows you to create new shapes other than a torus."
      ],
      "params": {
        "radius": "Number: (Optional) radius of the whole ring",
        "tubeRadius": "Number: (Optional) radius of the tube",
        "detailX": "Integer: (Optional) number of segments in x-dimension,  the more segments the smoother geometry  default is 24",
        "detailY": "Integer: (Optional) number of segments in y-dimension,  the more segments the smoother geometry  default is 16"
      }
    },
    "orbitControl": {
      "description": [
        "Allows movement around a 3D sketch using a mouse or trackpad. Left-clicking and dragging will rotate the camera position about the center of the sketch, right-clicking and dragging will pan the camera position without rotation, and using the mouse wheel (scrolling) will move the camera closer or further from the center of the sketch. This function can be called with parameters dictating sensitivity to mouse movement along the X and Y axes. Calling this function without parameters is equivalent to calling orbitControl(1,1). To reverse direction of movement in either axis, enter a negative number for sensitivity."
      ],
      "params": {
        "sensitivityX": "Number: (Optional) sensitivity to mouse movement along X axis",
        "sensitivityY": "Number: (Optional) sensitivity to mouse movement along Y axis",
        "sensitivityZ": "Number: (Optional) sensitivity to scroll movement along Z axis"
      }
    },
    "debugMode": {
      "description": [
        "debugMode() helps visualize 3D space by adding a grid to indicate where the ‘ground’ is in a sketch and an axes icon which indicates the +X, +Y, and +Z directions. This function can be called without parameters to create a default grid and axes icon, or it can be called according to the examples above to customize the size and position of the grid and/or axes icon. The grid is drawn using the most recently set stroke color and weight. To specify these parameters, add a call to stroke() and strokeWeight() just before the end of the draw() loop.",
        "By default, the grid will run through the origin (0,0,0) of the sketch along the XZ plane and the axes icon will be offset from the origin. Both the grid and axes icon will be sized according to the current canvas size. Note that because the grid runs parallel to the default camera view, it is often helpful to use debugMode along with orbitControl to allow full view of the grid."
      ],
      "params": {
        "mode": "Constant: either GRID or AXES",
        "gridSize": "Number: (Optional) size of one side of the grid",
        "gridDivisions": "Number: (Optional) number of divisions in the grid",
        "xOff": "Number: (Optional) X axis offset from origin (0,0,0)",
        "yOff": "Number: (Optional) Y axis offset from origin (0,0,0)",
        "zOff": "Number: (Optional) Z axis offset from origin (0,0,0)",
        "axesSize": "Number: (Optional) size of axes icon",
        "gridXOff": "Number (Optional)",
        "gridYOff": "Number (Optional)",
        "gridZOff": "Number (Optional)",
        "axesXOff": "Number (Optional)",
        "axesYOff": "Number (Optional)",
        "axesZOff": "Number (Optional)"
      }
    },
    "noDebugMode": {
      "description": ["Turns off debugMode() in a 3D sketch."]
    },
    "ambientLight": {
      "description": [
        "Creates an ambient light with the given color.",
        "Ambient light does not come from a specific direction. Objects are evenly lit from all sides. Ambient lights are almost always used in combination with other types of lights.",
        "Note: lights need to be called (whether directly or indirectly) within draw() to remain persistent in a looping program. Placing them in setup() will cause them to only have an effect the first time through the loop."
      ],
      "params": {
        "v1": "Number: red or hue value relative to  the current color range",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "alpha": "Number: (Optional) alpha value relative to current  color range (default is 0-255)",
        "gray": "Number: number specifying value between  white and black",
        "value": "String: a color string",
        "values": "Number[]: an array containing the red,green,blue &  and alpha components of the color",
        "color": "p5.Color: color as a <a href=\"#/p5.Color\">p5.Color</a>"
      }
    },
    "specularColor": {
      "description": [
        "Sets the color of the specular highlight of a non-ambient light (i.e. all lights except <a href=\"#/p5/ambientLight\">ambientLight()</a>).",
        "specularColor() affects only the lights which are created after it in the code.",
        "This function is used in combination with <a href=\"#/p5/specularMaterial\">specularMaterial()</a>. If a geometry does not use specularMaterial(), this function will have no effect.",
        "The default color is white (255, 255, 255), which is used if specularColor() is not explicitly called.",
        "Note: specularColor is equivalent to the Processing function <a href=\"https://processing.org/reference/lightSpecular_.html\">lightSpecular</a>."
      ],
      "params": {
        "v1": "Number: red or hue value relative to  the current color range",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "gray": "Number: number specifying value between  white and black",
        "value": "String: color as a CSS string",
        "values": "Number[]: color as an array containing the  red, green, and blue components",
        "color": "p5.Color: color as a <a href=\"#/p5.Color\">p5.Color</a>"
      }
    },
    "directionalLight": {
      "description": [
        "Creates a directional light with the given color and direction.",
        "Directional light comes from one direction. The direction is specified as numbers inclusively between -1 and 1. For example, setting the direction as (0, -1, 0) will cause the geometry to be lit from below (since the light will be facing directly upwards). Similarly, setting the direction as (1, 0, 0) will cause the geometry to be lit from the left (since the light will be facing directly rightwards).",
        "Directional lights do not have a specific point of origin, and therefore cannot be positioned closer or farther away from a geometry.",
        "A maximum of <strong>5</strong> directional lights can be active at once.",
        "Note: lights need to be called (whether directly or indirectly) within draw() to remain persistent in a looping program. Placing them in setup() will cause them to only have an effect the first time through the loop."
      ],
      "params": {
        "v1": "Number: red or hue value relative to the current  color range",
        "v2": "Number: green or saturation value relative to the  current color range",
        "v3": "Number: blue or brightness value relative to the  current color range",
        "x": "Number: x component of direction (inclusive range of -1 to 1)",
        "y": "Number: y component of direction (inclusive range of -1 to 1)",
        "z": "Number: z component of direction (inclusive range of -1 to 1)",
        "direction": "p5.Vector: direction of light as a  <a href=\"#/p5.Vector\">p5.Vector</a>",
        "color": "p5.Color|Number[]|String: color as a <a href=\"#/p5.Color\">p5.Color</a>,  as an array, or as a CSS string"
      }
    },
    "pointLight": {
      "description": [
        "Creates a point light with the given color and position.",
        "A point light emits light from a single point in all directions. Because the light is emitted from a specific point (position), it has a different effect when it is positioned farther vs. nearer an object.",
        "A maximum of <strong>5</strong> point lights can be active at once.",
        "Note: lights need to be called (whether directly or indirectly) within draw() to remain persistent in a looping program. Placing them in setup() will cause them to only have an effect the first time through the loop."
      ],
      "params": {
        "v1": "Number: red or hue value relative to the current  color range",
        "v2": "Number: green or saturation value relative to the  current color range",
        "v3": "Number: blue or brightness value relative to the  current color range",
        "x": "Number: x component of position",
        "y": "Number: y component of position",
        "z": "Number: z component of position",
        "position": "p5.Vector: of light as a <a href=\"#/p5.Vector\">p5.Vector</a>",
        "color": "p5.Color|Number[]|String: color as a <a href=\"#/p5.Color\">p5.Color</a>,  as an array, or as a CSS string"
      }
    },
    "lights": {
      "description": [
        "Places an ambient and directional light in the scene. The lights are set to ambientLight(128, 128, 128) and directionalLight(128, 128, 128, 0, 0, -1).",
        "Note: lights need to be called (whether directly or indirectly) within draw() to remain persistent in a looping program. Placing them in setup() will cause them to only have an effect the first time through the loop."
      ]
    },
    "lightFalloff": {
      "description": [
        "Sets the falloff rate for <a href=\"#/p5/pointLight\">pointLight()</a> and <a href=\"#/p5/spotLight\">spotLight()</a>.",
        "lightFalloff() affects only the lights which are created after it in the code.",
        "The <code>constant</code>, <code>linear</code>, an <code>quadratic</code> parameters are used to calculate falloff as follows:",
        "d = distance from light position to vertex position",
        "falloff = 1 / (CONSTANT + d * LINEAR + (d * d) * QUADRATIC)"
      ],
      "params": {
        "constant": "Number: CONSTANT value for determining falloff",
        "linear": "Number: LINEAR value for determining falloff",
        "quadratic": "Number: QUADRATIC value for determining falloff"
      }
    },
    "spotLight": {
      "description": [
        "Creates a spot light with the given color, position, light direction, angle, and concentration.",
        "Like a <a href=\"#/p5/pointLight\">pointLight()</a>, a spotLight() emits light from a specific point (position). It has a different effect when it is positioned farther vs. nearer an object.",
        "However, unlike a pointLight(), the light is emitted in <strong>one direction</strong> along a conical shape. The shape of the cone can be controlled using the <code>angle</code> and <code>concentration</code> parameters.",
        "The <code>angle</code> parameter is used to determine the radius of the cone. And the <code>concentration</code> parameter is used to focus the light towards the center of the cone. Both parameters are optional, however if you want to specify <code>concentration</code>, you must also specify <code>angle</code>. The minimum concentration value is 1.",
        "A maximum of <strong>5</strong> spot lights can be active at once.",
        "Note: lights need to be called (whether directly or indirectly) within draw() to remain persistent in a looping program. Placing them in setup() will cause them to only have an effect the first time through the loop."
      ],
      "params": {
        "v1": "Number: red or hue value relative to the current color range",
        "v2": "Number: green or saturation value relative to the current color range",
        "v3": "Number: blue or brightness value relative to the current color range",
        "x": "Number: x component of position",
        "y": "Number: y component of position",
        "z": "Number: z component of position",
        "rx": "Number: x component of light direction (inclusive range of -1 to 1)",
        "ry": "Number: y component of light direction (inclusive range of -1 to 1)",
        "rz": "Number: z component of light direction (inclusive range of -1 to 1)",
        "angle": "Number: (Optional) angle of cone. Defaults to PI/3",
        "concentration": "Number: (Optional) concentration of cone. Defaults to 100",
        "color": "p5.Color|Number[]|String: color as a <a href=\"#/p5.Color\">p5.Color</a>,  as an array, or as a CSS string",
        "position": "p5.Vector: position of light as a <a href=\"#/p5.Vector\">p5.Vector</a>",
        "direction": "p5.Vector: direction of light as a <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "noLights": {
      "description": [
        "Removes all lights present in a sketch.",
        "All subsequent geometry is rendered without lighting (until a new light is created with a call to one of the lighting functions (<a href=\"#/p5/lights\">lights()</a>, <a href=\"#/p5/ambientLight\">ambientLight()</a>, <a href=\"#/p5/directionalLight\">directionalLight()</a>, <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/spotLight\">spotLight()</a>)."
      ]
    },
    "loadModel": {
      "description": [
        "Load a 3d model from an OBJ or STL file.",
        "<a href=\"#/p5/loadModel\">loadModel()</a> should be placed inside of <a href=\"#/p5/preload\">preload()</a>. This allows the model to load fully before the rest of your code is run.",
        "One of the limitations of the OBJ and STL format is that it doesn't have a built-in sense of scale. This means that models exported from different programs might be very different sizes. If your model isn't displaying, try calling <a href=\"#/p5/loadModel\">loadModel()</a> with the normalized parameter set to true. This will resize the model to a scale appropriate for p5. You can also make additional changes to the final size of your model with the <a href=\"#/p5/scale\">scale()</a> function.",
        "Also, the support for colored STL files is not present. STL files with color will be rendered without color properties."
      ],
      "returns": "p5.Geometry: the <a href=\"#/p5.Geometry\">p5.Geometry</a> object",
      "params": {
        "path": "String: Path of the model to be loaded",
        "normalize": "Boolean: If true, scale the model to a  standardized size when loading",
        "successCallback": "function(p5.Geometry): (Optional) Function to be called  once the model is loaded. Will be passed  the 3D model object.",
        "failureCallback": "Function(Event): (Optional) called with event error if  the model fails to load.",
        "fileType": "String: (Optional) The file extension of the model  (<code>.stl</code>, <code>.obj</code>)."
      }
    },
    "model": {
      "description": ["Render a 3d model to the screen."],
      "params": {
        "model": "p5.Geometry: Loaded 3d model to be rendered"
      }
    },
    "loadShader": {
      "description": [
        "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object from the provided vertex and fragment shader files.",
        "The shader files are loaded asynchronously in the background, so this method should be used in <a href=\"#/p5/preload\">preload()</a>.",
        "Note, shaders can only be used in WEBGL mode."
      ],
      "returns": "p5.Shader: a shader object created from the provided vertex and fragment shader files.",
      "params": {
        "vertFilename": "String: path to file containing vertex shader source code",
        "fragFilename": "String: path to file containing fragment shader source code",
        "callback": "Function: (Optional) callback to be executed after loadShader completes. On success, the p5.Shader object is passed as the first argument.",
        "errorCallback": "Function: (Optional) callback to be executed when an error occurs inside loadShader. On error, the error is passed as the first argument."
      }
    },
    "createShader": {
      "description": [
        "Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object from the provided vertex and fragment shader code.",
        "Note, shaders can only be used in WEBGL mode."
      ],
      "returns": "p5.Shader: a shader object created from the provided vertex and fragment shaders.",
      "params": {
        "vertSrc": "String: source code for the vertex shader",
        "fragSrc": "String: source code for the fragment shader"
      }
    },
    "shader": {
      "description": [
        "Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to be used to render subsequent shapes.",
        "Custom shaders can be created using the <a href=\"#/p5/createShader\">createShader()</a> and <a href=\"#/p5/loadShader\">loadShader()</a> functions.",
        "Use <a href=\"#/p5/resetShader\">resetShader()</a> to restore the default shaders.",
        "Note, shaders can only be used in WEBGL mode."
      ],
      "params": {
        "s": "p5.Shader: the <a href=\"#/p5.Shader\">p5.Shader</a> object to use for rendering shapes."
      }
    },
    "resetShader": {
      "description": [
        "Restores the default shaders. Code that runs after resetShader() will not be affected by the shader previously set by <a href=\"#/p5/shader\">shader()</a>"
      ]
    },
    "texture": {
      "description": [
        "Sets the texture that will be used to render subsequent shapes.",
        "A texture is like a \"skin\" that wraps around a 3D geometry. Currently supported textures are images, video, and offscreen renders.",
        "To texture a geometry created with <a href=\"#/p5/beginShape\">beginShape()</a>, you will need to specify uv coordinates in <a href=\"#/p5/vertex\">vertex()</a>.",
        "Note, texture() can only be used in WEBGL mode.",
        "You can view more materials in this <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>."
      ],
      "params": {
        "tex": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture: image to use as texture"
      }
    },
    "textureMode": {
      "description": [
        "Sets the coordinate space for texture mapping. The default mode is IMAGE which refers to the actual coordinates of the image. NORMAL refers to a normalized space of values ranging from 0 to 1.",
        "With IMAGE, if an image is 100×200 pixels, mapping the image onto the entire size of a quad would require the points (0,0) (100, 0) (100,200) (0,200). The same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1)."
      ],
      "params": {
        "mode": "Constant: either IMAGE or NORMAL"
      }
    },
    "textureWrap": {
      "description": [
        "Sets the global texture wrapping mode. This controls how textures behave when their uv's go outside of the 0 to 1 range. There are three options: CLAMP, REPEAT, and MIRROR.",
        "CLAMP causes the pixels at the edge of the texture to extend to the bounds. REPEAT causes the texture to tile repeatedly until reaching the bounds. MIRROR works similarly to REPEAT but it flips the texture with every new tile.",
        "REPEAT & MIRROR are only available if the texture is a power of two size (128, 256, 512, 1024, etc.).",
        "This method will affect all textures in your sketch until a subsequent textureWrap() call is made.",
        "If only one argument is provided, it will be applied to both the horizontal and vertical axes."
      ],
      "params": {
        "wrapX": "Constant: either CLAMP, REPEAT, or MIRROR",
        "wrapY": "Constant: (Optional) either CLAMP, REPEAT, or MIRROR"
      }
    },
    "normalMaterial": {
      "description": [
        "Sets the current material as a normal material.",
        "A normal material is not affected by light. It is often used as a placeholder material when debugging.",
        "Surfaces facing the X-axis become red, those facing the Y-axis become green, and those facing the Z-axis become blue.",
        "You can view more materials in this <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>."
      ]
    },
    "ambientMaterial": {
      "description": [
        "Sets the ambient color of the material.",
        "The ambientMaterial() color is the color the object will reflect under <strong>any</strong> lighting.",
        "Consider an ambientMaterial() with the color yellow (255, 255, 0). If the light emits the color white (255, 255, 255), then the object will appear yellow as it will reflect the red and green components of the light. If the light emits the color red (255, 0, 0), then the object will appear red as it will reflect the red component of the light. If the light emits the color blue (0, 0, 255), then the object will appear black, as there is no component of the light that it can reflect.",
        "You can view more materials in this <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>."
      ],
      "params": {
        "v1": "Number: red or hue value relative to the current  color range",
        "v2": "Number: green or saturation value relative to the  current color range",
        "v3": "Number: blue or brightness value relative to the  current color range",
        "gray": "Number: number specifying value between  white and black",
        "color": "p5.Color|Number[]|String: color as a <a href=\"#/p5.Color\">p5.Color</a>,  as an array, or as a CSS string"
      }
    },
    "emissiveMaterial": {
      "description": [
        "Sets the emissive color of the material.",
        "An emissive material will display the emissive color at full strength regardless of lighting. This can give the appearance that the object is glowing.",
        "Note, \"emissive\" is a misnomer in the sense that the material does not actually emit light that will affect surrounding objects.",
        "You can view more materials in this <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>."
      ],
      "params": {
        "v1": "Number: red or hue value relative to the current  color range",
        "v2": "Number: green or saturation value relative to the  current color range",
        "v3": "Number: blue or brightness value relative to the  current color range",
        "alpha": "Number: (Optional) alpha value relative to current color  range (default is 0-255)",
        "gray": "Number: number specifying value between  white and black",
        "color": "p5.Color|Number[]|String: color as a <a href=\"#/p5.Color\">p5.Color</a>,  as an array, or as a CSS string"
      }
    },
    "specularMaterial": {
      "description": [
        "Sets the specular color of the material.",
        "A specular material is reflective (shiny). The shininess can be controlled by the <a href=\"#/p5/shininess\">shininess()</a> function.",
        "Like <a href=\"#/p5/ambientMaterial\">ambientMaterial()</a>, the specularMaterial() color is the color the object will reflect under <a href=\"#/p5/ambientLight\">ambientLight()</a>. However unlike ambientMaterial(), for all other types of lights (<a href=\"#/p5/directionalLight\">directionalLight()</a>, <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/spotLight\">spotLight()</a>), a specular material will reflect the <strong>color of the light source</strong>. This is what gives it its \"shiny\" appearance.",
        "You can view more materials in this <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>."
      ],
      "params": {
        "gray": "Number: number specifying value between white and black.",
        "alpha": "Number: (Optional) alpha value relative to current color range  (default is 0-255)",
        "v1": "Number: red or hue value relative to  the current color range",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "color": "p5.Color|Number[]|String: color as a <a href=\"#/p5.Color\">p5.Color</a>,  as an array, or as a CSS string"
      }
    },
    "shininess": {
      "description": [
        "Sets the amount of gloss (\"shininess\") of a <a href=\"#/p5/specularMaterial\">specularMaterial()</a>.",
        "The default and minimum value is 1."
      ],
      "params": {
        "shine": "Number: degree of shininess"
      }
    },
    "camera": {
      "description": [
        "Sets the position of the current camera in a 3D sketch. Parameters for this function define the camera's position, the center of the sketch (where the camera is pointing), and an up direction (the orientation of the camera).",
        "This function simulates the movements of the camera, allowing objects to be viewed from various angles. Remember, it does not move the objects themselves but the camera instead. For example when the centerX value is positive, and the camera is rotating to the right side of the sketch, the object will seem like it's moving to the left.",
        "See this <a href = \"https://www.openprocessing.org/sketch/740258\">example</a> to view the position of your camera.",
        "If no parameters are given, the following default is used: camera(0, 0, (height/2) / tan(PI/6), 0, 0, 0, 0, 1, 0)"
      ],
      "params": {
        "x": "Number: (Optional) camera position value on x axis",
        "y": "Number: (Optional) camera position value on y axis",
        "z": "Number: (Optional) camera position value on z axis",
        "centerX": "Number: (Optional) x coordinate representing center of the sketch",
        "centerY": "Number: (Optional) y coordinate representing center of the sketch",
        "centerZ": "Number: (Optional) z coordinate representing center of the sketch",
        "upX": "Number: (Optional) x component of direction 'up' from camera",
        "upY": "Number: (Optional) y component of direction 'up' from camera",
        "upZ": "Number: (Optional) z component of direction 'up' from camera"
      }
    },
    "perspective": {
      "description": [
        "Sets a perspective projection for the current camera in a 3D sketch. This projection represents depth through foreshortening: objects that are close to the camera appear their actual size while those that are further away from the camera appear smaller.",
        "The parameters to this function define the viewing frustum (the truncated pyramid within which objects are seen by the camera) through vertical field of view, aspect ratio (usually width/height), and near and far clipping planes.",
        "If no parameters are given, the following default is used: perspective(PI/3, width/height, eyeZ/10, eyeZ*10), where eyeZ is equal to ((height/2) / tan(PI/6))."
      ],
      "params": {
        "fovy": "Number: (Optional) camera frustum vertical field of view,  from bottom to top of view, in <a href=\"#/p5/angleMode\">angleMode</a> units",
        "aspect": "Number: (Optional) camera frustum aspect ratio",
        "near": "Number: (Optional) frustum near plane length",
        "far": "Number: (Optional) frustum far plane length"
      }
    },
    "ortho": {
      "description": [
        "Sets an orthographic projection for the current camera in a 3D sketch and defines a box-shaped viewing frustum within which objects are seen. In this projection, all objects with the same dimension appear the same size, regardless of whether they are near or far from the camera.",
        "The parameters to this function specify the viewing frustum where left and right are the minimum and maximum x values, top and bottom are the minimum and maximum y values, and near and far are the minimum and maximum z values.",
        "If no parameters are given, the following default is used: ortho(-width/2, width/2, -height/2, height/2)."
      ],
      "params": {
        "left": "Number: (Optional) camera frustum left plane",
        "right": "Number: (Optional) camera frustum right plane",
        "bottom": "Number: (Optional) camera frustum bottom plane",
        "top": "Number: (Optional) camera frustum top plane",
        "near": "Number: (Optional) camera frustum near plane",
        "far": "Number: (Optional) camera frustum far plane"
      }
    },
    "frustum": {
      "description": [
        "Sets the frustum of the current camera as defined by the parameters.",
        "A frustum is a geometric form: a pyramid with its top cut off. With the viewer's eye at the imaginary top of the pyramid, the six planes of the frustum act as clipping planes when rendering a 3D view. Thus, any form inside the clipping planes is visible; anything outside those planes is not visible.",
        "Setting the frustum changes the perspective of the scene being rendered. This can be achieved more simply in many cases by using <a href=\"https://p5js.org/reference/#/p5/perspective\">perspective()</a>.",
        "If no parameters are given, the following default is used: frustum(-width/2, width/2, -height/2, height/2, 0, max(width, height))."
      ],
      "params": {
        "left": "Number: (Optional) camera frustum left plane",
        "right": "Number: (Optional) camera frustum right plane",
        "bottom": "Number: (Optional) camera frustum bottom plane",
        "top": "Number: (Optional) camera frustum top plane",
        "near": "Number: (Optional) camera frustum near plane",
        "far": "Number: (Optional) camera frustum far plane"
      }
    },
    "createCamera": {
      "description": [
        "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it as the current (active) camera.",
        "The new camera is initialized with a default position (see <a href=\"#/p5.Camera/camera\">camera()</a>) and a default perspective projection (see <a href=\"#/p5.Camera/perspective\">perspective()</a>). Its properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a> methods.",
        "Note: Every 3D sketch starts with a default camera initialized. This camera can be controlled with the global methods <a href=\"#/p5/camera\">camera()</a>, <a href=\"#/p5/perspective\">perspective()</a>, <a href=\"#/p5/ortho\">ortho()</a>, and <a href=\"#/p5/frustum\">frustum()</a> if it is the only camera in the scene."
      ],
      "returns": "p5.Camera: The newly created camera object."
    },
    "setCamera": {
      "description": [
        "Sets the current (active) camera of a 3D sketch. Allows for switching between multiple cameras."
      ],
      "params": {
        "cam": "p5.Camera: p5.Camera object"
      }
    },
    "setAttributes": {
      "description": [
        "Set attributes for the WebGL Drawing context. This is a way of adjusting how the WebGL renderer works to fine-tune the display and performance.",
        "Note that this will reinitialize the drawing context if called after the WebGL canvas is made.",
        "If an object is passed as the parameter, all attributes not declared in the object will be set to defaults.",
        "The available attributes are:  alpha - indicates if the canvas contains an alpha buffer default is true",
        "depth - indicates whether the drawing buffer has a depth buffer of at least 16 bits - default is true",
        "stencil - indicates whether the drawing buffer has a stencil buffer of at least 8 bits",
        "antialias - indicates whether or not to perform anti-aliasing default is false (true in Safari)",
        "premultipliedAlpha - indicates that the page compositor will assume the drawing buffer contains colors with pre-multiplied alpha default is true",
        "preserveDrawingBuffer - if true the buffers will not be cleared and and will preserve their values until cleared or overwritten by author (note that p5 clears automatically on draw loop) default is true",
        "perPixelLighting - if true, per-pixel lighting will be used in the lighting shader otherwise per-vertex lighting is used. default is true."
      ],
      "params": {
        "key": "String: Name of attribute",
        "value": "Boolean: New value of named attribute",
        "obj": "Object: object with key-value pairs"
      }
    },
    "getAudioContext": {
      "description": [
        "Returns the Audio Context for this sketch. Useful for users who would like to dig deeper into the <a target='_blank' href= 'http://webaudio.github.io/web-audio-api/'>Web Audio API </a>.",
        "Some browsers require users to startAudioContext with a user gesture, such as touchStarted in the example below."
      ],
      "returns": "Object: AudioContext for this sketch"
    },
    "userStartAudio": {
      "description": [
        "It is not only a good practice to give users control over starting audio. This policy is enforced by many web browsers, including iOS and <a href=\"https://goo.gl/7K7WLu\" title=\"Google Chrome's autoplay policy\">Google Chrome</a>, which create the Web Audio API's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\" title=\"Audio Context @ MDN\">Audio Context</a> in a suspended state.",
        "In these browser-specific policies, sound will not play until a user interaction event (i.e. <code>mousePressed()</code>) explicitly resumes the AudioContext, or starts an audio node. This can be accomplished by calling <code>start()</code> on a <code>p5.Oscillator</code>, <code> play()</code> on a <code>p5.SoundFile</code>, or simply <code>userStartAudio()</code>.",
        "<code>userStartAudio()</code> starts the AudioContext on a user gesture. The default behavior will enable audio on any mouseUp or touchEnd event. It can also be placed in a specific interaction function, such as <code>mousePressed()</code> as in the example below. This method utilizes <a href=\"https://github.com/tambien/StartAudioContext\">StartAudioContext </a>, a library by Yotam Mann (MIT Licence, 2016)."
      ],
      "returns": "Promise: Returns a Promise that resolves when  the AudioContext state is 'running'",
      "params": {
        "elements": "Element|Array: (Optional) This argument can be an Element,  Selector String, NodeList, p5.Element,  jQuery Element, or an Array of any of those.",
        "callback": "Function: (Optional) Callback to invoke when the AudioContext  has started"
      }
    },
    "getOutputVolume": {
      "description": [
        "Returns a number representing the output volume for sound in this sketch."
      ],
      "returns": "Number: Output volume for sound in this sketch.  Should be between 0.0 (silence) and 1.0."
    },
    "outputVolume": {
      "description": [
        "Scale the output of all sound in this sketch Scaled between 0.0 (silence) and 1.0 (full volume). 1.0 is the maximum amplitude of a digital sound, so multiplying by greater than 1.0 may cause digital distortion. To fade, provide a <code>rampTime</code> parameter. For more complex fades, see the Envelope class.",
        "Alternately, you can pass in a signal source such as an oscillator to modulate the amplitude with an audio signal.",
        "<b>How This Works</b>: When you load the p5.sound module, it creates a single instance of p5sound. All sound objects in this module output to p5sound before reaching your computer's output. So if you change the amplitude of p5sound, it impacts all of the sound in this module.",
        "If no value is provided, returns a Web Audio API Gain Node"
      ],
      "params": {
        "volume": "Number|Object: Volume (amplitude) between 0.0  and 1.0 or modulating signal/oscillator",
        "rampTime": "Number: (Optional) Fade for t seconds",
        "timeFromNow": "Number: (Optional) Schedule this event to happen at  t seconds in the future"
      }
    },
    "soundOut": {
      "description": [
        "<code>p5.soundOut</code> is the p5.sound final output bus. It sends output to the destination of this window's web audio context. It contains Web Audio API nodes including a dyanmicsCompressor (<code>.limiter</code>), and Gain Nodes for <code>.input</code> and <code>.output</code>."
      ]
    },
    "sampleRate": {
      "description": [
        "Returns a number representing the sample rate, in samples per second, of all sound objects in this audio context. It is determined by the sampling rate of your operating system's sound card, and it is not currently possile to change. It is often 44100, or twice the range of human hearing."
      ],
      "returns": "Number: samplerate samples per second"
    },
    "freqToMidi": {
      "description": [
        "Returns the closest MIDI note value for a given frequency."
      ],
      "returns": "Number: MIDI note value",
      "params": {
        "frequency": "Number: A freqeuncy, for example, the \"A\"  above Middle C is 440Hz"
      }
    },
    "midiToFreq": {
      "description": [
        "Returns the frequency value of a MIDI note value. General MIDI treats notes as integers where middle C is 60, C# is 61, D is 62 etc. Useful for generating musical frequencies with oscillators."
      ],
      "returns": "Number: Frequency value of the given MIDI note",
      "params": {
        "midiNote": "Number: The number of a MIDI note"
      }
    },
    "soundFormats": {
      "description": [
        "List the SoundFile formats that you will include. LoadSound will search your directory for these extensions, and will pick a format that is compatable with the client's web browser. <a href=\"http://media.io/\">Here</a> is a free online file converter."
      ],
      "params": {
        "formats": "String: (Optional) i.e. 'mp3', 'wav', 'ogg'"
      }
    },
    "saveSound": {
      "description": [
        "Save a p5.SoundFile as a .wav file. The browser will prompt the user to download the file to their device. For uploading audio to a server, use <a href=\"/docs/reference/#/p5.SoundFile/saveBlob\"><code>p5.SoundFile.saveBlob</code></a>."
      ],
      "params": {
        "soundFile": "p5.SoundFile: p5.SoundFile that you wish to save",
        "fileName": "String: name of the resulting .wav file."
      }
    },
    "loadSound": {
      "description": [
        "loadSound() returns a new p5.SoundFile from a specified path. If called during preload(), the p5.SoundFile will be ready to play in time for setup() and draw(). If called outside of preload, the p5.SoundFile will not be ready immediately, so loadSound accepts a callback as the second parameter. Using a <a href=\"https://github.com/processing/p5.js/wiki/Local-server\"> local server</a> is recommended when loading external files."
      ],
      "returns": "SoundFile: Returns a p5.SoundFile",
      "params": {
        "path": "String|Array: Path to the sound file, or an array with  paths to soundfiles in multiple formats  i.e. ['sound.ogg', 'sound.mp3'].  Alternately, accepts an object: either  from the HTML5 File API, or a p5.File.",
        "successCallback": "Function: (Optional) Name of a function to call once file loads",
        "errorCallback": "Function: (Optional) Name of a function to call if there is  an error loading the file.",
        "whileLoading": "Function: (Optional) Name of a function to call while file is loading.  This function will receive the percentage loaded  so far, from 0.0 to 1.0."
      }
    },
    "createConvolver": {
      "description": [
        "Create a p5.Convolver. Accepts a path to a soundfile that will be used to generate an impulse response."
      ],
      "returns": "p5.Convolver:",
      "params": {
        "path": "String: path to a sound file",
        "callback": "Function: (Optional) function to call if loading is successful.  The object will be passed in as the argument  to the callback function.",
        "errorCallback": "Function: (Optional) function to call if loading is not successful.  A custom error will be passed in as the argument  to the callback function."
      }
    },
    "setBPM": {
      "description": [
        "Set the global tempo, in beats per minute, for all p5.Parts. This method will impact all active p5.Parts."
      ],
      "params": {
        "BPM": "Number: Beats Per Minute",
        "rampTime": "Number: Seconds from now"
      }
    }
  },
  "p5.Color": {
    "description": [
      "各色は、その構築時に適用されたカラーモードとレベル最大値を格納します。これらは、入力引数の解釈（構築時およびそのインスタンスの後で）および出力の書式設定（<a href=\"#/p5/saturation\">saturation()</a> の要求時など）に使用されます。",
      "内部的に、理想的なRGBA値を表す浮動小数点配列を、0から1に正規化して格納しています。これから、最も近いスクリーンカラー（0から255のRGBAレベル）を計算し、レンダラーに公開します。",
      "また、計算された様々な表現の正規化された浮動小数点カラーのコンポーネントをキャッシュしています。これは、既に実行された変換を繰り返さないようにするために行われます。"
    ],
    "toString": {
      "description": [
        "このメソッドは、カラーを文字列としてフォーマットして返します。これはデバッグに役立つことがあります。また、p5.jsを他のライブラリと一緒に使用する場合にも役立ちます。"
      ],
      "returns": "String: フォーマットされた文字列",
      "params": {
        "format": "String: （オプション）カラー文字列の書式設定方法。空白にすると、rgba(r、g、b、a)として文字列をフォーマットします。 '#rgb'、 '#rgba'、 '#rrggbb'、および'#rrggbbaa'は16進数のカラーコードとしてフォーマットされます。 'rgb'、 'hsb'、および'hsl'は、指定されたカラーモードでフォーマットされたカラーを返します。 'rgba'、 'hsba'、および'hsla'は、上記と同じですがアルファチャネルが含まれます。 'rgb%'、 'hsb%'、 'hsl%'、 'rgba%'、 'hsba%'、および'hsla%'はパーセントとしてフォーマットされます。"
      }
    },
    "setRed": {
      "description": [
        "setRedメソッドは、カラーの赤の成分を設定します。範囲は、カラーモードによって異なります。デフォルトのRGBモードでは、0から255の範囲です。"
      ],
      "params": {
        "red": "Number: 新しい赤の値"
      }
    },
    "setGreen": {
      "description": [
        "The setGreen method sets the green component of a color. The range depends on your color mode, in the default RGB mode it's between 0 and 255."
      ],
      "params": {
        "green": "Number: the new green value"
      }
    },
    "setBlue": {
      "description": [
        "The setBlue method sets the blue component of a color. The range depends on your color mode, in the default RGB mode it's between 0 and 255."
      ],
      "params": {
        "blue": "Number: the new blue value"
      }
    },
    "setAlpha": {
      "description": [
        "The setAlpha method sets the transparency (alpha) value of a color. The range depends on your color mode, in the default RGB mode it's between 0 and 255."
      ],
      "params": {
        "alpha": "Number: the new alpha value"
      }
    }
  },
  "p5.Element": {
    "description": [
      "Base class for all elements added to a sketch, including canvas, graphics buffers, and other HTML elements. It is not called directly, but <a href=\"#/p5.Element\">p5.Element</a> objects are created by calling <a href=\"#/p5/createCanvas\">createCanvas()</a>, <a href=\"#/p5/createGraphics\">createGraphics()</a>, <a href=\"#/p5/createDiv\">createDiv()</a>, <a href=\"#/p5/createImg\">createImg()</a>, <a href=\"#/p5/createInput\">createInput()</a>, etc."
    ],
    "params": {
      "elt": "String: DOM node that is wrapped",
      "pInst": "P5: (Optional) pointer to p5 instance"
    },
    "elt": {
      "description": [
        "Underlying HTML element. All normal HTML methods can be called on this."
      ]
    },
    "parent": {
      "description": [
        "Attaches the element to the parent specified. A way of setting  the container for the element. Accepts either a string ID, DOM  node, or <a href=\"#/p5.Element\">p5.Element</a>. If no arguments are given, parent node is returned.  For more ways to position the canvas, see the  <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>  positioning the canvas</a> wiki page."
      ],
      "params": {
        "parent": "String|p5.Element|Object: the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>  of desired parent element"
      }
    },
    "id": {
      "description": [
        "Sets the ID of the element. If no ID argument is passed in, it instead  returns the current ID of the element.  Note that only one element can have a particular id in a page.  The <a href=\"#/p5.Element/class\">class()</a> method can be used  to identify multiple elements with the same class name."
      ],
      "params": {
        "id": "String: ID of the element"
      }
    },
    "class": {
      "description": [
        "Adds given class to the element. If no class argument is passed in, it  instead returns a string containing the current class(es) of the element."
      ],
      "params": {
        "class": "String: class to add"
      }
    },
    "mousePressed": {
      "description": [
        "The <a href=\"#/p5.Element/mousePressed\">mousePressed()</a> method is called once after every time a mouse button is pressed over the element. Some mobile browsers may also trigger this event on a touch screen, if the user performs a quick tap. This can be used to attach element-specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  pressed over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "doubleClicked": {
      "description": [
        "The <a href=\"#/p5.Element/doubleClicked\">doubleClicked()</a> method is called once after every time a mouse button is pressed twice over the element. This can be used to attach element and action-specific event listeners."
      ],
      "returns": "p5.Element:",
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  double clicked over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseWheel": {
      "description": [
        "The <a href=\"#/p5.Element/mouseWheel\">mouseWheel()</a> method is called once after every time a mouse wheel is scrolled over the element. This can be used to attach element-specific event listeners.",
        "The method accepts a callback function as argument which will be executed when the <code>wheel</code> event is triggered on the element, the callback function is passed one argument <code>event</code>. The <code>event.deltaY</code> property returns negative values if the mouse wheel is rotated up or away from the user and positive in the other direction. The <code>event.deltaX</code> does the same as <code>event.deltaY</code> except it reads the horizontal wheel scroll of the mouse wheel.",
        "On macOS with \"natural\" scrolling enabled, the <code>event.deltaY</code> values are reversed."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  scrolled over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseReleased": {
      "description": [
        "The <a href=\"#/p5.Element/mouseReleased\">mouseReleased()</a> method is called once after every time a mouse button is released over the element. Some mobile browsers may also trigger this event on a touch screen, if the user performs a quick tap. This can be used to attach element-specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  released over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseClicked": {
      "description": [
        "The <a href=\"#/p5.Element/mouseClicked\">mouseClicked()</a> method is called once after a mouse button is pressed and released over the element. Some mobile browsers may also trigger this event on a touch screen, if the user performs a quick tap. This can be used to attach element-specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  clicked over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseMoved": {
      "description": [
        "The <a href=\"#/p5.Element/mouseMoved\">mouseMoved()</a> method is called once every time a mouse moves over the element. This can be used to attach an element-specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a mouse moves  over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseOver": {
      "description": [
        "The <a href=\"#/p5.Element/mouseOver\">mouseOver()</a> method is called once after every time a mouse moves onto the element. This can be used to attach an element-specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a mouse moves  onto the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseOut": {
      "description": [
        "The <a href=\"#/p5.Element/mouseOut\">mouseOut()</a> method is called once after every time a mouse moves off the element. This can be used to attach an element-specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a mouse  moves off of an element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "touchStarted": {
      "description": [
        "The <a href=\"#/p5.Element/touchStarted\">touchStarted()</a> method is called once after every time a touch is registered. This can be used to attach element-specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a touch  starts over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "touchMoved": {
      "description": [
        "The <a href=\"#/p5.Element/touchMoved\">touchMoved()</a> method is called once after every time a touch move is registered. This can be used to attach element-specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a touch moves over  the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "touchEnded": {
      "description": [
        "The <a href=\"#/p5.Element/touchEnded\">touchEnded()</a> method is called once after every time a touch is registered. This can be used to attach element-specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a touch ends  over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "dragOver": {
      "description": [
        "The <a href=\"#/p5.Element/dragOver\">dragOver()</a> method is called once after every time a file is dragged over the element. This can be used to attach an element-specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a file is  dragged over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "dragLeave": {
      "description": [
        "The <a href=\"#/p5.Element/dragLeave\">dragLeave()</a> method is called once after every time a dragged file leaves the element area. This can be used to attach an element-specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a file is  dragged off the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "addClass": {
      "description": ["Adds specified class to the element."],
      "params": {
        "class": "String: name of class to add"
      }
    },
    "removeClass": {
      "description": ["Removes specified class from the element."],
      "params": {
        "class": "String: name of class to remove"
      }
    },
    "hasClass": {
      "description": [
        "Checks if specified class is already applied to element."
      ],
      "returns": "Boolean: a boolean value if element has specified class",
      "params": {
        "c": "String: class name of class to check"
      }
    },
    "toggleClass": {
      "description": ["Toggles element class."],
      "params": {
        "c": "String: class name to toggle"
      }
    },
    "child": {
      "description": [
        "Attaches the element as a child to the parent specified.  Accepts either a string ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>.  If no argument is specified, an array of children DOM nodes is returned."
      ],
      "returns": "Node[]: an array of child nodes",
      "params": {
        "child": "String|p5.Element: (Optional) the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>  to add to the current element"
      }
    },
    "center": {
      "description": [
        "Centers a p5.Element either vertically, horizontally, or both, relative to its parent or according to the body if the p5.Element has no parent. If no argument is passed the p5.Element is aligned both vertically and horizontally."
      ],
      "params": {
        "align": "String: (Optional) passing 'vertical', 'horizontal' aligns element accordingly"
      }
    },
    "html": {
      "description": [
        "If an argument is given, sets the inner HTML of the element,  replacing any existing HTML. If true is included as a second  argument, HTML is appended instead of replacing existing HTML.  If no arguments are given, returns  the inner HTML of the element."
      ],
      "returns": "String: the inner HTML of the element",
      "params": {
        "html": "String: (Optional) the HTML to be placed inside the element",
        "append": "Boolean: (Optional) whether to append HTML to existing"
      }
    },
    "position": {
      "description": [
        "Sets the position of the element. If no position type argument is given, the  position will be relative to (0, 0) of the window.  Essentially, this sets position:absolute and left and top  properties of style. If an optional third argument specifying position type is given,  the x and y-coordinates will be interpreted based on the <a target=\"_blank\"  href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\">positioning scheme</a>.  If no arguments given, the function returns the x and y position of the element. found documentation on how to be more specific with object type  <a href=\"https://stackoverflow.com/questions/14714314/how-do-i-comment-object-literals-in-yuidoc\">https://stackoverflow.com/questions/14714314/how-do-i-comment-object-literals-in-yuidoc</a>"
      ],
      "returns": "Object: object of form { x: 0, y: 0 } containing the position of the element in an object",
      "params": {
        "x": "Number: (Optional) x-position relative to upper left of window (optional)",
        "y": "Number: (Optional) y-position relative to upper left of window (optional)",
        "positionType": "String: (Optional) it can be static, fixed, relative, sticky, initial or inherit (optional)"
      }
    },
    "style": {
      "description": [
        "Sets the given style (CSS) property (1st arg) of the element with the given value (2nd arg). If a single argument is given, .style() returns the value of the given property; however, if a single argument is given in CSS syntax ('text-align:center'), .style() sets the CSS appropriately."
      ],
      "returns": "String: value of property",
      "params": {
        "property": "String: property to be set",
        "value": "String|p5.Color: value to assign to property"
      }
    },
    "attribute": {
      "description": [
        "Adds a new attribute or changes the value of an existing attribute  on the specified element. If no value is specified, returns the  value of the given attribute, or null if the attribute is not set."
      ],
      "returns": "String: value of attribute",
      "params": {
        "attr": "String: attribute to set",
        "value": "String: value to assign to attribute"
      }
    },
    "removeAttribute": {
      "description": ["Removes an attribute on the specified element."],
      "params": {
        "attr": "String: attribute to remove"
      }
    },
    "value": {
      "description": [
        "Either returns the value of the element if no arguments given, or sets the value of the element."
      ],
      "returns": "String|Number: value of the element",
      "params": {
        "value": "String|Number"
      }
    },
    "show": {
      "description": [
        "Shows the current element. Essentially, setting display:block for the style."
      ]
    },
    "hide": {
      "description": [
        "Hides the current element. Essentially, setting display:none for the style."
      ]
    },
    "size": {
      "description": [
        "Sets the width and height of the element. AUTO can be used to  only adjust one dimension at a time. If no arguments are given, it  returns the width and height of the element in an Object. In the case of  elements that need to be loaded, such as images, it is recommended  to call the function after the element has finished loading."
      ],
      "returns": "Object: the width and height of the element in an object",
      "params": {
        "w": "Number|Constant: width of the element, either AUTO, or a number",
        "h": "Number|Constant: (Optional) height of the element, either AUTO, or a number"
      }
    },
    "remove": {
      "description": [
        "Removes the element, stops all media streams, and deregisters all listeners."
      ]
    },
    "drop": {
      "description": [
        "Registers a callback that gets called every time a file that is dropped on the element has been loaded. p5 will load every dropped file into memory and pass it as a p5.File object to the callback. Multiple files dropped at the same time will result in multiple calls to the callback.",
        "You can optionally pass a second callback which will be registered to the raw <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drop\">drop</a> event. The callback will thus be provided the original <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\">DragEvent</a>. Dropping multiple files at the same time will trigger the second callback once per drop, whereas the first callback will trigger for each loaded file."
      ],
      "params": {
        "callback": "Function: callback to receive loaded file, called for each file dropped.",
        "fxn": "Function: (Optional) callback triggered once when files are dropped with the drop event."
      }
    }
  },
  "p5.Graphics": {
    "description": [
      "Thin wrapper around a renderer, to be used for creating a graphics buffer object. Use this class if you need to draw into an off-screen graphics buffer. The two parameters define the width and height in pixels. The fields and methods for this class are extensive, but mirror the normal drawing API for p5."
    ],
    "params": {
      "w": "Number: width",
      "h": "Number: height",
      "renderer": "Constant: the renderer to use, either P2D or WEBGL",
      "pInst": "P5: (Optional) pointer to p5 instance"
    },
    "reset": {
      "description": [
        "Resets certain values such as those modified by functions in the Transform category and in the Lights category that are not automatically reset with graphics buffer objects. Calling this in <a href='#/p5/draw'>draw()</a> will copy the behavior of the standard canvas."
      ]
    },
    "remove": {
      "description": [
        "Removes a Graphics object from the page and frees any resources associated with it."
      ]
    }
  },
  "p5.Renderer": {
    "description": [
      "Main graphics and rendering context, as well as the base API implementation for p5.js \"core\". To be used as the superclass for Renderer2D and Renderer3D classes, respectively."
    ],
    "params": {
      "elt": "String: DOM node that is wrapped",
      "pInst": "P5: (Optional) pointer to p5 instance",
      "isMainCanvas": "Boolean: (Optional) whether we're using it as main canvas"
    }
  },
  "JSON": {
    "stringify": {
      "description": [
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">the MDN entry</a>: The JSON.stringify() method converts a JavaScript object or value to a JSON <a href=\"#/p5/string\">string</a>."
      ],
      "params": {
        "object": "Object: :Javascript object that you would like to convert to JSON"
      }
    }
  },
  "console": {
    "log": {
      "description": [
        "Prints a message to your browser's web console. When using p5, you can use <a href=\"#/p5/print\">print</a> and <a href=\"#/p5/console/log\">console.log</a> interchangeably.",
        "The console is opened differently depending on which browser you are using. Here are links on how to open the console in <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Opening_the_Web_Console\">Firefox</a> , <a href=\"https://developers.google.com/web/tools/chrome-devtools/open\">Chrome</a>, <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide/console\">Edge</a>, and <a href=\"https://support.apple.com/en-ca/guide/safari/sfri20948/mac\">Safari</a>. With the <a href=\"https://editor.p5js.org/\">online p5 editor</a> the console is embedded directly in the page underneath the code editor.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console/log\">the MDN entry</a>: The Console method log() outputs a message to the web console. The message may be a single <a href=\"#/p5/string\">string</a> (with optional substitution values), or it may be any one or more JavaScript <a href=\"#/p5/object\">objects</a>."
      ],
      "params": {
        "message": "String|Expression|Object: :Message that you would like to print to the console"
      }
    }
  },
  "p5.TypedDict": {
    "description": [
      "Base class for all p5.Dictionary types. Specifically  typed Dictionary classes inherit from this class."
    ],
    "size": {
      "description": [
        "Returns the number of key-value pairs currently stored in the Dictionary."
      ],
      "returns": "Integer: the number of key-value pairs in the Dictionary"
    },
    "hasKey": {
      "description": [
        "Returns true if the given key exists in the Dictionary, otherwise returns false."
      ],
      "returns": "Boolean: whether that key exists in Dictionary",
      "params": {
        "key": "Number|String: that you want to look up"
      }
    },
    "get": {
      "description": ["Returns the value stored at the given key."],
      "returns": "Number|String: the value stored at that key",
      "params": {
        "the": "Number|String: key you want to access"
      }
    },
    "set": {
      "description": [
        "Updates the value associated with the given key in case it already exists in the Dictionary. Otherwise a new key-value pair is added."
      ],
      "params": {
        "key": "Number|String",
        "value": "Number|String"
      }
    },
    "create": {
      "description": ["Creates a new key-value pair in the Dictionary."],
      "params": {
        "key": "Number|String",
        "value": "Number|String",
        "obj": "Object: key/value pair"
      }
    },
    "clear": {
      "description": [
        "Removes all previously stored key-value pairs from the Dictionary."
      ]
    },
    "remove": {
      "description": [
        "Removes the key-value pair stored at the given key from the Dictionary."
      ],
      "params": {
        "key": "Number|String: for the pair to remove"
      }
    },
    "print": {
      "description": [
        "Logs the set of items currently stored in the Dictionary to the console."
      ]
    },
    "saveTable": {
      "description": [
        "Converts the Dictionary into a CSV file for local download."
      ]
    },
    "saveJSON": {
      "description": [
        "Converts the Dictionary into a JSON file for local download."
      ]
    }
  },
  "p5.StringDict": {
    "description": ["A simple Dictionary class for Strings."]
  },
  "p5.NumberDict": {
    "description": ["A simple Dictionary class for Numbers."],
    "add": {
      "description": [
        "Add the given number to the value currently stored at the given key. The sum then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for the value you wish to add to",
        "Number": "Number: to add to the value"
      }
    },
    "sub": {
      "description": [
        "Subtract the given number from the value currently stored at the given key. The difference then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for the value you wish to subtract from",
        "Number": "Number: to subtract from the value"
      }
    },
    "mult": {
      "description": [
        "Multiply the given number with the value currently stored at the given key. The product then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for value you wish to multiply",
        "Amount": "Number: to multiply the value by"
      }
    },
    "div": {
      "description": [
        "Divide the given number with the value currently stored at the given key. The quotient then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for value you wish to divide",
        "Amount": "Number: to divide the value by"
      }
    },
    "minValue": {
      "description": [
        "Return the lowest number currently stored in the Dictionary."
      ],
      "returns": "Number:"
    },
    "maxValue": {
      "description": [
        "Return the highest number currently stored in the Dictionary."
      ],
      "returns": "Number:"
    },
    "minKey": {
      "description": [
        "Return the lowest key currently used in the Dictionary."
      ],
      "returns": "Number:"
    },
    "maxKey": {
      "description": [
        "Return the highest key currently used in the Dictionary."
      ],
      "returns": "Number:"
    }
  },
  "p5.MediaElement": {
    "description": [
      "Extends <a href=\"#/p5.Element\">p5.Element</a> to handle audio and video. In addition to the methods of <a href=\"#/p5.Element\">p5.Element</a>, it also contains methods for controlling media. It is not called directly, but <a href=\"#/p5.MediaElement\">p5.MediaElement</a>s are created by calling <a href=\"#/p5/createVideo\">createVideo</a>, <a href=\"#/p5/createAudio\">createAudio</a>, and <a href=\"#/p5/createCapture\">createCapture</a>."
    ],
    "params": {
      "elt": "String: DOM node that is wrapped"
    },
    "src": {
      "description": ["Path to the media element source."],
      "returns": "String: src"
    },
    "play": {
      "description": ["Play an HTML5 media element."]
    },
    "stop": {
      "description": [
        "Stops an HTML5 media element (sets current time to zero)."
      ]
    },
    "pause": {
      "description": ["Pauses an HTML5 media element."]
    },
    "loop": {
      "description": [
        "Set 'loop' to true for an HTML5 media element, and starts playing."
      ]
    },
    "noLoop": {
      "description": [
        "Set 'loop' to false for an HTML5 media element. Element will stop when it reaches the end."
      ]
    },
    "autoplay": {
      "description": [
        "Set HTML5 media element to autoplay or not. If no argument is specified, by default it will autoplay."
      ],
      "params": {
        "shouldAutoplay": "Boolean: whether the element should autoplay"
      }
    },
    "volume": {
      "description": [
        "Sets volume for this HTML5 media element. If no argument is given, returns the current volume."
      ],
      "returns": "Number: current volume",
      "params": {
        "val": "Number: volume between 0.0 and 1.0"
      }
    },
    "speed": {
      "description": [
        "If no arguments are given, returns the current playback speed of the element. The speed parameter sets the speed where 2.0 will play the element twice as fast, 0.5 will play at half the speed, and -1 will play the element in normal speed in reverse.(Note that not all browsers support backward playback and even if they do, playback might not be smooth.)"
      ],
      "returns": "Number: current playback speed of the element",
      "params": {
        "speed": "Number: speed multiplier for element playback"
      }
    },
    "time": {
      "description": [
        "If no arguments are given, returns the current time of the element. If an argument is given the current time of the element is set to it."
      ],
      "returns": "Number: current time (in seconds)",
      "params": {
        "time": "Number: time to jump to (in seconds)"
      }
    },
    "duration": {
      "description": ["Returns the duration of the HTML5 media element."],
      "returns": "Number: duration"
    },
    "onended": {
      "description": [
        "Schedule an event to be called when the audio or video element reaches the end. If the element is looping, this will not be called. The element is passed in as the argument to the onended callback."
      ],
      "params": {
        "callback": "Function: function to call when the  soundfile has ended. The  media element will be passed  in as the argument to the  callback."
      }
    },
    "connect": {
      "description": [
        "Send the audio output of this element to a specified audioNode or p5.sound object. If no element is provided, connects to p5's main output. That connection is established when this method is first called. All connections are removed by the .disconnect() method.",
        "This method is meant to be used with the p5.sound.js addon library."
      ],
      "params": {
        "audioNode": "AudioNode|Object: AudioNode from the Web Audio API, or an object from the p5.sound library"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all Web Audio routing, including to main output. This is useful if you want to re-route the output through audio effects, for example."
      ]
    },
    "showControls": {
      "description": [
        "Show the default MediaElement controls, as determined by the web browser."
      ]
    },
    "hideControls": {
      "description": ["Hide the default mediaElement controls."]
    },
    "addCue": {
      "description": [
        "Schedule events to trigger every time a MediaElement (audio/video) reaches a playback cue point.",
        "Accepts a callback function, a time (in seconds) at which to trigger the callback, and an optional parameter for the callback.",
        "Time will be passed as the first parameter to the callback function, and param will be the second parameter."
      ],
      "returns": "Number: id ID of this cue,  useful for removeCue(id)",
      "params": {
        "time": "Number: Time in seconds, relative to this media  element's playback. For example, to trigger  an event every time playback reaches two  seconds, pass in the number 2. This will be  passed as the first parameter to  the callback function.",
        "callback": "Function: Name of a function that will be  called at the given time. The callback will  receive time and (optionally) param as its  two parameters.",
        "value": "Object: (Optional) An object to be passed as the  second parameter to the  callback function."
      }
    },
    "removeCue": {
      "description": [
        "Remove a callback based on its ID. The ID is returned by the addCue method."
      ],
      "params": {
        "id": "Number: ID of the cue, as returned by addCue"
      }
    },
    "clearCues": {
      "description": [
        "Remove all of the callbacks that had originally been scheduled via the addCue method."
      ],
      "params": {
        "id": "Number: ID of the cue, as returned by addCue"
      }
    }
  },
  "p5.File": {
    "description": [
      "Base class for a file. Used for Element.drop and createFileInput."
    ],
    "params": {
      "file": "File: File that is wrapped"
    },
    "file": {
      "description": [
        "Underlying File object. All normal File methods can be called on this."
      ]
    },
    "type": {
      "description": ["File type (image, text, etc.)"]
    },
    "subtype": {
      "description": [
        "File subtype (usually the file extension jpg, png, xml, etc.)"
      ]
    },
    "name": {
      "description": ["File name"]
    },
    "size": {
      "description": ["File size"]
    },
    "data": {
      "description": [
        "URL string containing either image data, the text contents of the file or a parsed object if file is JSON and p5.XML if XML"
      ]
    }
  },
  "p5.Image": {
    "description": [
      "Creates a new <a href=\"#/p5.Image\">p5.Image</a>. A <a href=\"#/p5.Image\">p5.Image</a> is a canvas backed representation of an image.",
      "p5 can display .gif, .jpg and .png images. Images may be displayed in 2D and 3D space. Before an image is used, it must be loaded with the <a href=\"#/p5/loadImage\">loadImage()</a> function. The <a href=\"#/p5.Image\">p5.Image</a> class contains fields for the width and height of the image, as well as an array called <a href=\"#/p5.Image/pixels\">pixels[]</a> that contains the values for every pixel in the image.",
      "The methods described below allow easy access to the image's pixels and alpha channel and simplify the process of compositing.",
      "Before using the <a href=\"#/p5.Image/pixels\">pixels[]</a> array, be sure to use the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> method on the image to make sure that the pixel data is properly loaded."
    ],
    "params": {
      "width": "Number",
      "height": "Number"
    },
    "width": {
      "description": ["Image width."]
    },
    "height": {
      "description": ["Image height."]
    },
    "pixels": {
      "description": [
        "Array containing the values for all the pixels in the display window. These values are numbers. This array is the size (include an appropriate factor for pixelDensity) of the display window x4, representing the R, G, B, A values in order for each pixel, moving from left to right across each row, then down each column. Retina and other high density displays may have more pixels (by a factor of pixelDensity^2). For example, if the image is 100×100 pixels, there will be 40,000. With pixelDensity = 2, there will be 160,000. The first four values (indices 0-3) in the array will be the R, G, B, A values of the pixel at (0, 0). The second four values (indices 4-7) will contain the R, G, B, A values of the pixel at (1, 0). More generally, to set values for a pixel at (x, y): <pre><code class=\"language-javascript\">let d = pixelDensity(); for (let i = 0; i < d; i++) {  for (let j = 0; j < d; j++) {  // loop over  index = 4 * ((y * d + j) * width * d + (x * d + i));  pixels[index] = r;  pixels[index+1] = g;  pixels[index+2] = b;  pixels[index+3] = a;  } } </code></pre>",
        "Before accessing this array, the data must loaded with the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the <a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes."
      ]
    },
    "loadPixels": {
      "description": [
        "Loads the pixels data for this image into the [pixels] attribute."
      ]
    },
    "updatePixels": {
      "description": [
        "Updates the backing canvas for this image with the contents of the [pixels] array.",
        "If this image is an animated GIF then the pixels will be updated in the frame that is currently displayed."
      ],
      "params": {
        "x": "Integer: x-offset of the target update area for the  underlying canvas",
        "y": "Integer: y-offset of the target update area for the  underlying canvas",
        "w": "Integer: width of the target update area for the  underlying canvas",
        "h": "Integer: height of the target update area for the  underlying canvas"
      }
    },
    "get": {
      "description": [
        "Get a region of pixels from an image.",
        "If no params are passed, the whole image is returned. If x and y are the only params passed a single pixel is extracted. If all params are passed a rectangle region is extracted and a <a href=\"#/p5.Image\">p5.Image</a> is returned."
      ],
      "returns": "p5.Image: the rectangle <a href=\"#/p5.Image\">p5.Image</a>",
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "w": "Number: width",
        "h": "Number: height"
      }
    },
    "set": {
      "description": [
        "Set the color of a single pixel or write an image into this <a href=\"#/p5.Image\">p5.Image</a>.",
        "Note that for a large number of pixels this will be slower than directly manipulating the pixels array and then calling <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>."
      ],
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "a": "Number|Number[]|Object: grayscale value | pixel array |  a <a href=\"#/p5.Color\">p5.Color</a> | image to copy"
      }
    },
    "resize": {
      "description": [
        "Resize the image to a new width and height. To make the image scale proportionally, use 0 as the value for the wide or high parameter. For instance, to make the width of an image 150 pixels, and change the height using the same proportion, use resize(150, 0)."
      ],
      "params": {
        "width": "Number: the resized image width",
        "height": "Number: the resized image height"
      }
    },
    "copy": {
      "description": [
        "Copies a region of pixels from one image to another. If no srcImage is specified this is used as the source. If the source and destination regions aren't the same size, it will automatically resize source pixels to fit the specified target region."
      ],
      "params": {
        "srcImage": "p5.Image|p5.Element: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height"
      }
    },
    "mask": {
      "description": [
        "Masks part of an image from displaying by loading another image and using its alpha channel as an alpha channel for this image. Masks are cumulative, once applied to an image object, they cannot be removed."
      ],
      "params": {
        "srcImage": "p5.Image: source image"
      }
    },
    "filter": {
      "description": [
        "Applies an image filter to a <a href=\"#/p5.Image\">p5.Image</a>",
        "THRESHOLD Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.",
        "GRAY Converts any colors in the image to grayscale equivalents. No parameter is used.",
        "OPAQUE Sets the alpha channel to entirely opaque. No parameter is used.",
        "INVERT Sets each pixel to its inverse value. No parameter is used.",
        "POSTERIZE Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges.",
        "BLUR Executes a Gaussian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Gaussian blur of radius 1. Larger values increase the blur.",
        "ERODE Reduces the light areas. No parameter is used.",
        "DILATE Increases the light areas. No parameter is used.",
        "filter() does not work in WEBGL mode. A similar effect can be achieved in WEBGL mode using custom shaders. Adam Ferriss has written a <a href=\"https://github.com/aferriss/p5jsShaderExamples\" target='_blank'>selection of shader examples</a> that contains many of the effects present in the filter examples."
      ],
      "params": {
        "filterType": "Constant: either THRESHOLD, GRAY, OPAQUE, INVERT,  POSTERIZE, ERODE, DILATE or BLUR.  See Filters.js for docs on  each available filter",
        "filterParam": "Number: (Optional) an optional parameter unique  to each filter, see above"
      }
    },
    "blend": {
      "description": [
        "Copies a region of pixels from one image to another, using a specified blend mode to do the operation."
      ],
      "params": {
        "srcImage": "p5.Image: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height",
        "blendMode": "Constant: the blend mode. either  BLEND, DARKEST, LIGHTEST, DIFFERENCE,  MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,  SOFT_LIGHT, DODGE, BURN, ADD or NORMAL. Available blend modes are: normal | multiply | screen | overlay |  darken | lighten | color-dodge | color-burn | hard-light |  soft-light | difference | exclusion | hue | saturation |  color | luminosity <a href=\"http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\">http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/</a>"
      }
    },
    "save": {
      "description": [
        "Saves the image to a file and force the browser to download it. Accepts two strings for filename and file extension Supports png (default), jpg, and gif  Note that the file will only be downloaded as an animated GIF if the p5.Image was loaded from a GIF file."
      ],
      "params": {
        "filename": "String: give your file a name",
        "extension": "String: 'png' or 'jpg'"
      }
    },
    "reset": {
      "description": ["Starts an animated GIF over at the beginning state."]
    },
    "getCurrentFrame": {
      "description": [
        "Gets the index for the frame that is currently visible in an animated GIF."
      ],
      "returns": "Number: The index for the currently displaying frame in animated GIF"
    },
    "setFrame": {
      "description": [
        "Sets the index of the frame that is currently visible in an animated GIF"
      ],
      "params": {
        "index": "Number: the index for the frame that should be displayed"
      }
    },
    "numFrames": {
      "description": ["Returns the number of frames in an animated GIF"],
      "returns": "Number:"
    },
    "play": {
      "description": [
        "Plays an animated GIF that was paused with <a href=\"#/p5.Image/pause\">pause()</a>"
      ]
    },
    "pause": {
      "description": ["Pauses an animated GIF."]
    },
    "delay": {
      "description": [
        "Changes the delay between frames in an animated GIF. There is an optional second parameter that indicates an index for a specific frame that should have its delay modified. If no index is given, all frames will have the new delay."
      ],
      "params": {
        "d": "Number: the amount in milliseconds to delay between switching frames",
        "index": "Number: (Optional) the index of the frame that should have the new delay value {optional}"
      }
    }
  },
  "p5.PrintWriter": {
    "params": {
      "filename": "String",
      "extension": "String (Optional)"
    },
    "write": {
      "description": ["Writes data to the PrintWriter stream"],
      "params": {
        "data": "Array: all data to be written by the PrintWriter"
      }
    },
    "print": {
      "description": [
        "Writes data to the PrintWriter stream, and adds a new line at the end"
      ],
      "params": {
        "data": "Array: all data to be printed by the PrintWriter"
      }
    },
    "clear": {
      "description": [
        "Clears the data already written to the PrintWriter object"
      ]
    },
    "close": {
      "description": ["Closes the PrintWriter"]
    }
  },
  "p5.Table": {
    "description": [
      "<a href=\"#/p5.Table\">Table</a> objects store data with multiple rows and columns, much like in a traditional spreadsheet. Tables can be generated from scratch, dynamically, or using data from an existing file."
    ],
    "params": {
      "rows": "p5.TableRow[]: (Optional) An array of p5.TableRow objects"
    },
    "columns": {
      "description": [
        "An array containing the names of the columns in the table, if the \"header\" the table is loaded with the \"header\" parameter."
      ]
    },
    "rows": {
      "description": [
        "An array containing the <a href=\"#/p5.Table\">p5.TableRow</a> objects that make up the rows of the table. The same result as calling <a href=\"#/p5/getRows\">getRows()</a>"
      ]
    },
    "addRow": {
      "description": [
        "Use <a href=\"#/p5/addRow\">addRow()</a> to add a new row of data to a <a href=\"#/p5.Table\">p5.Table</a> object. By default, an empty row is created. Typically, you would store a reference to the new row in a TableRow object (see newRow in the example above), and then set individual values using <a href=\"#/p5/set\">set()</a>.",
        "If a <a href=\"#/p5.TableRow\">p5.TableRow</a> object is included as a parameter, then that row is duplicated and added to the table."
      ],
      "returns": "p5.TableRow: the row that was added",
      "params": {
        "row": "p5.TableRow: (Optional) row to be added to the table"
      }
    },
    "removeRow": {
      "description": ["Removes a row from the table object."],
      "params": {
        "id": "Integer: ID number of the row to remove"
      }
    },
    "getRow": {
      "description": [
        "Returns a reference to the specified <a href=\"#/p5.TableRow\">p5.TableRow</a>. The reference can then be used to get and set values of the selected row."
      ],
      "returns": "p5.TableRow: <a href=\"#/p5.TableRow\">p5.TableRow</a> object",
      "params": {
        "rowID": "Integer: ID number of the row to get"
      }
    },
    "getRows": {
      "description": [
        "Gets all rows from the table. Returns an array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s."
      ],
      "returns": "p5.TableRow[]: Array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s"
    },
    "findRow": {
      "description": [
        "Finds the first row in the Table that contains the value provided, and returns a reference to that row. Even if multiple rows are possible matches, only the first matching row is returned. The column to search may be specified by either its ID or title."
      ],
      "returns": "p5.TableRow:",
      "params": {
        "value": "String: The value to match",
        "column": "Integer|String: ID number or title of the  column to search"
      }
    },
    "findRows": {
      "description": [
        "Finds the rows in the Table that contain the value provided, and returns references to those rows. Returns an Array, so for must be used to iterate through all the rows, as shown in the example above. The column to search may be specified by either its ID or title."
      ],
      "returns": "p5.TableRow[]: An Array of TableRow objects",
      "params": {
        "value": "String: The value to match",
        "column": "Integer|String: ID number or title of the  column to search"
      }
    },
    "matchRow": {
      "description": [
        "Finds the first row in the Table that matches the regular expression provided, and returns a reference to that row. Even if multiple rows are possible matches, only the first matching row is returned. The column to search may be specified by either its ID or title."
      ],
      "returns": "p5.TableRow: TableRow object",
      "params": {
        "regexp": "String|RegExp: The regular expression to match",
        "column": "String|Integer: The column ID (number) or  title (string)"
      }
    },
    "matchRows": {
      "description": [
        "Finds the rows in the Table that match the regular expression provided, and returns references to those rows. Returns an array, so for must be used to iterate through all the rows, as shown in the example. The column to search may be specified by either its ID or title."
      ],
      "returns": "p5.TableRow[]: An Array of TableRow objects",
      "params": {
        "regexp": "String: The regular expression to match",
        "column": "String|Integer: (Optional) The column ID (number) or  title (string)"
      }
    },
    "getColumn": {
      "description": [
        "Retrieves all values in the specified column, and returns them as an array. The column may be specified by either its ID or title."
      ],
      "returns": "Array: Array of column values",
      "params": {
        "column": "String|Number: String or Number of the column to return"
      }
    },
    "clearRows": {
      "description": [
        "Removes all rows from a Table. While all rows are removed, columns and column titles are maintained."
      ]
    },
    "addColumn": {
      "description": [
        "Use <a href=\"#/p5/addColumn\">addColumn()</a> to add a new column to a <a href=\"#/p5.Table\">Table</a> object. Typically, you will want to specify a title, so the column may be easily referenced later by name. (If no title is specified, the new column's title will be null.)"
      ],
      "params": {
        "title": "String: (Optional) title of the given column"
      }
    },
    "getColumnCount": {
      "description": ["Returns the total number of columns in a Table."],
      "returns": "Integer: Number of columns in this table"
    },
    "getRowCount": {
      "description": ["Returns the total number of rows in a Table."],
      "returns": "Integer: Number of rows in this table"
    },
    "removeTokens": {
      "description": [
        "Removes any of the specified characters (or \"tokens\").",
        "If no column is specified, then the values in all columns and rows are processed. A specific column may be referenced by either its ID or title."
      ],
      "params": {
        "chars": "String: String listing characters to be removed",
        "column": "String|Integer: (Optional) Column ID (number)  or name (string)"
      }
    },
    "trim": {
      "description": [
        "Trims leading and trailing whitespace, such as spaces and tabs, from String table values. If no column is specified, then the values in all columns and rows are trimmed. A specific column may be referenced by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: (Optional) Column ID (number)  or name (string)"
      }
    },
    "removeColumn": {
      "description": [
        "Use <a href=\"#/p5/removeColumn\">removeColumn()</a> to remove an existing column from a Table object. The column to be removed may be identified by either its title (a String) or its index value (an int). removeColumn(0) would remove the first column, removeColumn(1) would remove the second column, and so on."
      ],
      "params": {
        "column": "String|Integer: columnName (string) or ID (number)"
      }
    },
    "set": {
      "description": [
        "Stores a value in the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: column ID (Number)  or title (String)",
        "value": "String|Number: value to assign"
      }
    },
    "setNum": {
      "description": [
        "Stores a Float value in the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: column ID (Number)  or title (String)",
        "value": "Number: value to assign"
      }
    },
    "setString": {
      "description": [
        "Stores a String value in the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: column ID (Number)  or title (String)",
        "value": "String: value to assign"
      }
    },
    "get": {
      "description": [
        "Retrieves a value from the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "returns": "String|Number:",
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getNum": {
      "description": [
        "Retrieves a Float value from the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "returns": "Number:",
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getString": {
      "description": [
        "Retrieves a String value from the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "returns": "String:",
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getObject": {
      "description": [
        "Retrieves all table data and returns as an object. If a column name is passed in, each row object will be stored with that attribute as its title."
      ],
      "returns": "Object:",
      "params": {
        "headerColumn": "String: (Optional) Name of the column which should be used to  title each row object (optional)"
      }
    },
    "getArray": {
      "description": [
        "Retrieves all table data and returns it as a multidimensional array."
      ],
      "returns": "Array:"
    }
  },
  "p5.TableRow": {
    "description": [
      "A TableRow object represents a single row of data values, stored in columns, from a table.",
      "A Table Row contains both an ordered array, and an unordered JSON object."
    ],
    "params": {
      "str": "String: (Optional) optional: populate the row with a  string of values, separated by the  separator",
      "separator": "String: (Optional) comma separated values (csv) by default"
    },
    "set": {
      "description": [
        "Stores a value in the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: Column ID (Number)  or Title (String)",
        "value": "String|Number: The value to be stored"
      }
    },
    "setNum": {
      "description": [
        "Stores a Float value in the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: Column ID (Number)  or Title (String)",
        "value": "Number|String: The value to be stored  as a Float"
      }
    },
    "setString": {
      "description": [
        "Stores a String value in the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: Column ID (Number)  or Title (String)",
        "value": "String|Number|Boolean|Object: The value to be stored  as a String"
      }
    },
    "get": {
      "description": [
        "Retrieves a value from the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "returns": "String|Number:",
      "params": {
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getNum": {
      "description": [
        "Retrieves a Float value from the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "returns": "Number: Float Floating point number",
      "params": {
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getString": {
      "description": [
        "Retrieves an String value from the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "returns": "String: String",
      "params": {
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    }
  },
  "p5.XML": {
    "description": [
      "XML is a representation of an XML object, able to parse XML code. Use <a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files and create XML objects."
    ],
    "getParent": {
      "description": [
        "Gets a copy of the element's parent. Returns the parent as another <a href=\"#/p5.XML\">p5.XML</a> object."
      ],
      "returns": "p5.XML: element parent"
    },
    "getName": {
      "description": [
        "Gets the element's full name, which is returned as a String."
      ],
      "returns": "String: the name of the node"
    },
    "setName": {
      "description": [
        "Sets the element's name, which is specified as a String."
      ],
      "params": {
        "the": "String: new name of the node"
      }
    },
    "hasChildren": {
      "description": [
        "Checks whether or not the element has any children, and returns the result as a boolean."
      ],
      "returns": "Boolean:"
    },
    "listChildren": {
      "description": [
        "Get the names of all of the element's children, and returns the names as an array of Strings. This is the same as looping through and calling <a href=\"#/p5.XML/getName\">getName()</a> on each child element individually."
      ],
      "returns": "String[]: names of the children of the element"
    },
    "getChildren": {
      "description": [
        "Returns all of the element's children as an array of <a href=\"#/p5.XML\">p5.XML</a> objects. When the name parameter is specified, then it will return all children that match that name."
      ],
      "returns": "p5.XML[]: children of the element",
      "params": {
        "name": "String: (Optional) element name"
      }
    },
    "getChild": {
      "description": [
        "Returns the first of the element's children that matches the name parameter or the child of the given index.It returns undefined if no matching child is found."
      ],
      "returns": "p5.XML:",
      "params": {
        "name": "String|Integer: element name or index"
      }
    },
    "addChild": {
      "description": [
        "Appends a new child to the element. The child can be specified with either a String, which will be used as the new tag's name, or as a reference to an existing <a href=\"#/p5.XML\">p5.XML</a> object. A reference to the newly created child is returned as an <a href=\"#/p5.XML\">p5.XML</a> object."
      ],
      "params": {
        "node": "p5.XML: a <a href=\"#/p5.XML\">p5.XML</a> Object which will be the child to be added"
      }
    },
    "removeChild": {
      "description": ["Removes the element specified by name or index."],
      "params": {
        "name": "String|Integer: element name or index"
      }
    },
    "getAttributeCount": {
      "description": [
        "Counts the specified element's number of attributes, returned as an Number."
      ],
      "returns": "Integer:"
    },
    "listAttributes": {
      "description": [
        "Gets all of the specified element's attributes, and returns them as an array of Strings."
      ],
      "returns": "String[]: an array of strings containing the names of attributes"
    },
    "hasAttribute": {
      "description": [
        "Checks whether or not an element has the specified attribute."
      ],
      "returns": "Boolean: true if attribute found else false",
      "params": {
        "the": "String: attribute to be checked"
      }
    },
    "getNum": {
      "description": [
        "Returns an attribute value of the element as an Number. If the defaultValue parameter is specified and the attribute doesn't exist, then defaultValue is returned. If no defaultValue is specified and the attribute doesn't exist, the value 0 is returned."
      ],
      "returns": "Number:",
      "params": {
        "name": "String: the non-null full name of the attribute",
        "defaultValue": "Number: (Optional) the default value of the attribute"
      }
    },
    "getString": {
      "description": [
        "Returns an attribute value of the element as an String. If the defaultValue parameter is specified and the attribute doesn't exist, then defaultValue is returned. If no defaultValue is specified and the attribute doesn't exist, null is returned."
      ],
      "returns": "String:",
      "params": {
        "name": "String: the non-null full name of the attribute",
        "defaultValue": "Number: (Optional) the default value of the attribute"
      }
    },
    "setAttribute": {
      "description": [
        "Sets the content of an element's attribute. The first parameter specifies the attribute name, while the second specifies the new content."
      ],
      "params": {
        "name": "String: the full name of the attribute",
        "value": "Number|String|Boolean: the value of the attribute"
      }
    },
    "getContent": {
      "description": [
        "Returns the content of an element. If there is no such content, defaultValue is returned if specified, otherwise null is returned."
      ],
      "returns": "String:",
      "params": {
        "defaultValue": "String: (Optional) value returned if no content is found"
      }
    },
    "setContent": {
      "description": ["Sets the element's content."],
      "params": {
        "text": "String: the new content"
      }
    },
    "serialize": {
      "description": [
        "Serializes the element into a string. This function is useful for preparing the content to be sent over a http request or saved to file."
      ],
      "returns": "String: Serialized string of the element"
    }
  },
  "p5.Vector": {
    "description": [
      "A class to describe a two or three-dimensional vector, specifically a Euclidean (also known as geometric) vector. A vector is an entity that has both magnitude and direction. The datatype, however, stores the components of the vector (<code>x</code>, <code>y</code> for 2D; or <code>x</code>, <code>y</code>, <code>z</code> for 3D). The magnitude and direction can be accessed via the methods <a href=\"#/p5.Vector/mag\">p5.Vector.mag()</a> and <a href=\"#/p5.Vector/heading\">heading()</a>.",
      "In many of the p5.js examples, you will see <a href=\"#/p5.Vector\">p5.Vector</a> used to describe a position, velocity, or acceleration. For example, if you consider a rectangle moving across the screen, at any given instant it has a position (a vector that points from the origin to its location), a velocity (the rate at which the object's position changes per time unit, expressed as a vector), and acceleration (the rate at which the object's velocity changes per time unit, expressed as a vector).",
      "Since vectors represent groupings of values, we cannot simply use traditional addition/multiplication/etc. Instead, we'll need to do some \"vector\" math, which is made easy by the methods inside the <a href=\"#/p5.Vector\">p5.Vector</a> class."
    ],
    "params": {
      "x": "Number: (Optional) x component of the vector",
      "y": "Number: (Optional) y component of the vector",
      "z": "Number: (Optional) z component of the vector"
    },
    "x": {
      "description": ["The x component of the vector"]
    },
    "y": {
      "description": ["The y component of the vector"]
    },
    "z": {
      "description": ["The z component of the vector"]
    },
    "toString": {
      "description": [
        "Returns a string representation of a vector <code>v</code> by calling <code>String(v)</code> or <code>v.toString()</code>. This method is useful for logging vectors in the console."
      ],
      "returns": "String:"
    },
    "set": {
      "description": [
        "Sets the <code>x</code>, <code>y</code>, and <code>z</code> components of the vector using two or three separate variables, the data from a <a href=\"#/p5.Vector\">p5.Vector</a>, or the values from a float array."
      ],
      "params": {
        "x": "Number: (Optional) The x component of the vector",
        "y": "Number: (Optional) The y component of the vector",
        "z": "Number: (Optional) The z component of the vector",
        "value": "p5.Vector|Number[]: The vector to set"
      }
    },
    "copy": {
      "description": [
        "Gets a copy of the vector, returns a <a href=\"#/p5.Vector\">p5.Vector</a> object."
      ],
      "returns": "p5.Vector: A copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object",
      "params": {
        "v": "p5.Vector: the <a href=\"#/p5.Vector\">p5.Vector</a> to create a copy of"
      }
    },
    "add": {
      "description": [
        "Adds <code>x</code>, <code>y</code>, and <code>z</code> components to a vector, adds one vector to another, or adds two independent vectors together. The version of the method that adds two vectors together is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the others act directly on the vector. Additionally, you may provide arguments to this method as an array. See the examples for more context."
      ],
      "params": {
        "x": "Number: The x component of the vector to be added",
        "y": "Number: (Optional) The y component of the vector to be added",
        "z": "Number: (Optional) The z component of the vector to be added",
        "value": "p5.Vector|Number[]: The vector to add",
        "v1": "p5.Vector: A <a href=\"#/p5.Vector\">p5.Vector</a> to add",
        "v2": "p5.Vector: A <a href=\"#/p5.Vector\">p5.Vector</a> to add",
        "target": "p5.Vector: (Optional) The vector to receive the result"
      }
    },
    "rem": {
      "description": [
        "Gives the remainder of a vector when it is divided by another vector. See examples for more context."
      ],
      "params": {
        "x": "Number: The x component of divisor vector",
        "y": "Number: The y component of divisor vector",
        "z": "Number: The z component of divisor vector",
        "value": "p5.Vector | Number[]: The divisor vector",
        "v1": "p5.Vector: The dividend <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: The divisor <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "sub": {
      "description": [
        "Subtracts <code>x</code>, <code>y</code>, and <code>z</code> components from a vector, subtracts one vector from another, or subtracts two independent vectors. The version of the method that subtracts two vectors is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the others act directly on the vector. Additionally, you may provide arguments to this method as an array. See the examples for more context."
      ],
      "params": {
        "x": "Number: The x component of the vector to subtract",
        "y": "Number: (Optional) The y component of the vector to subtract",
        "z": "Number: (Optional) The z component of the vector to subtract",
        "value": "p5.Vector|Number[]: the vector to subtract",
        "v1": "p5.Vector: A <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from",
        "v2": "p5.Vector: A <a href=\"#/p5.Vector\">p5.Vector</a> to subtract",
        "target": "p5.Vector: (Optional) The vector to receive the result"
      }
    },
    "mult": {
      "description": [
        "Multiplies the vector by a scalar, multiplies the <code>x</code>, <code>y</code>, and <code>z</code> components from a vector, or multiplies the <code>x</code>, <code>y</code>, and <code>z</code> components of two independent vectors. When multiplying a vector by a scalar, the <code>x</code>, <code>y</code>, and <code>z</code> components of the vector are all multiplied by the scalar. When multiplying a vector by a vector, the <code>x</code>, <code>y</code>, <code>z</code> components of both vectors are multiplied by each other (for example, with two vectors <code>a</code> and <code>b</code>: <code>a.x * b.x</code>, <code>a.y * b.y</code>, <code>a.z * b.z</code>). The static version of this method creates a new <a href=\"#/p5.Vector\">p5.Vector</a> while the non-static version acts on the vector directly. Additionally, you may provide arguments to this function as an array. See the examples for more context."
      ],
      "params": {
        "n": "Number: The number to multiply with the vector",
        "x": "Number: The number to multiply with the x component of the vector",
        "y": "Number: The number to multiply with the y component of the vector",
        "z": "Number: (Optional) The number to multiply with the z component of the vector",
        "arr": "Number[]: The array to multiply with the components of the vector",
        "v": "p5.Vector: The vector to multiply with the components of the original vector",
        "target": "p5.Vector: (Optional) the vector to receive the result",
        "v0": "p5.Vector",
        "v1": "p5.Vector"
      }
    },
    "div": {
      "description": [
        "Divides the vector by a scalar, divides a vector by the <code>x</code>, <code>y</code>, and <code>z</code> arguments, or divides the <code>x</code>, <code>y</code>, and <code>z</code> components of two vectors against each other. When dividing a vector by a scalar, the <code>x</code>, <code>y</code>, and <code>z</code> components of the vector are all divided by the scalar. When dividing a vector by a vector, the <code>x</code>, <code>y</code>, <code>z</code> components of the source vector are treated as the dividend, and the <code>x</code>, <code>y</code>, <code>z</code> components of the argument is treated as the divisor. (For example, with two vectors <code>a</code> and <code>b</code>: <code>a.x / b.x</code>, <code>a.y / b.y</code>, <code>a.z / b.z</code>.) If any component of the second vector is 0, a division by 0 error will be logged, unless both two vectors have 0 in their <code>z</code> components, in which case only the <code>x</code> and <code>y</code> components will be divided. The static version of this method creates a new <a href=\"#/p5.Vector\">p5.Vector</a> while the non-static version acts on the vector directly. Additionally, you may provide arguments to this method as an array. See the examples for more context."
      ],
      "params": {
        "n": "Number: The number to divide the vector by",
        "x": "Number: The number to divide with the x component of the vector",
        "y": "Number: The number to divide with the y component of the vector",
        "z": "Number: (Optional) The number to divide with the z component of the vector",
        "arr": "Number[]: The array to divide the components of the vector by",
        "v": "p5.Vector: The vector to divide the components of the original vector by",
        "target": "p5.Vector: (Optional) The vector to receive the result",
        "v0": "p5.Vector",
        "v1": "p5.Vector"
      }
    },
    "mag": {
      "description": [
        "Calculates the magnitude (length) of the vector and returns the result as a float. (This is simply the equation <code>sqrt(x*x + y*y + z*z)</code>.)"
      ],
      "returns": "Number: The magnitude of the vector",
      "params": {
        "vecT": "p5.Vector: The vector to return the magnitude of"
      }
    },
    "magSq": {
      "description": [
        "Calculates the squared magnitude of the vector and returns the result as a float. (This is simply the equation <code>x*x + y*y + z*z</code>.) Faster if the real length is not required in the case of comparing vectors, etc."
      ],
      "returns": "Number: The squared magnitude of the vector",
      "params": {
        "vecT": "p5.Vector: the vector to return the squared magnitude of"
      }
    },
    "dot": {
      "description": [
        "Calculates the dot product of two vectors. The version of the method that computes the dot product of two independent vectors is a static method. See the examples for more context."
      ],
      "returns": "Number: The dot product",
      "params": {
        "x": "Number: The x component of the vector",
        "y": "Number: (Optional) The y component of the vector",
        "z": "Number: (Optional) The z component of the vector",
        "value": "p5.Vector: value component of the vector or a <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v1": "p5.Vector: The first <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: The second <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "cross": {
      "description": [
        "Calculates and returns a vector composed of the cross product between two vectors. Both the static and non-static methods return a new <a href=\"#/p5.Vector\">p5.Vector</a>. See the examples for more context."
      ],
      "returns": "p5.Vector: <a href=\"#/p5.Vector\">p5.Vector</a> composed of cross product",
      "params": {
        "v": "p5.Vector: <a href=\"#/p5.Vector\">p5.Vector</a> to be crossed",
        "v1": "p5.Vector: The first <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: The second <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "dist": {
      "description": [
        "Calculates the Euclidean distance between two points (considering a point as a vector object). If you are looking to calculate distance between 2 points see <a href=\"#/p5/dist\">dist()</a>"
      ],
      "returns": "Number: The distance",
      "params": {
        "v": "p5.Vector: The x, y, and z coordinates of a <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v1": "p5.Vector: The first <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: The second <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "normalize": {
      "description": [
        "Normalize the vector to length 1 (make it a unit vector)."
      ],
      "returns": "p5.Vector: The normalized <a href=\"#/p5.Vector\">p5.Vector</a>",
      "params": {
        "v": "p5.Vector: The vector to normalize",
        "target": "p5.Vector: (Optional) The vector to receive the result"
      }
    },
    "limit": {
      "description": [
        "Limit the magnitude of this vector to the value used for the <code>max</code> parameter."
      ],
      "params": {
        "max": "Number: The maximum magnitude for the vector",
        "v": "p5.Vector: the vector to limit",
        "target": "p5.Vector: (Optional) the vector to receive the result (Optional)"
      }
    },
    "setMag": {
      "description": [
        "Set the magnitude of this vector to the value used for the <code>len</code> parameter."
      ],
      "params": {
        "len": "Number: The new length for this vector",
        "v": "p5.Vector: the vector to set the magnitude of",
        "target": "p5.Vector: (Optional) the vector to receive the result (Optional)"
      }
    },
    "heading": {
      "description": [
        "Calculate the angle of rotation for this vector (only 2D vectors). p5.Vectors created using <a href=\"#/p5/createVector\">createVector()</a> will take the current <a href=\"#/p5/angleMode\">angleMode()</a> into consideration, and give the angle in radians or degrees accordingly."
      ],
      "returns": "Number: The angle of rotation",
      "params": {
        "v": "p5.Vector: the vector to find the angle of"
      }
    },
    "setHeading": {
      "description": [
        "Rotate the vector to a specific angle (only 2D vectors); magnitude remains the same."
      ],
      "params": {
        "angle": "Number: The angle of rotation"
      }
    },
    "rotate": {
      "description": [
        "Rotate the vector by an angle (only 2D vectors); magnitude remains the same."
      ],
      "params": {
        "angle": "Number: The angle of rotation",
        "v": "p5.Vector",
        "target": "p5.Vector: (Optional) The vector to receive the result"
      }
    },
    "angleBetween": {
      "description": [
        "Calculates and returns the angle between two vectors. This method will take the current <a href=\"#/p5/angleMode\">angleMode</a> into consideration, and give the angle in radians or degrees accordingly."
      ],
      "returns": "Number: The angle between",
      "params": {
        "value": "p5.Vector: The x, y, and z components of a <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v1": "p5.Vector: the first vector",
        "v2": "p5.Vector: the second vector"
      }
    },
    "lerp": {
      "description": ["Linear interpolate the vector to another vector."],
      "params": {
        "x": "Number: The x component",
        "y": "Number: The y component",
        "z": "Number: The z component",
        "amt": "Number: The amount of interpolation; some value between 0.0  (old vector) and 1.0 (new vector). 0.9 is very near  the new vector. 0.5 is halfway in between.",
        "v": "p5.Vector: The <a href=\"#/p5.Vector\">p5.Vector</a> to lerp to",
        "v1": "p5.Vector",
        "v2": "p5.Vector",
        "target": "p5.Vector: (Optional) The vector to receive the result"
      }
    },
    "reflect": {
      "description": [
        "Reflect a vector about a normal to a line in 2D, or about a normal to a plane in 3D."
      ],
      "params": {
        "surfaceNormal": "p5.Vector: the <a href=\"#/p5.Vector\">p5.Vector</a>  to reflect about.",
        "incidentVector": "p5.Vector: vector to be reflected",
        "target": "p5.Vector: (Optional) the vector to receive the result (Optional)"
      }
    },
    "array": {
      "description": [
        "Return a representation of this vector as a float array. This is only for temporary use. If used in any other fashion, the contents should be copied by using the <b>p5.Vector.<a href=\"#/p5.Vector/copy\">copy()</a></b> method to copy into your own vector."
      ],
      "returns": "Number[]: An Array with the 3 values",
      "params": {
        "v": "p5.Vector: the vector to convert to an array"
      }
    },
    "equals": {
      "description": [
        "Equality check against a <a href=\"#/p5.Vector\">p5.Vector</a>."
      ],
      "returns": "Boolean: Whether the vectors are equal",
      "params": {
        "x": "Number: (Optional) The x component of the vector",
        "y": "Number: (Optional) The y component of the vector",
        "z": "Number: (Optional) The z component of the vector",
        "value": "p5.Vector|Array: The vector to compare",
        "v1": "p5.Vector|Array: the first vector to compare",
        "v2": "p5.Vector|Array: the second vector to compare"
      }
    },
    "fromAngle": {
      "description": ["Make a new 2D vector from an angle."],
      "returns": "p5.Vector: The new <a href=\"#/p5.Vector\">p5.Vector</a> object",
      "params": {
        "angle": "Number: The desired angle, in radians (unaffected by <a href=\"#/p5/angleMode\">angleMode</a>)",
        "length": "Number: (Optional) The length of the new vector (defaults to 1)"
      }
    },
    "fromAngles": {
      "description": [
        "Make a new 3D vector from a pair of ISO spherical angles."
      ],
      "returns": "p5.Vector: A new <a href=\"#/p5.Vector\">p5.Vector</a> object",
      "params": {
        "theta": "Number: The polar angle, in radians (zero is up)",
        "phi": "Number: The azimuthal angle, in radians  (zero is out of the screen)",
        "length": "Number: (Optional) The length of the new vector (defaults to 1)"
      }
    },
    "random2D": {
      "description": ["Make a new 2D unit vector from a random angle."],
      "returns": "p5.Vector: A new <a href=\"#/p5.Vector\">p5.Vector</a> object"
    },
    "random3D": {
      "description": ["Make a new random 3D unit vector."],
      "returns": "p5.Vector: A new <a href=\"#/p5.Vector\">p5.Vector</a> object"
    }
  },
  "p5.Font": {
    "description": ["Base class for font handling"],
    "params": {
      "pInst": "P5: (Optional) pointer to p5 instance"
    },
    "font": {
      "description": ["Underlying opentype font implementation"]
    },
    "textBounds": {
      "description": [
        "Returns a tight bounding box for the given text string using this font"
      ],
      "returns": "Object: a rectangle object with properties: x, y, w, h",
      "params": {
        "line": "String: a line of text",
        "x": "Number: x-position",
        "y": "Number: y-position",
        "fontSize": "Number: (Optional) font size to use (optional) Default is 12.",
        "options": "Object: (Optional) opentype options (optional)  opentype fonts contains alignment and baseline options.  Default is 'LEFT' and 'alphabetic'"
      }
    },
    "textToPoints": {
      "description": [
        "Computes an array of points following the path for specified text"
      ],
      "returns": "Array: an array of points, each with x, y, alpha (the path angle)",
      "params": {
        "txt": "String: a line of text",
        "x": "Number: x-position",
        "y": "Number: y-position",
        "fontSize": "Number: font size to use (optional)",
        "options": "Object: (Optional) an (optional) object that can contain: sampleFactor - the ratio of path-length to number of samples (default=.1); higher values yield more points and are therefore more precise simplifyThreshold - if set to a non-zero value, collinear points will be be removed from the polygon; the value represents the threshold angle to use when determining whether two edges are collinear"
      }
    }
  },
  "p5.Camera": {
    "description": [
      "This class describes a camera for use in p5's <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\"> WebGL mode</a>. It contains camera position, orientation, and projection information necessary for rendering a 3D scene.",
      "New p5.Camera objects can be made through the <a href=\"#/p5/createCamera\">createCamera()</a> function and controlled through the methods described below. A camera created in this way will use a default position in the scene and a default perspective projection until these properties are changed through the various methods available. It is possible to create multiple cameras, in which case the current camera can be set through the <a href=\"#/p5/setCamera\">setCamera()</a> method.",
      "Note: The methods below operate in two coordinate systems: the 'world' coordinate system describe positions in terms of their relationship to the origin along the X, Y and Z axes whereas the camera's 'local' coordinate system describes positions from the camera's point of view: left-right, up-down, and forward-backward. The <a href=\"#/p5.Camera/move\">move()</a> method, for instance, moves the camera along its own axes, whereas the <a href=\"#/p5.Camera/setPosition\">setPosition()</a> method sets the camera's position in world-space.",
      "The camera object propreties <code>eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ</code> which describes camera position, orientation, and projection are also accessible via the camera object generated using <a href=\"#/p5/createCamera\">createCamera()</a>"
    ],
    "params": {
      "rendererGL": "RendererGL: instance of WebGL renderer"
    },
    "eyeX": {
      "description": ["camera position value on x axis"]
    },
    "eyeY": {
      "description": ["camera position value on y axis"]
    },
    "eyeZ": {
      "description": ["camera position value on z axis"]
    },
    "centerX": {
      "description": ["x coordinate representing center of the sketch"]
    },
    "centerY": {
      "description": ["y coordinate representing center of the sketch"]
    },
    "centerZ": {
      "description": ["z coordinate representing center of the sketch"]
    },
    "upX": {
      "description": ["x component of direction 'up' from camera"]
    },
    "upY": {
      "description": ["y component of direction 'up' from camera"]
    },
    "upZ": {
      "description": ["z component of direction 'up' from camera"]
    },
    "perspective": {
      "description": [
        "Sets a perspective projection. Accepts the same parameters as the global <a href=\"#/p5/perspective\">perspective()</a>. More information on this function can be found there."
      ]
    },
    "ortho": {
      "description": [
        "Sets an orthographic projection. Accepts the same parameters as the global <a href=\"#/p5/ortho\">ortho()</a>. More information on this function can be found there."
      ]
    },
    "frustum": {
      "description": [
        "Sets the camera's frustum. Accepts the same parameters as the global <a href=\"#/p5/frustum\">frustum()</a>. More information on this function can be found there."
      ]
    },
    "pan": {
      "description": ["Panning rotates the camera view to the left and right."],
      "params": {
        "angle": "Number: amount to rotate camera in current <a href=\"#/p5/angleMode\">angleMode</a> units. Greater than 0 values rotate counterclockwise (to the left)."
      }
    },
    "tilt": {
      "description": ["Tilting rotates the camera view up and down."],
      "params": {
        "angle": "Number: amount to rotate camera in current <a href=\"#/p5/angleMode\">angleMode</a> units. Greater than 0 values rotate counterclockwise (to the left)."
      }
    },
    "lookAt": {
      "description": [
        "Reorients the camera to look at a position in world space."
      ],
      "params": {
        "x": "Number: x position of a point in world space",
        "y": "Number: y position of a point in world space",
        "z": "Number: z position of a point in world space"
      }
    },
    "camera": {
      "description": [
        "Sets the camera's position and orientation. Accepts the same parameters as the global <a href=\"#/p5/camera\">camera()</a>. More information on this function can be found there."
      ]
    },
    "move": {
      "description": [
        "Move camera along its local axes while maintaining current camera orientation."
      ],
      "params": {
        "x": "Number: amount to move along camera's left-right axis",
        "y": "Number: amount to move along camera's up-down axis",
        "z": "Number: amount to move along camera's forward-backward axis"
      }
    },
    "setPosition": {
      "description": [
        "Set camera position in world-space while maintaining current camera orientation."
      ],
      "params": {
        "x": "Number: x position of a point in world space",
        "y": "Number: y position of a point in world space",
        "z": "Number: z position of a point in world space"
      }
    }
  },
  "p5.Geometry": {
    "description": ["p5 Geometry class"],
    "params": {
      "detailX": "Integer: (Optional) number of vertices along the x-axis.",
      "detailY": "Integer: (Optional) number of vertices along the y-axis.",
      "callback": "Function: (Optional) function to call upon object instantiation."
    },
    "computeFaces": {
      "description": [
        "computes faces for geometry objects based on the vertices."
      ]
    },
    "computeNormals": {
      "description": [
        "computes smooth normals per vertex as an average of each face."
      ]
    },
    "averageNormals": {
      "description": ["Averages the vertex normals. Used in curved surfaces"]
    },
    "averagePoleNormals": {
      "description": ["Averages pole normals. Used in spherical primitives"]
    },
    "normalize": {
      "description": [
        "Modifies all vertices to be centered within the range -100 to 100."
      ]
    }
  },
  "p5.Shader": {
    "description": ["Shader class for WEBGL Mode"],
    "params": {
      "renderer": "p5.RendererGL: an instance of p5.RendererGL that will provide the GL context for this new p5.Shader",
      "vertSrc": "String: source code for the vertex shader (as a string)",
      "fragSrc": "String: source code for the fragment shader (as a string)"
    },
    "setUniform": {
      "description": [
        "Used to set the uniforms of a <a href=\"#/p5.Shader\">p5.Shader</a> object.",
        "Uniforms are used as a way to provide shader programs (which run on the GPU) with values from a sketch (which runs on the CPU)."
      ],
      "params": {
        "uniformName": "String: the name of the uniform. Must correspond to the name used in the vertex and fragment shaders",
        "data": "Boolean|Number|Number[]|p5.Image|p5.Graphics|p5.MediaElement|p5.Texture: the data to associate with the uniform. The type can be a boolean (true/false), a number, an array of numbers, or an image (p5.Image, p5.Graphics, p5.MediaElement, p5.Texture)"
      }
    }
  },
  "p5.sound": {},
  "p5.SoundFile": {
    "description": [
      "SoundFile object with a path to a file.",
      "The p5.SoundFile may not be available immediately because it loads the file information asynchronously.",
      "To do something with the sound as soon as it loads pass the name of a function as the second parameter.",
      "Only one file path is required. However, audio file formats (i.e. mp3, ogg, wav and m4a/aac) are not supported by all web browsers. If you want to ensure compatability, instead of a single file path, you may include an Array of filepaths, and the browser will choose a format that works."
    ],
    "params": {
      "path": "String|Array: path to a sound file (String). Optionally,  you may include multiple file formats in  an array. Alternately, accepts an object  from the HTML5 File API, or a p5.File.",
      "successCallback": "Function: (Optional) Name of a function to call once file loads",
      "errorCallback": "Function: (Optional) Name of a function to call if file fails to  load. This function will receive an error or  XMLHttpRequest object with information  about what went wrong.",
      "whileLoadingCallback": "Function: (Optional) Name of a function to call while file  is loading. That function will  receive progress of the request to  load the sound file  (between 0 and 1) as its first  parameter. This progress  does not account for the additional  time needed to decode the audio data."
    },
    "isLoaded": {
      "description": [
        "Returns true if the sound file finished loading successfully."
      ],
      "returns": "Boolean:"
    },
    "play": {
      "description": ["Play the p5.SoundFile"],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule playback to start (in seconds from now).",
        "rate": "Number: (Optional) (optional) playback rate",
        "amp": "Number: (Optional) (optional) amplitude (volume)  of playback",
        "cueStart": "Number: (Optional) (optional) cue start time in seconds",
        "duration": "Number: (Optional) (optional) duration of playback in seconds"
      }
    },
    "playMode": {
      "description": [
        "p5.SoundFile has two play modes: <code>restart</code> and <code>sustain</code>. Play Mode determines what happens to a p5.SoundFile if it is triggered while in the middle of playback. In sustain mode, playback will continue simultaneous to the new playback. In restart mode, play() will stop playback and start over. With untilDone, a sound will play only if it's not already playing. Sustain is the default mode."
      ],
      "params": {
        "str": "String: 'restart' or 'sustain' or 'untilDone'"
      }
    },
    "pause": {
      "description": [
        "Pauses a file that is currently playing. If the file is not playing, then nothing will happen.",
        "After pausing, .play() will resume from the paused position. If p5.SoundFile had been set to loop before it was paused, it will continue to loop after it is unpaused with .play()."
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule event to occur  seconds from now"
      }
    },
    "loop": {
      "description": [
        "Loop the p5.SoundFile. Accepts optional parameters to set the playback rate, playback volume, loopStart, loopEnd."
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule event to occur  seconds from now",
        "rate": "Number: (Optional) (optional) playback rate",
        "amp": "Number: (Optional) (optional) playback volume",
        "cueLoopStart": "Number: (Optional) (optional) startTime in seconds",
        "duration": "Number: (Optional) (optional) loop duration in seconds"
      }
    },
    "setLoop": {
      "description": [
        "Set a p5.SoundFile's looping flag to true or false. If the sound is currently playing, this change will take effect when it reaches the end of the current playback."
      ],
      "params": {
        "Boolean": "Boolean: set looping to true or false"
      }
    },
    "isLooping": {
      "description": [
        "Returns 'true' if a p5.SoundFile is currently looping and playing, 'false' if not."
      ],
      "returns": "Boolean:"
    },
    "isPlaying": {
      "description": [
        "Returns true if a p5.SoundFile is playing, false if not (i.e. paused or stopped)."
      ],
      "returns": "Boolean:"
    },
    "isPaused": {
      "description": [
        "Returns true if a p5.SoundFile is paused, false if not (i.e. playing or stopped)."
      ],
      "returns": "Boolean:"
    },
    "stop": {
      "description": ["Stop soundfile playback."],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule event to occur  in seconds from now"
      }
    },
    "pan": {
      "description": [
        "Set the stereo panning of a p5.sound object to a floating point number between -1.0 (left) and 1.0 (right). Default is 0.0 (center)."
      ],
      "params": {
        "panValue": "Number: (Optional) Set the stereo panner",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "getPan": {
      "description": ["Returns the current stereo pan position (-1.0 to 1.0)"],
      "returns": "Number: Returns the stereo pan setting of the Oscillator  as a number between -1.0 (left) and 1.0 (right).  0.0 is center and default."
    },
    "rate": {
      "description": [
        "Set the playback rate of a sound file. Will change the speed and the pitch. Values less than zero will reverse the audio buffer."
      ],
      "params": {
        "playbackRate": "Number: (Optional) Set the playback rate. 1.0 is normal,  .5 is half-speed, 2.0 is twice as fast.  Values less than zero play backwards."
      }
    },
    "setVolume": {
      "description": [
        "Multiply the output volume (amplitude) of a sound file between 0.0 (silence) and 1.0 (full volume). 1.0 is the maximum amplitude of a digital sound, so multiplying by greater than 1.0 may cause digital distortion. To fade, provide a <code>rampTime</code> parameter. For more complex fades, see the Envelope class.",
        "Alternately, you can pass in a signal source such as an oscillator to modulate the amplitude with an audio signal."
      ],
      "params": {
        "volume": "Number|Object: Volume (amplitude) between 0.0  and 1.0 or modulating signal/oscillator",
        "rampTime": "Number: (Optional) Fade for t seconds",
        "timeFromNow": "Number: (Optional) Schedule this event to happen at  t seconds in the future"
      }
    },
    "duration": {
      "description": ["Returns the duration of a sound file in seconds."],
      "returns": "Number: The duration of the soundFile in seconds."
    },
    "currentTime": {
      "description": [
        "Return the current position of the p5.SoundFile playhead, in seconds. Time is relative to the normal buffer direction, so if <code>reverseBuffer</code> has been called, currentTime will count backwards."
      ],
      "returns": "Number: currentTime of the soundFile in seconds."
    },
    "jump": {
      "description": [
        "Move the playhead of a soundfile that is currently playing to a new position and a new duration, in seconds. If none are given, will reset the file to play entire duration from start to finish. To set the position of a soundfile that is not currently playing, use the <code>play</code> or <code>loop</code> methods."
      ],
      "params": {
        "cueTime": "Number: cueTime of the soundFile in seconds.",
        "duration": "Number: duration in seconds."
      }
    },
    "channels": {
      "description": [
        "Return the number of channels in a sound file. For example, Mono = 1, Stereo = 2."
      ],
      "returns": "Number: [channels]"
    },
    "sampleRate": {
      "description": ["Return the sample rate of the sound file."],
      "returns": "Number: [sampleRate]"
    },
    "frames": {
      "description": [
        "Return the number of samples in a sound file. Equal to sampleRate * duration."
      ],
      "returns": "Number: [sampleCount]"
    },
    "getPeaks": {
      "description": [
        "Returns an array of amplitude peaks in a p5.SoundFile that can be used to draw a static waveform. Scans through the p5.SoundFile's audio buffer to find the greatest amplitudes. Accepts one parameter, 'length', which determines size of the array. Larger arrays result in more precise waveform visualizations.",
        "Inspired by Wavesurfer.js."
      ],
      "returns": "Float32Array: Array of peaks.",
      "params": {
        "length": "Number: (Optional) length is the size of the returned array.  Larger length results in more precision.  Defaults to 5*width of the browser window."
      }
    },
    "reverseBuffer": {
      "description": [
        "Reverses the p5.SoundFile's buffer source. Playback must be handled separately (see example)."
      ]
    },
    "onended": {
      "description": [
        "Schedule an event to be called when the soundfile reaches the end of a buffer. If the soundfile is playing through once, this will be called when it ends. If it is looping, it will be called when stop is called."
      ],
      "params": {
        "callback": "Function: function to call when the  soundfile has ended."
      }
    },
    "connect": {
      "description": [
        "Connects the output of a p5sound object to input of another p5.sound object. For example, you may connect a p5.SoundFile to an FFT or an Effect. If no parameter is given, it will connect to the main output. Most p5sound objects connect to the master output when they are created."
      ],
      "params": {
        "object": "Object: (Optional) Audio object that accepts an input"
      }
    },
    "disconnect": {
      "description": ["Disconnects the output of this p5sound object."]
    },
    "setPath": {
      "description": [
        "Reset the source for this SoundFile to a new path (URL)."
      ],
      "params": {
        "path": "String: path to audio file",
        "callback": "Function: Callback"
      }
    },
    "setBuffer": {
      "description": ["Replace the current Audio Buffer with a new Buffer."],
      "params": {
        "buf": "Array: Array of Float32 Array(s). 2 Float32 Arrays  will create a stereo source. 1 will create  a mono source."
      }
    },
    "addCue": {
      "description": [
        "Schedule events to trigger every time a MediaElement (audio/video) reaches a playback cue point.",
        "Accepts a callback function, a time (in seconds) at which to trigger the callback, and an optional parameter for the callback.",
        "Time will be passed as the first parameter to the callback function, and param will be the second parameter."
      ],
      "returns": "Number: id ID of this cue,  useful for removeCue(id)",
      "params": {
        "time": "Number: Time in seconds, relative to this media  element's playback. For example, to trigger  an event every time playback reaches two  seconds, pass in the number 2. This will be  passed as the first parameter to  the callback function.",
        "callback": "Function: Name of a function that will be  called at the given time. The callback will  receive time and (optionally) param as its  two parameters.",
        "value": "Object: (Optional) An object to be passed as the  second parameter to the  callback function."
      }
    },
    "removeCue": {
      "description": [
        "Remove a callback based on its ID. The ID is returned by the addCue method."
      ],
      "params": {
        "id": "Number: ID of the cue, as returned by addCue"
      }
    },
    "clearCues": {
      "description": [
        "Remove all of the callbacks that had originally been scheduled via the addCue method."
      ]
    },
    "save": {
      "description": [
        "Save a p5.SoundFile as a .wav file. The browser will prompt the user to download the file to their device. To upload a file to a server, see <a href=\"/reference/#/p5.SoundFile/getBlob\">getBlob</a>"
      ],
      "params": {
        "fileName": "String: (Optional) name of the resulting .wav file."
      }
    },
    "getBlob": {
      "description": [
        "This method is useful for sending a SoundFile to a server. It returns the .wav-encoded audio data as a \"<a target=\"_blank\" title=\"Blob reference at MDN\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob\">Blob</a>\". A Blob is a file-like data object that can be uploaded to a server with an <a href=\"/reference/#/p5/httpDo\">http</a> request. We'll use the <code>httpDo</code> options object to send a POST request with some specific options: we encode the request as <code>multipart/form-data</code>, and attach the blob as one of the form values using <code>FormData</code>."
      ],
      "returns": "Blob: A file-like data object"
    }
  },
  "p5.Amplitude": {
    "description": [
      "Amplitude measures volume between 0.0 and 1.0. Listens to all p5sound by default, or use setInput() to listen to a specific sound source. Accepts an optional smoothing value, which defaults to 0."
    ],
    "params": {
      "smoothing": "Number: (Optional) between 0.0 and .999 to smooth  amplitude readings (defaults to 0)"
    },
    "setInput": {
      "description": [
        "Connects to the p5sound instance (main output) by default. Optionally, you can pass in a specific source (i.e. a soundfile)."
      ],
      "params": {
        "snd": "SoundObject|undefined: (Optional) set the sound source  (optional, defaults to  main output)",
        "smoothing": "Number|undefined: (Optional) a range between 0.0 and 1.0  to smooth amplitude readings"
      }
    },
    "getLevel": {
      "description": [
        "Returns a single Amplitude reading at the moment it is called. For continuous readings, run in the draw loop."
      ],
      "returns": "Number: Amplitude as a number between 0.0 and 1.0",
      "params": {
        "channel": "Number: (Optional) Optionally return only channel 0 (left) or 1 (right)"
      }
    },
    "toggleNormalize": {
      "description": [
        "Determines whether the results of Amplitude.process() will be Normalized. To normalize, Amplitude finds the difference the loudest reading it has processed and the maximum amplitude of 1.0. Amplitude adds this difference to all values to produce results that will reliably map between 0.0 and 1.0. However, if a louder moment occurs, the amount that Normalize adds to all the values will change. Accepts an optional boolean parameter (true or false). Normalizing is off by default."
      ],
      "params": {
        "boolean": "Boolean: (Optional) set normalize to true (1) or false (0)"
      }
    },
    "smooth": {
      "description": [
        "Smooth Amplitude analysis by averaging with the last analysis frame. Off by default."
      ],
      "params": {
        "set": "Number: smoothing from 0.0 <= 1"
      }
    }
  },
  "p5.FFT": {
    "description": [
      "FFT (Fast Fourier Transform) is an analysis algorithm that isolates individual <a href=\"https://en.wikipedia.org/wiki/Audio_frequency\"> audio frequencies</a> within a waveform.",
      "Once instantiated, a p5.FFT object can return an array based on two types of analyses: • <code>FFT.waveform()</code> computes amplitude values along the time domain. The array indices correspond to samples across a brief moment in time. Each value represents amplitude of the waveform at that sample of time. • <code>FFT.analyze() </code> computes amplitude values along the frequency domain. The array indices correspond to frequencies (i.e. pitches), from the lowest to the highest that humans can hear. Each value represents amplitude at that slice of the frequency spectrum. Use with <code>getEnergy()</code> to measure amplitude at specific frequencies, or within a range of frequencies.",
      "FFT analyzes a very short snapshot of sound called a sample buffer. It returns an array of amplitude measurements, referred to as <code>bins</code>. The array is 1024 bins long by default. You can change the bin array length, but it must be a power of 2 between 16 and 1024 in order for the FFT algorithm to function correctly. The actual size of the FFT buffer is twice the number of bins, so given a standard sample rate, the buffer is 2048/44100 seconds long."
    ],
    "params": {
      "smoothing": "Number: (Optional) Smooth results of Freq Spectrum.  0.0 < smoothing < 1.0.  Defaults to 0.8.",
      "bins": "Number: (Optional) Length of resulting array.  Must be a power of two between  16 and 1024. Defaults to 1024."
    },
    "setInput": {
      "description": [
        "Set the input source for the FFT analysis. If no source is provided, FFT will analyze all sound in the sketch."
      ],
      "params": {
        "source": "Object: (Optional) p5.sound object (or web audio API source node)"
      }
    },
    "waveform": {
      "description": [
        "Returns an array of amplitude values (between -1.0 and +1.0) that represent a snapshot of amplitude readings in a single buffer. Length will be equal to bins (defaults to 1024). Can be used to draw the waveform of a sound."
      ],
      "returns": "Array: Array Array of amplitude values (-1 to 1)  over time. Array length = bins.",
      "params": {
        "bins": "Number: (Optional) Must be a power of two between  16 and 1024. Defaults to 1024.",
        "precision": "String: (Optional) If any value is provided, will return results  in a Float32 Array which is more precise  than a regular array."
      }
    },
    "analyze": {
      "description": [
        "Returns an array of amplitude values (between 0 and 255) across the frequency spectrum. Length is equal to FFT bins (1024 by default). The array indices correspond to frequencies (i.e. pitches), from the lowest to the highest that humans can hear. Each value represents amplitude at that slice of the frequency spectrum. Must be called prior to using <code>getEnergy()</code>."
      ],
      "returns": "Array: spectrum Array of energy (amplitude/volume)  values across the frequency spectrum.  Lowest energy (silence) = 0, highest  possible is 255.",
      "params": {
        "bins": "Number: (Optional) Must be a power of two between  16 and 1024. Defaults to 1024.",
        "scale": "Number: (Optional) If \"dB,\" returns decibel  float measurements between  -140 and 0 (max).  Otherwise returns integers from 0-255."
      }
    },
    "getEnergy": {
      "description": [
        "Returns the amount of energy (volume) at a specific <a href=\"https://en.wikipedia.org/wiki/Audio_frequency\" target=\"_blank\"> frequency</a>, or the average amount of energy between two frequencies. Accepts Number(s) corresponding to frequency (in Hz), or a \"string\" corresponding to predefined frequency ranges (\"bass\", \"lowMid\", \"mid\", \"highMid\", \"treble\"). Returns a range between 0 (no energy/volume at that frequency) and 255 (maximum energy). <em>NOTE: analyze() must be called prior to getEnergy(). analyze() tells the FFT to analyze frequency data, and getEnergy() uses the results to determine the value at a specific frequency or range of frequencies.</em>"
      ],
      "returns": "Number: Energy Energy (volume/amplitude) from  0 and 255.",
      "params": {
        "frequency1": "Number|String: Will return a value representing  energy at this frequency. Alternately,  the strings \"bass\", \"lowMid\" \"mid\",  \"highMid\", and \"treble\" will return  predefined frequency ranges.",
        "frequency2": "Number: (Optional) If a second frequency is given,  will return average amount of  energy that exists between the  two frequencies."
      }
    },
    "getCentroid": {
      "description": [
        "Returns the <a href=\"http://en.wikipedia.org/wiki/Spectral_centroid\" target=\"_blank\"> spectral centroid</a> of the input signal. <em>NOTE: analyze() must be called prior to getCentroid(). Analyze() tells the FFT to analyze frequency data, and getCentroid() uses the results determine the spectral centroid.</em>"
      ],
      "returns": "Number: Spectral Centroid Frequency of the spectral centroid in Hz."
    },
    "smooth": {
      "description": [
        "Smooth FFT analysis by averaging with the last analysis frame."
      ],
      "params": {
        "smoothing": "Number: 0.0 < smoothing < 1.0.  Defaults to 0.8."
      }
    },
    "linAverages": {
      "description": [
        "Returns an array of average amplitude values for a given number of frequency bands split equally. N defaults to 16. <em>NOTE: analyze() must be called prior to linAverages(). Analyze() tells the FFT to analyze frequency data, and linAverages() uses the results to group them into a smaller set of averages.</em>"
      ],
      "returns": "Array: linearAverages Array of average amplitude values for each group",
      "params": {
        "N": "Number: Number of returned frequency groups"
      }
    },
    "logAverages": {
      "description": [
        "Returns an array of average amplitude values of the spectrum, for a given set of <a href=\"https://en.wikipedia.org/wiki/Octave_band\" target=\"_blank\"> Octave Bands</a> <em>NOTE: analyze() must be called prior to logAverages(). Analyze() tells the FFT to analyze frequency data, and logAverages() uses the results to group them into a smaller set of averages.</em>"
      ],
      "returns": "Array: logAverages Array of average amplitude values for each group",
      "params": {
        "octaveBands": "Array: Array of Octave Bands objects for grouping"
      }
    },
    "getOctaveBands": {
      "description": [
        "Calculates and Returns the 1/N <a href=\"https://en.wikipedia.org/wiki/Octave_band\" target=\"_blank\">Octave Bands</a> N defaults to 3 and minimum central frequency to 15.625Hz. (1/3 Octave Bands ~= 31 Frequency Bands) Setting fCtr0 to a central value of a higher octave will ignore the lower bands and produce less frequency groups."
      ],
      "returns": "Array: octaveBands Array of octave band objects with their bounds",
      "params": {
        "N": "Number: Specifies the 1/N type of generated octave bands",
        "fCtr0": "Number: Minimum central frequency for the lowest band"
      }
    }
  },
  "p5.Oscillator": {
    "description": [
      "Creates a signal that oscillates between -1.0 and 1.0. By default, the oscillation takes the form of a sinusoidal shape ('sine'). Additional types include 'triangle', 'sawtooth' and 'square'. The frequency defaults to 440 oscillations per second (440Hz, equal to the pitch of an 'A' note).",
      "Set the type of oscillation with setType(), or by instantiating a specific oscillator: <a href=\"/reference/#/p5.SinOsc\">p5.SinOsc</a>, <a href=\"/reference/#/p5.TriOsc\">p5.TriOsc</a>, <a href=\"/reference/#/p5.SqrOsc\">p5.SqrOsc</a>, or <a href=\"/reference/#/p5.SawOsc\">p5.SawOsc</a>."
    ],
    "params": {
      "freq": "Number: (Optional) frequency defaults to 440Hz",
      "type": "String: (Optional) type of oscillator. Options:  'sine' (default), 'triangle',  'sawtooth', 'square'"
    },
    "start": {
      "description": [
        "Start an oscillator.",
        "Starting an oscillator on a user gesture will enable audio in browsers that have a strict autoplay policy, including Chrome and most mobile devices. See also: <code>userStartAudio()</code>."
      ],
      "params": {
        "time": "Number: (Optional) startTime in seconds from now.",
        "frequency": "Number: (Optional) frequency in Hz."
      }
    },
    "stop": {
      "description": [
        "Stop an oscillator. Accepts an optional parameter to determine how long (in seconds from now) until the oscillator stops."
      ],
      "params": {
        "secondsFromNow": "Number: Time, in seconds from now."
      }
    },
    "amp": {
      "description": [
        "Set the amplitude between 0 and 1.0. Or, pass in an object such as an oscillator to modulate amplitude with an audio signal."
      ],
      "returns": "AudioParam: gain If no value is provided,  returns the Web Audio API  AudioParam that controls  this oscillator's  gain/amplitude/volume)",
      "params": {
        "vol": "Number|Object: between 0 and 1.0  or a modulating signal/oscillator",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "getAmp": {
      "description": ["Returns the value of output gain"],
      "returns": "Number: Amplitude value between 0.0 and 1.0"
    },
    "freq": {
      "description": [
        "Set frequency of an oscillator to a value. Or, pass in an object such as an oscillator to modulate the frequency with an audio signal."
      ],
      "returns": "AudioParam: Frequency If no value is provided,  returns the Web Audio API  AudioParam that controls  this oscillator's frequency",
      "params": {
        "Frequency": "Number|Object: Frequency in Hz  or modulating signal/oscillator",
        "rampTime": "Number: (Optional) Ramp time (in seconds)",
        "timeFromNow": "Number: (Optional) Schedule this event to happen  at x seconds from now"
      }
    },
    "getFreq": {
      "description": ["Returns the value of frequency of oscillator"],
      "returns": "Number: Frequency of oscillator in Hertz"
    },
    "setType": {
      "description": [
        "Set type to 'sine', 'triangle', 'sawtooth' or 'square'."
      ],
      "params": {
        "type": "String: 'sine', 'triangle', 'sawtooth' or 'square'."
      }
    },
    "getType": {
      "description": [
        "Returns current type of oscillator eg. 'sine', 'triangle', 'sawtooth' or 'square'."
      ],
      "returns": "String: type of oscillator eg . 'sine', 'triangle', 'sawtooth' or 'square'."
    },
    "connect": {
      "description": ["Connect to a p5.sound / Web Audio object."],
      "params": {
        "unit": "Object: A p5.sound or Web Audio object"
      }
    },
    "disconnect": {
      "description": ["Disconnect all outputs"]
    },
    "pan": {
      "description": ["Pan between Left (-1) and Right (1)"],
      "params": {
        "panning": "Number: Number between -1 and 1",
        "timeFromNow": "Number: schedule this event to happen  seconds from now"
      }
    },
    "getPan": {
      "description": [
        "Returns the current value of panPosition , between Left (-1) and Right (1)"
      ],
      "returns": "Number: panPosition of oscillator , between Left (-1) and Right (1)"
    },
    "phase": {
      "description": [
        "Set the phase of an oscillator between 0.0 and 1.0. In this implementation, phase is a delay time based on the oscillator's current frequency."
      ],
      "params": {
        "phase": "Number: float between 0.0 and 1.0"
      }
    },
    "add": {
      "description": [
        "Add a value to the p5.Oscillator's output amplitude, and return the oscillator. Calling this method again will override the initial add() with a new value."
      ],
      "returns": "p5.Oscillator: Oscillator Returns this oscillator  with scaled output",
      "params": {
        "number": "Number: Constant number to add"
      }
    },
    "mult": {
      "description": [
        "Multiply the p5.Oscillator's output amplitude by a fixed value (i.e. turn it up!). Calling this method again will override the initial mult() with a new value."
      ],
      "returns": "p5.Oscillator: Oscillator Returns this oscillator  with multiplied output",
      "params": {
        "number": "Number: Constant number to multiply"
      }
    },
    "scale": {
      "description": [
        "Scale this oscillator's amplitude values to a given range, and return the oscillator. Calling this method again will override the initial scale() with new values."
      ],
      "returns": "p5.Oscillator: Oscillator Returns this oscillator  with scaled output",
      "params": {
        "inMin": "Number: input range minumum",
        "inMax": "Number: input range maximum",
        "outMin": "Number: input range minumum",
        "outMax": "Number: input range maximum"
      }
    }
  },
  "p5.SinOsc": {
    "description": [
      "Constructor: <code>new p5.SinOsc()</code>. This creates a Sine Wave Oscillator and is equivalent to <code> new p5.Oscillator('sine') </code> or creating a p5.Oscillator and then calling its method <code>setType('sine')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.TriOsc": {
    "description": [
      "Constructor: <code>new p5.TriOsc()</code>. This creates a Triangle Wave Oscillator and is equivalent to <code>new p5.Oscillator('triangle') </code> or creating a p5.Oscillator and then calling its method <code>setType('triangle')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.SawOsc": {
    "description": [
      "Constructor: <code>new p5.SawOsc()</code>. This creates a SawTooth Wave Oscillator and is equivalent to <code> new p5.Oscillator('sawtooth') </code> or creating a p5.Oscillator and then calling its method <code>setType('sawtooth')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.SqrOsc": {
    "description": [
      "Constructor: <code>new p5.SqrOsc()</code>. This creates a Square Wave Oscillator and is equivalent to <code> new p5.Oscillator('square') </code> or creating a p5.Oscillator and then calling its method <code>setType('square')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.Envelope": {
    "description": [
      "Envelopes are pre-defined amplitude distribution over time. Typically, envelopes are used to control the output volume of an object, a series of fades referred to as Attack, Decay, Sustain and Release ( <a href=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">ADSR</a> ). Envelopes can also control other Web Audio Parameters—for example, a p5.Envelope can control an Oscillator's frequency like this: <code>osc.freq(env)</code>.",
      "Use <code><a href=\"#/p5.Envelope/setRange\">setRange</a></code> to change the attack/release level. Use <code><a href=\"#/p5.Envelope/setADSR\">setADSR</a></code> to change attackTime, decayTime, sustainPercent and releaseTime.",
      "Use the <code><a href=\"#/p5.Envelope/play\">play</a></code> method to play the entire envelope, the <code><a href=\"#/p5.Envelope/ramp\">ramp</a></code> method for a pingable trigger, or <code><a href=\"#/p5.Envelope/triggerAttack\">triggerAttack</a></code>/ <code><a href=\"#/p5.Envelope/triggerRelease\">triggerRelease</a></code> to trigger noteOn/noteOff."
    ],
    "attackTime": {
      "description": ["Time until envelope reaches attackLevel"]
    },
    "attackLevel": {
      "description": ["Level once attack is complete."]
    },
    "decayTime": {
      "description": ["Time until envelope reaches decayLevel."]
    },
    "decayLevel": {
      "description": [
        "Level after decay. The envelope will sustain here until it is released."
      ]
    },
    "releaseTime": {
      "description": ["Duration of the release portion of the envelope."]
    },
    "releaseLevel": {
      "description": ["Level at the end of the release."]
    },
    "set": {
      "description": ["Reset the envelope with a series of time/value pairs."],
      "params": {
        "attackTime": "Number: Time (in seconds) before level  reaches attackLevel",
        "attackLevel": "Number: Typically an amplitude between  0.0 and 1.0",
        "decayTime": "Number: Time",
        "decayLevel": "Number: Amplitude (In a standard ADSR envelope,  decayLevel = sustainLevel)",
        "releaseTime": "Number: Release Time (in seconds)",
        "releaseLevel": "Number: Amplitude"
      }
    },
    "setADSR": {
      "description": [
        "Set values like a traditional <a href=\"https://en.wikipedia.org/wiki/Synthesizer#/media/File:ADSR_parameter.svg\"> ADSR envelope </a>."
      ],
      "params": {
        "attackTime": "Number: Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "setRange": {
      "description": [
        "Set max (attackLevel) and min (releaseLevel) of envelope."
      ],
      "params": {
        "aLevel": "Number: attack level (defaults to 1)",
        "rLevel": "Number: release level (defaults to 0)"
      }
    },
    "setInput": {
      "description": [
        "Assign a parameter to be controlled by this envelope. If a p5.Sound object is given, then the p5.Envelope will control its output gain. If multiple inputs are provided, the env will control all of them."
      ],
      "params": {
        "inputs": "Object: (Optional) A p5.sound object or  Web Audio Param."
      }
    },
    "setExp": {
      "description": [
        "Set whether the envelope ramp is linear (default) or exponential. Exponential ramps can be useful because we perceive amplitude and frequency logarithmically."
      ],
      "params": {
        "isExp": "Boolean: true is exponential, false is linear"
      }
    },
    "play": {
      "description": [
        "Play tells the envelope to start acting on a given input. If the input is a p5.sound object (i.e. AudioIn, Oscillator, SoundFile), then Envelope will control its output volume. Envelopes can also be used to control any <a href=\" http://docs.webplatform.org/wiki/apis/webaudio/AudioParam\"> Web Audio Audio Param.</a>"
      ],
      "params": {
        "unit": "Object: A p5.sound object or  Web Audio Param.",
        "startTime": "Number: (Optional) time from now (in seconds) at which to play",
        "sustainTime": "Number: (Optional) time to sustain before releasing the envelope"
      }
    },
    "triggerAttack": {
      "description": [
        "Trigger the Attack, and Decay portion of the Envelope. Similar to holding down a key on a piano, but it will hold the sustain level until you let go. Input can be any p5.sound object, or a <a href=\" http://docs.webplatform.org/wiki/apis/webaudio/AudioParam\"> Web Audio Param</a>."
      ],
      "params": {
        "unit": "Object: p5.sound Object or Web Audio Param",
        "secondsFromNow": "Number: time from now (in seconds)"
      }
    },
    "triggerRelease": {
      "description": [
        "Trigger the Release of the Envelope. This is similar to releasing the key on a piano and letting the sound fade according to the release level and release time."
      ],
      "params": {
        "unit": "Object: p5.sound Object or Web Audio Param",
        "secondsFromNow": "Number: time to trigger the release"
      }
    },
    "ramp": {
      "description": [
        "Exponentially ramp to a value using the first two values from <code><a href=\"#/p5.Envelope/setADSR\">setADSR(attackTime, decayTime)</a></code> as <a href=\"https://en.wikipedia.org/wiki/RC_time_constant\"> time constants</a> for simple exponential ramps. If the value is higher than current value, it uses attackTime, while a decrease uses decayTime."
      ],
      "params": {
        "unit": "Object: p5.sound Object or Web Audio Param",
        "secondsFromNow": "Number: When to trigger the ramp",
        "v": "Number: Target value",
        "v2": "Number: (Optional) Second target value"
      }
    },
    "add": {
      "description": [
        "Add a value to the p5.Oscillator's output amplitude, and return the oscillator. Calling this method again will override the initial add() with new values."
      ],
      "returns": "p5.Envelope: Envelope Returns this envelope  with scaled output",
      "params": {
        "number": "Number: Constant number to add"
      }
    },
    "mult": {
      "description": [
        "Multiply the p5.Envelope's output amplitude by a fixed value. Calling this method again will override the initial mult() with new values."
      ],
      "returns": "p5.Envelope: Envelope Returns this envelope  with scaled output",
      "params": {
        "number": "Number: Constant number to multiply"
      }
    },
    "scale": {
      "description": [
        "Scale this envelope's amplitude values to a given range, and return the envelope. Calling this method again will override the initial scale() with new values."
      ],
      "returns": "p5.Envelope: Envelope Returns this envelope  with scaled output",
      "params": {
        "inMin": "Number: input range minumum",
        "inMax": "Number: input range maximum",
        "outMin": "Number: input range minumum",
        "outMax": "Number: input range maximum"
      }
    }
  },
  "p5.Noise": {
    "description": [
      "Noise is a type of oscillator that generates a buffer with random values."
    ],
    "params": {
      "type": "String: Type of noise can be 'white' (default),  'brown' or 'pink'."
    },
    "setType": {
      "description": [
        "Set type of noise to 'white', 'pink' or 'brown'. White is the default."
      ],
      "params": {
        "type": "String: (Optional) 'white', 'pink' or 'brown'"
      }
    }
  },
  "p5.Pulse": {
    "description": [
      "Creates a Pulse object, an oscillator that implements Pulse Width Modulation. The pulse is created with two oscillators. Accepts a parameter for frequency, and to set the width between the pulses. See <a href=\" http://p5js.org/reference/#/p5.Oscillator\"> <code>p5.Oscillator</code> for a full list of methods."
    ],
    "params": {
      "freq": "Number: (Optional) Frequency in oscillations per second (Hz)",
      "w": "Number: (Optional) Width between the pulses (0 to 1.0,  defaults to 0)"
    },
    "width": {
      "description": [
        "Set the width of a Pulse object (an oscillator that implements Pulse Width Modulation)."
      ],
      "params": {
        "width": "Number: (Optional) Width between the pulses (0 to 1.0,  defaults to 0)"
      }
    }
  },
  "p5.AudioIn": {
    "description": [
      "Get audio from an input, i.e. your computer's microphone.",
      "Turn the mic on/off with the start() and stop() methods. When the mic is on, its volume can be measured with getLevel or by connecting an FFT object.",
      "If you want to hear the AudioIn, use the .connect() method. AudioIn does not connect to p5.sound output by default to prevent feedback.",
      "<em>Note: This uses the <a href=\"http://caniuse.com/stream\">getUserMedia/ Stream</a> API, which is not supported by certain browsers. Access in Chrome browser is limited to localhost and https, but access over http may be limited.</em>"
    ],
    "params": {
      "errorCallback": "Function: (Optional) A function to call if there is an error  accessing the AudioIn. For example,  Safari and iOS devices do not  currently allow microphone access."
    },
    "input": {},
    "output": {},
    "stream": {},
    "mediaStream": {},
    "currentSource": {},
    "enabled": {
      "description": [
        "Client must allow browser to access their microphone / audioin source. Default: false. Will become true when the client enables access."
      ]
    },
    "amplitude": {
      "description": [
        "Input amplitude, connect to it by default but not to master out"
      ]
    },
    "start": {
      "description": [
        "Start processing audio input. This enables the use of other AudioIn methods like getLevel(). Note that by default, AudioIn is not connected to p5.sound's output. So you won't hear anything unless you use the connect() method.<br/>",
        "Certain browsers limit access to the user's microphone. For example, Chrome only allows access from localhost and over https. For this reason, you may want to include an errorCallback—a function that is called in case the browser won't provide mic access."
      ],
      "params": {
        "successCallback": "Function: (Optional) Name of a function to call on  success.",
        "errorCallback": "Function: (Optional) Name of a function to call if  there was an error. For example,  some browsers do not support  getUserMedia."
      }
    },
    "stop": {
      "description": [
        "Turn the AudioIn off. If the AudioIn is stopped, it cannot getLevel(). If re-starting, the user may be prompted for permission access."
      ]
    },
    "connect": {
      "description": [
        "Connect to an audio unit. If no parameter is provided, will connect to the main output (i.e. your speakers).<br/>"
      ],
      "params": {
        "unit": "Object: (Optional) An object that accepts audio input,  such as an FFT"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect the AudioIn from all audio units. For example, if connect() had been called, disconnect() will stop sending signal to your speakers.<br/>"
      ]
    },
    "getLevel": {
      "description": [
        "Read the Amplitude (volume level) of an AudioIn. The AudioIn class contains its own instance of the Amplitude class to help make it easy to get a microphone's volume level. Accepts an optional smoothing value (0.0 < 1.0). <em>NOTE: AudioIn must .start() before using .getLevel().</em><br/>"
      ],
      "returns": "Number: Volume level (between 0.0 and 1.0)",
      "params": {
        "smoothing": "Number: (Optional) Smoothing is 0.0 by default.  Smooths values based on previous values."
      }
    },
    "amp": {
      "description": [
        "Set amplitude (volume) of a mic input between 0 and 1.0. <br/>"
      ],
      "params": {
        "vol": "Number: between 0 and 1.0",
        "time": "Number: (Optional) ramp time (optional)"
      }
    },
    "getSources": {
      "description": [
        "Returns a list of available input sources. This is a wrapper for <a href=\"https://developer.mozilla.org/ en-US/docs/Web/API/MediaDevices/enumerateDevices\" target=\"_blank\"> MediaDevices.enumerateDevices() - Web APIs | MDN</a> and it returns a Promise."
      ],
      "returns": "Promise: Returns a Promise that can be used in place of the callbacks, similar  to the enumerateDevices() method",
      "params": {
        "successCallback": "Function: (Optional) This callback function handles the sources when they  have been enumerated. The callback function  receives the deviceList array as its only argument",
        "errorCallback": "Function: (Optional) This optional callback receives the error  message as its argument."
      }
    },
    "setSource": {
      "description": [
        "Set the input source. Accepts a number representing a position in the array returned by getSources(). This is only available in browsers that support  <a href=\"https://developer.mozilla.org/  en-US/docs/Web/API/MediaDevices/enumerateDevices\" target=\"_blank\">  navigator.mediaDevices.enumerateDevices()</a>"
      ],
      "params": {
        "num": "Number: position of input source in the array"
      }
    }
  },
  "p5.Effect": {
    "description": [
      "Effect is a base class for audio effects in p5. This module handles the nodes and methods that are common and useful for current and future effects.",
      "This class is extended by <a href=\"/reference/#/p5.Distortion\">p5.Distortion</a>, <a href=\"/reference/#/p5.Compressor\">p5.Compressor</a>, <a href=\"/reference/#/p5.Delay\">p5.Delay</a>, <a href=\"/reference/#/p5.Filter\">p5.Filter</a>, <a href=\"/reference/#/p5.Reverb\">p5.Reverb</a>."
    ],
    "params": {
      "ac": "Object: (Optional) Reference to the audio context of the p5 object",
      "input": "AudioNode: (Optional) Gain Node effect wrapper",
      "output": "AudioNode: (Optional) Gain Node effect wrapper",
      "_drywet": "Object: (Optional) Tone.JS CrossFade node (defaults to value: 1)",
      "wet": "AudioNode: (Optional) Effects that extend this class should connect  to the wet signal to this gain node, so that dry and wet  signals are mixed properly."
    },
    "amp": {
      "description": ["Set the output volume of the filter."],
      "params": {
        "vol": "Number: (Optional) amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts until rampTime",
        "tFromNow": "Number: (Optional) schedule this event to happen in tFromNow seconds"
      }
    },
    "chain": {
      "description": [
        "Link effects together in a chain Example usage: filter.chain(reverb, delay, panner); May be used with an open-ended number of arguments"
      ],
      "params": {
        "arguments": "Object: (Optional) Chain together multiple sound objects"
      }
    },
    "drywet": {
      "description": ["Adjust the dry/wet value."],
      "params": {
        "fade": "Number: (Optional) The desired drywet value (0 - 1.0)"
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.js-sound, Web Audio Node, or use signal to control an AudioParam"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": ["Disconnect all output."]
    }
  },
  "p5.Filter": {
    "description": [
      "A p5.Filter uses a Web Audio Biquad Filter to filter the frequency response of an input source. Subclasses include: <a href=\"/reference/#/p5.LowPass\"><code>p5.LowPass</code></a>: Allows frequencies below the cutoff frequency to pass through, and attenuates frequencies above the cutoff.<br/> <a href=\"/reference/#/p5.HighPass\"><code>p5.HighPass</code></a>: The opposite of a lowpass filter. <br/> <a href=\"/reference/#/p5.BandPass\"><code>p5.BandPass</code></a>: Allows a range of frequencies to pass through and attenuates the frequencies below and above this frequency range.<br/>",
      "The <code>.res()</code> method controls either width of the bandpass, or resonance of the low/highpass cutoff frequency.",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "params": {
      "type": "String: (Optional) 'lowpass' (default), 'highpass', 'bandpass'"
    },
    "biquadFilter": {
      "description": [
        "The p5.Filter is built with a <a href=\"http://www.w3.org/TR/webaudio/#BiquadFilterNode\"> Web Audio BiquadFilter Node</a>."
      ]
    },
    "process": {
      "description": [
        "Filter an audio signal according to a set of filter parameters."
      ],
      "params": {
        "Signal": "Object: An object that outputs audio",
        "freq": "Number: (Optional) Frequency in Hz, from 10 to 22050",
        "res": "Number: (Optional) Resonance/Width of the filter frequency  from 0.001 to 1000"
      }
    },
    "set": {
      "description": ["Set the frequency and the resonance of the filter."],
      "params": {
        "freq": "Number: (Optional) Frequency in Hz, from 10 to 22050",
        "res": "Number: (Optional) Resonance (Q) from 0.001 to 1000",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "freq": {
      "description": [
        "Set the filter frequency, in Hz, from 10 to 22050 (the range of human hearing, although in reality most people hear in a narrower range)."
      ],
      "returns": "Number: value Returns the current frequency value",
      "params": {
        "freq": "Number: Filter Frequency",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "res": {
      "description": [
        "Controls either width of a bandpass frequency, or the resonance of a low/highpass cutoff frequency."
      ],
      "returns": "Number: value Returns the current res value",
      "params": {
        "res": "Number: Resonance/Width of filter freq  from 0.001 to 1000",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "gain": {
      "description": [
        "Controls the gain attribute of a Biquad Filter. This is distinctly different from .amp() which is inherited from p5.Effect .amp() controls the volume via the output gain node p5.Filter.gain() controls the gain parameter of a Biquad Filter node."
      ],
      "returns": "Number: Returns the current or updated gain value",
      "params": {
        "gain": "Number"
      }
    },
    "toggle": {
      "description": [
        "Toggle function. Switches between the specified type and allpass"
      ],
      "returns": "Boolean: [Toggle value]"
    },
    "setType": {
      "description": [
        "Set the type of a p5.Filter. Possible types include: \"lowpass\" (default), \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \"notch\", \"allpass\"."
      ],
      "params": {
        "t": "String"
      }
    }
  },
  "p5.LowPass": {
    "description": [
      "Constructor: <code>new p5.LowPass()</code> Filter. This is the same as creating a p5.Filter and then calling its method <code>setType('lowpass')</code>. See p5.Filter for methods."
    ]
  },
  "p5.HighPass": {
    "description": [
      "Constructor: <code>new p5.HighPass()</code> Filter. This is the same as creating a p5.Filter and then calling its method <code>setType('highpass')</code>. See p5.Filter for methods."
    ]
  },
  "p5.BandPass": {
    "description": [
      "Constructor: <code>new p5.BandPass()</code> Filter. This is the same as creating a p5.Filter and then calling its method <code>setType('bandpass')</code>. See p5.Filter for methods."
    ]
  },
  "p5.EQ": {
    "description": [
      "p5.EQ is an audio effect that performs the function of a multiband audio equalizer. Equalization is used to adjust the balance of frequency compoenents of an audio signal. This process is commonly used in sound production and recording to change the waveform before it reaches a sound output device. EQ can also be used as an audio effect to create interesting distortions by filtering out parts of the spectrum. p5.EQ is built using a chain of Web Audio Biquad Filter Nodes and can be instantiated with 3 or 8 bands. Bands can be added or removed from the EQ by directly modifying p5.EQ.bands (the array that stores filters).",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "returns": "Object: p5.EQ object",
    "params": {
      "_eqsize": "Number: (Optional) Constructor will accept 3 or 8, defaults to 3"
    },
    "bands": {
      "description": [
        "The p5.EQ is built with abstracted p5.Filter objects. To modify any bands, use methods of the <a href=\"/reference/#/p5.Filter\" title=\"p5.Filter reference\"> p5.Filter</a> API, especially <code>gain</code> and <code>freq</code>. Bands are stored in an array, with indices 0 - 3, or 0 - 7"
      ]
    },
    "process": {
      "description": ["Process an input by connecting it to the EQ"],
      "params": {
        "src": "Object: Audio source"
      }
    }
  },
  "p5.Panner3D": {
    "description": [
      "Panner3D is based on the <a title=\"Web Audio Panner docs\" href= \"https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\"> Web Audio Spatial Panner Node</a>. This panner is a spatial processing node that allows audio to be positioned and oriented in 3D space.",
      "The position is relative to an <a title=\"Web Audio Listener docs\" href= \"https://developer.mozilla.org/en-US/docs/Web/API/AudioListener\"> Audio Context Listener</a>, which can be accessed by <code>p5.soundOut.audiocontext.listener</code>"
    ],
    "panner": {
      "description": [
        "<a title=\"Web Audio Panner docs\" href= \"https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\"> Web Audio Spatial Panner Node</a>",
        "Properties include  <a href=\"https://www.w3.org/TR/webaudio/#idl-def-PanningModelType\">Panning Model</a>  : \"equal power\" or \"HRTF\"  <a href=\"https://www.w3.org/TR/webaudio/#idl-def-DistanceModelType\">DistanceModel</a> : \"linear\", \"inverse\", or \"exponential\""
      ]
    },
    "process": {
      "description": ["Connect an audio sorce"],
      "params": {
        "src": "Object: Input source"
      }
    },
    "set": {
      "description": ["Set the X,Y,Z position of the Panner"],
      "returns": "Array: Updated x, y, z values as an array",
      "params": {
        "xVal": "Number",
        "yVal": "Number",
        "zVal": "Number",
        "time": "Number"
      }
    },
    "positionX": {
      "description": ["Getter and setter methods for position coordinates"],
      "returns": "Number: updated coordinate value"
    },
    "positionY": {
      "description": ["Getter and setter methods for position coordinates"],
      "returns": "Number: updated coordinate value"
    },
    "positionZ": {
      "description": ["Getter and setter methods for position coordinates"],
      "returns": "Number: updated coordinate value"
    },
    "orient": {
      "description": ["Set the X,Y,Z position of the Panner"],
      "returns": "Array: Updated x, y, z values as an array",
      "params": {
        "xVal": "Number",
        "yVal": "Number",
        "zVal": "Number",
        "time": "Number"
      }
    },
    "orientX": {
      "description": ["Getter and setter methods for orient coordinates"],
      "returns": "Number: updated coordinate value"
    },
    "orientY": {
      "description": ["Getter and setter methods for orient coordinates"],
      "returns": "Number: updated coordinate value"
    },
    "orientZ": {
      "description": ["Getter and setter methods for orient coordinates"],
      "returns": "Number: updated coordinate value"
    },
    "setFalloff": {
      "description": ["Set the rolloff factor and max distance"],
      "params": {
        "maxDistance": "Number (Optional)",
        "rolloffFactor": "Number (Optional)"
      }
    },
    "maxDist": {
      "description": ["Maxium distance between the source and the listener"],
      "returns": "Number: updated value",
      "params": {
        "maxDistance": "Number"
      }
    },
    "rollof": {
      "description": [
        "How quickly the volume is reduced as the source moves away from the listener"
      ],
      "returns": "Number: updated value",
      "params": {
        "rolloffFactor": "Number"
      }
    }
  },
  "p5.Delay": {
    "description": [
      "Delay is an echo effect. It processes an existing sound source, and outputs a delayed version of that sound. The p5.Delay can produce different effects depending on the delayTime, feedback, filter, and type. In the example below, a feedback of 0.5 (the default value) will produce a looping delay that decreases in volume by 50% each repeat. A filter will cut out the high frequencies so that the delay does not sound as piercing as the original source.",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "leftDelay": {
      "description": [
        "The p5.Delay is built with two <a href=\"http://www.w3.org/TR/webaudio/#DelayNode\"> Web Audio Delay Nodes</a>, one for each stereo channel."
      ]
    },
    "rightDelay": {
      "description": [
        "The p5.Delay is built with two <a href=\"http://www.w3.org/TR/webaudio/#DelayNode\"> Web Audio Delay Nodes</a>, one for each stereo channel."
      ]
    },
    "process": {
      "description": [
        "Add delay to an audio signal according to a set of delay parameters."
      ],
      "params": {
        "Signal": "Object: An object that outputs audio",
        "delayTime": "Number: (Optional) Time (in seconds) of the delay/echo.  Some browsers limit delayTime to  1 second.",
        "feedback": "Number: (Optional) sends the delay back through itself  in a loop that decreases in volume  each time.",
        "lowPass": "Number: (Optional) Cutoff frequency. Only frequencies  below the lowPass will be part of the  delay."
      }
    },
    "delayTime": {
      "description": [
        "Set the delay (echo) time, in seconds. Usually this value will be a floating point number between 0.0 and 1.0."
      ],
      "params": {
        "delayTime": "Number: Time (in seconds) of the delay"
      }
    },
    "feedback": {
      "description": [
        "Feedback occurs when Delay sends its signal back through its input in a loop. The feedback amount determines how much signal to send each time through the loop. A feedback greater than 1.0 is not desirable because it will increase the overall output each time through the loop, creating an infinite feedback loop. The default value is 0.5"
      ],
      "returns": "Number: Feedback value",
      "params": {
        "feedback": "Number|Object: 0.0 to 1.0, or an object such as an  Oscillator that can be used to  modulate this param"
      }
    },
    "filter": {
      "description": [
        "Set a lowpass filter frequency for the delay. A lowpass filter will cut off any frequencies higher than the filter frequency."
      ],
      "params": {
        "cutoffFreq": "Number|Object: A lowpass filter will cut off any  frequencies higher than the filter frequency.",
        "res": "Number|Object: Resonance of the filter frequency  cutoff, or an object (i.e. a p5.Oscillator)  that can be used to modulate this parameter.  High numbers (i.e. 15) will produce a resonance,  low numbers (i.e. .2) will produce a slope."
      }
    },
    "setType": {
      "description": [
        "Choose a preset type of delay. 'pingPong' bounces the signal from the left to the right channel to produce a stereo effect. Any other parameter will revert to the default delay setting."
      ],
      "params": {
        "type": "String|Number: 'pingPong' (1) or 'default' (0)"
      }
    },
    "amp": {
      "description": ["Set the output level of the delay effect."],
      "params": {
        "volume": "Number: amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "connect": {
      "description": ["Send output to a p5.sound or web audio object"],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": ["Disconnect all output."]
    }
  },
  "p5.Reverb": {
    "description": [
      "Reverb adds depth to a sound through a large number of decaying echoes. It creates the perception that sound is occurring in a physical space. The p5.Reverb has paramters for Time (how long does the reverb last) and decayRate (how much the sound decays with each echo) that can be set with the .set() or .process() methods. The p5.Convolver extends p5.Reverb allowing you to recreate the sound of actual physical spaces through convolution.",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "process": {
      "description": [
        "Connect a source to the reverb, and assign reverb parameters."
      ],
      "params": {
        "src": "Object: p5.sound / Web Audio object with a sound  output.",
        "seconds": "Number: (Optional) Duration of the reverb, in seconds.  Min: 0, Max: 10. Defaults to 3.",
        "decayRate": "Number: (Optional) Percentage of decay with each echo.  Min: 0, Max: 100. Defaults to 2.",
        "reverse": "Boolean: (Optional) Play the reverb backwards or forwards."
      }
    },
    "set": {
      "description": [
        "Set the reverb settings. Similar to .process(), but without assigning a new input."
      ],
      "params": {
        "seconds": "Number: (Optional) Duration of the reverb, in seconds.  Min: 0, Max: 10. Defaults to 3.",
        "decayRate": "Number: (Optional) Percentage of decay with each echo.  Min: 0, Max: 100. Defaults to 2.",
        "reverse": "Boolean: (Optional) Play the reverb backwards or forwards."
      }
    },
    "amp": {
      "description": ["Set the output level of the reverb effect."],
      "params": {
        "volume": "Number: amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "connect": {
      "description": ["Send output to a p5.sound or web audio object"],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": ["Disconnect all output."]
    }
  },
  "p5.Convolver": {
    "description": [
      "p5.Convolver extends p5.Reverb. It can emulate the sound of real physical spaces through a process called <a href=\" https://en.wikipedia.org/wiki/Convolution_reverb#Real_space_simulation\"> convolution</a>.",
      "Convolution multiplies any audio input by an \"impulse response\" to simulate the dispersion of sound over time. The impulse response is generated from an audio file that you provide. One way to generate an impulse response is to pop a balloon in a reverberant space and record the echo. Convolution can also be used to experiment with sound.",
      "Use the method <code>createConvolution(path)</code> to instantiate a p5.Convolver with a path to your impulse response audio file."
    ],
    "params": {
      "path": "String: path to a sound file",
      "callback": "Function: (Optional) function to call when loading succeeds",
      "errorCallback": "Function: (Optional) function to call if loading fails.  This function will receive an error or  XMLHttpRequest object with information  about what went wrong."
    },
    "convolverNode": {
      "description": [
        "Internally, the p5.Convolver uses the a <a href=\"http://www.w3.org/TR/webaudio/#ConvolverNode\"> Web Audio Convolver Node</a>."
      ]
    },
    "impulses": {
      "description": [
        "If you load multiple impulse files using the .addImpulse method, they will be stored as Objects in this Array. Toggle between them with the <code>toggleImpulse(id)</code> method."
      ]
    },
    "process": {
      "description": ["Connect a source to the convolver."],
      "params": {
        "src": "Object: p5.sound / Web Audio object with a sound  output."
      }
    },
    "addImpulse": {
      "description": [
        "Load and assign a new Impulse Response to the p5.Convolver. The impulse is added to the <code>.impulses</code> array. Previous impulses can be accessed with the <code>.toggleImpulse(id)</code> method."
      ],
      "params": {
        "path": "String: path to a sound file",
        "callback": "Function: function (optional)",
        "errorCallback": "Function: function (optional)"
      }
    },
    "resetImpulse": {
      "description": [
        "Similar to .addImpulse, except that the <code>.impulses</code> Array is reset to save memory. A new <code>.impulses</code> array is created with this impulse as the only item."
      ],
      "params": {
        "path": "String: path to a sound file",
        "callback": "Function: function (optional)",
        "errorCallback": "Function: function (optional)"
      }
    },
    "toggleImpulse": {
      "description": [
        "If you have used <code>.addImpulse()</code> to add multiple impulses to a p5.Convolver, then you can use this method to toggle between the items in the <code>.impulses</code> Array. Accepts a parameter to identify which impulse you wish to use, identified either by its original filename (String) or by its position in the <code>.impulses </code> Array (Number).<br/> You can access the objects in the .impulses Array directly. Each Object has two attributes: an <code>.audioBuffer</code> (type: Web Audio <a href=\" http://webaudio.github.io/web-audio-api/#the-audiobuffer-interface\"> AudioBuffer)</a> and a <code>.name</code>, a String that corresponds with the original filename."
      ],
      "params": {
        "id": "String|Number: Identify the impulse by its original filename  (String), or by its position in the  <code>.impulses</code> Array (Number)."
      }
    }
  },
  "p5.Phrase": {
    "description": [
      "A phrase is a pattern of musical events over time, i.e. a series of notes and rests.",
      "Phrases must be added to a p5.Part for playback, and each part can play multiple phrases at the same time. For example, one Phrase might be a kick drum, another could be a snare, and another could be the bassline.",
      "The first parameter is a name so that the phrase can be modified or deleted later. The callback is a a function that this phrase will call at every step—for example it might be called <code>playNote(value){}</code>. The array determines which value is passed into the callback at each step of the phrase. It can be numbers, an object with multiple numbers, or a zero (0) indicates a rest so the callback won't be called)."
    ],
    "params": {
      "name": "String: Name so that you can access the Phrase.",
      "callback": "Function: The name of a function that this phrase  will call. Typically it will play a sound,  and accept two parameters: a time at which  to play the sound (in seconds from now),  and a value from the sequence array. The  time should be passed into the play() or  start() method to ensure precision.",
      "sequence": "Array: Array of values to pass into the callback  at each step of the phrase."
    },
    "sequence": {
      "description": [
        "Array of values to pass into the callback at each step of the phrase. Depending on the callback function's requirements, these values may be numbers, strings, or an object with multiple parameters. Zero (0) indicates a rest."
      ]
    }
  },
  "p5.Part": {
    "description": [
      "A p5.Part plays back one or more p5.Phrases. Instantiate a part with steps and tatums. By default, each step represents a 1/16th note.",
      "See p5.Phrase for more about musical timing."
    ],
    "params": {
      "steps": "Number: (Optional) Steps in the part",
      "tatums": "Number: (Optional) Divisions of a beat, e.g. use 1/4, or 0.25 for a quater note (default is 1/16, a sixteenth note)"
    },
    "setBPM": {
      "description": ["Set the tempo of this part, in Beats Per Minute."],
      "params": {
        "BPM": "Number: Beats Per Minute",
        "rampTime": "Number: (Optional) Seconds from now"
      }
    },
    "getBPM": {
      "description": ["Returns the tempo, in Beats Per Minute, of this part."],
      "returns": "Number:"
    },
    "start": {
      "description": [
        "Start playback of this part. It will play through all of its phrases at a speed determined by setBPM."
      ],
      "params": {
        "time": "Number: (Optional) seconds from now"
      }
    },
    "loop": {
      "description": [
        "Loop playback of this part. It will begin looping through all of its phrases at a speed determined by setBPM."
      ],
      "params": {
        "time": "Number: (Optional) seconds from now"
      }
    },
    "noLoop": {
      "description": ["Tell the part to stop looping."]
    },
    "stop": {
      "description": [
        "Stop the part and cue it to step 0. Playback will resume from the begining of the Part when it is played again."
      ],
      "params": {
        "time": "Number: (Optional) seconds from now"
      }
    },
    "pause": {
      "description": [
        "Pause the part. Playback will resume from the current step."
      ],
      "params": {
        "time": "Number: seconds from now"
      }
    },
    "addPhrase": {
      "description": ["Add a p5.Phrase to this Part."],
      "params": {
        "phrase": "p5.Phrase: reference to a p5.Phrase"
      }
    },
    "removePhrase": {
      "description": [
        "Remove a phrase from this part, based on the name it was given when it was created."
      ],
      "params": {
        "phraseName": "String"
      }
    },
    "getPhrase": {
      "description": [
        "Get a phrase from this part, based on the name it was given when it was created. Now you can modify its array."
      ],
      "params": {
        "phraseName": "String"
      }
    },
    "replaceSequence": {
      "description": [
        "Find all sequences with the specified name, and replace their patterns with the specified array."
      ],
      "params": {
        "phraseName": "String",
        "sequence": "Array: Array of values to pass into the callback  at each step of the phrase."
      }
    },
    "onStep": {
      "description": [
        "Set the function that will be called at every step. This will clear the previous function."
      ],
      "params": {
        "callback": "Function: The name of the callback  you want to fire  on every beat/tatum."
      }
    }
  },
  "p5.Score": {
    "description": [
      "A Score consists of a series of Parts. The parts will be played back in order. For example, you could have an A part, a B part, and a C part, and play them back in this order <code>new p5.Score(a, a, b, a, c)</code>"
    ],
    "params": {
      "parts": "p5.Part: (Optional) One or multiple parts, to be played in sequence."
    },
    "start": {
      "description": ["Start playback of the score."]
    },
    "stop": {
      "description": ["Stop playback of the score."]
    },
    "pause": {
      "description": ["Pause playback of the score."]
    },
    "loop": {
      "description": ["Loop playback of the score."]
    },
    "noLoop": {
      "description": [
        "Stop looping playback of the score. If it is currently playing, this will go into effect after the current round of playback completes."
      ]
    },
    "setBPM": {
      "description": ["Set the tempo for all parts in the score"],
      "params": {
        "BPM": "Number: Beats Per Minute",
        "rampTime": "Number: Seconds from now"
      }
    }
  },
  "p5.SoundLoop": {
    "description": ["SoundLoop"],
    "params": {
      "callback": "Function: this function will be called on each iteration of theloop",
      "interval": "Number|String: (Optional) amount of time (if a number) or beats (if a string, following <a href = \"https://github.com/Tonejs/Tone.js/wiki/Time\">Tone.Time</a> convention) for each iteration of the loop. Defaults to 1 second."
    },
    "bpm": {
      "description": [
        "Getters and Setters, setting any paramter will result in a change in the clock's frequency, that will be reflected after the next callback beats per minute (defaults to 60)"
      ]
    },
    "timeSignature": {
      "description": ["number of quarter notes in a measure (defaults to 4)"]
    },
    "interval": {
      "description": ["length of the loops interval"]
    },
    "iterations": {
      "description": ["how many times the callback has been called so far"]
    },
    "musicalTimeMode": {
      "description": [
        "musicalTimeMode uses <a href = \"https://github.com/Tonejs/Tone.js/wiki/Time\">Tone.Time</a> convention true if string, false if number"
      ]
    },
    "maxIterations": {
      "description": [
        "Set a limit to the number of loops to play. defaults to Infinity"
      ]
    },
    "start": {
      "description": ["Start the loop"],
      "params": {
        "timeFromNow": "Number: (Optional) schedule a starting time"
      }
    },
    "stop": {
      "description": ["Stop the loop"],
      "params": {
        "timeFromNow": "Number: (Optional) schedule a stopping time"
      }
    },
    "pause": {
      "description": ["Pause the loop"],
      "params": {
        "timeFromNow": "Number: (Optional) schedule a pausing time"
      }
    },
    "syncedStart": {
      "description": [
        "Synchronize loops. Use this method to start two or more loops in synchronization or to start a loop in synchronization with a loop that is already playing This method will schedule the implicit loop in sync with the explicit master loop i.e. loopToStart.syncedStart(loopToSyncWith)"
      ],
      "params": {
        "otherLoop": "Object: a p5.SoundLoop to sync with",
        "timeFromNow": "Number: (Optional) Start the loops in sync after timeFromNow seconds"
      }
    }
  },
  "p5.Compressor": {
    "description": [
      "Compressor is an audio effect class that performs dynamics compression on an audio input source. This is a very commonly used technique in music and sound production. Compression creates an overall louder, richer, and fuller sound by lowering the volume of louds and raising that of softs. Compression can be used to avoid clipping (sound distortion due to peaks in volume) and is especially useful when many sounds are played at once. Compression can be used on indivudal sound sources in addition to the main output.",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "compressor": {
      "description": [
        "The p5.Compressor is built with a <a href=\"https://www.w3.org/TR/webaudio/#the-dynamicscompressornode-interface\"  target=\"_blank\" title=\"W3 spec for Dynamics Compressor Node\">Web Audio Dynamics Compressor Node  </a>"
      ]
    },
    "process": {
      "description": [
        "Performs the same function as .connect, but also accepts optional parameters to set compressor's audioParams"
      ],
      "params": {
        "src": "Object: Sound source to be connected",
        "attack": "Number: (Optional) The amount of time (in seconds) to reduce the gain by 10dB,  default = .003, range 0 - 1",
        "knee": "Number: (Optional) A decibel value representing the range above the  threshold where the curve smoothly transitions to the \"ratio\" portion.  default = 30, range 0 - 40",
        "ratio": "Number: (Optional) The amount of dB change in input for a 1 dB change in output  default = 12, range 1 - 20",
        "threshold": "Number: (Optional) The decibel value above which the compression will start taking effect  default = -24, range -100 - 0",
        "release": "Number: (Optional) The amount of time (in seconds) to increase the gain by 10dB  default = .25, range 0 - 1"
      }
    },
    "set": {
      "description": ["Set the paramters of a compressor."],
      "params": {
        "attack": "Number: The amount of time (in seconds) to reduce the gain by 10dB,  default = .003, range 0 - 1",
        "knee": "Number: A decibel value representing the range above the  threshold where the curve smoothly transitions to the \"ratio\" portion.  default = 30, range 0 - 40",
        "ratio": "Number: The amount of dB change in input for a 1 dB change in output  default = 12, range 1 - 20",
        "threshold": "Number: The decibel value above which the compression will start taking effect  default = -24, range -100 - 0",
        "release": "Number: The amount of time (in seconds) to increase the gain by 10dB  default = .25, range 0 - 1"
      }
    },
    "attack": {
      "description": ["Get current attack or set value w/ time ramp"],
      "params": {
        "attack": "Number: (Optional) Attack is the amount of time (in seconds) to reduce the gain by 10dB,  default = .003, range 0 - 1",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "knee": {
      "description": ["Get current knee or set value w/ time ramp"],
      "params": {
        "knee": "Number: (Optional) A decibel value representing the range above the  threshold where the curve smoothly transitions to the \"ratio\" portion.  default = 30, range 0 - 40",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "ratio": {
      "description": ["Get current ratio or set value w/ time ramp"],
      "params": {
        "ratio": "Number: (Optional) The amount of dB change in input for a 1 dB change in output  default = 12, range 1 - 20",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "threshold": {
      "description": ["Get current threshold or set value w/ time ramp"],
      "params": {
        "threshold": "Number: The decibel value above which the compression will start taking effect  default = -24, range -100 - 0",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "release": {
      "description": ["Get current release or set value w/ time ramp"],
      "params": {
        "release": "Number: The amount of time (in seconds) to increase the gain by 10dB  default = .25, range 0 - 1",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "reduction": {
      "description": ["Return the current reduction value"],
      "returns": "Number: Value of the amount of gain reduction that is applied to the signal"
    }
  },
  "p5.PeakDetect": {
    "description": [
      "PeakDetect works in conjunction with p5.FFT to look for onsets in some or all of the frequency spectrum.",
      "To use p5.PeakDetect, call <code>update</code> in the draw loop and pass in a p5.FFT object.",
      "You can listen for a specific part of the frequency spectrum by setting the range between <code>freq1</code> and <code>freq2</code>.",
      "<code>threshold</code> is the threshold for detecting a peak, scaled between 0 and 1. It is logarithmic, so 0.1 is half as loud as 1.0.",
      "The update method is meant to be run in the draw loop, and <b>frames</b> determines how many loops must pass before another peak can be detected. For example, if the frameRate() = 60, you could detect the beat of a 120 beat-per-minute song with this equation: <code> framesPerPeak = 60 / (estimatedBPM / 60 );</code>",
      "Based on example contribtued by @b2renger, and a simple beat detection explanation by <a href=\"http://www.airtightinteractive.com/2013/10/making-audio-reactive-visuals/\" target=\"_blank\">Felix Turner</a>."
    ],
    "params": {
      "freq1": "Number: (Optional) lowFrequency - defaults to 20Hz",
      "freq2": "Number: (Optional) highFrequency - defaults to 20000 Hz",
      "threshold": "Number: (Optional) Threshold for detecting a beat between 0 and 1  scaled logarithmically where 0.1 is 1/2 the loudness  of 1.0. Defaults to 0.35.",
      "framesPerPeak": "Number: (Optional) Defaults to 20."
    },
    "isDetected": {
      "description": ["isDetected is set to true when a peak is detected."]
    },
    "update": {
      "description": [
        "The update method is run in the draw loop.",
        "Accepts an FFT object. You must call .analyze() on the FFT object prior to updating the peakDetect because it relies on a completed FFT analysis."
      ],
      "params": {
        "fftObject": "p5.FFT: A p5.FFT object"
      }
    },
    "onPeak": {
      "description": [
        "onPeak accepts two arguments: a function to call when a peak is detected. The value of the peak, between 0.0 and 1.0, is passed to the callback."
      ],
      "params": {
        "callback": "Function: Name of a function that will  be called when a peak is  detected.",
        "val": "Object: (Optional) Optional value to pass  into the function when  a peak is detected."
      }
    }
  },
  "p5.SoundRecorder": {
    "description": [
      "Record sounds for playback and/or to save as a .wav file. The p5.SoundRecorder records all sound output from your sketch, or can be assigned a specific source with setInput().",
      "The record() method accepts a p5.SoundFile as a parameter. When playback is stopped (either after the given amount of time, or with the stop() method), the p5.SoundRecorder will send its recording to that p5.SoundFile for playback."
    ],
    "setInput": {
      "description": [
        "Connect a specific device to the p5.SoundRecorder. If no parameter is given, p5.SoundRecorer will record all audible p5.sound from your sketch."
      ],
      "params": {
        "unit": "Object: (Optional) p5.sound object or a web audio unit  that outputs sound"
      }
    },
    "record": {
      "description": [
        "Start recording. To access the recording, provide a p5.SoundFile as the first parameter. The p5.SoundRecorder will send its recording to that p5.SoundFile for playback once recording is complete. Optional parameters include duration (in seconds) of the recording, and a callback function that will be called once the complete recording has been transfered to the p5.SoundFile."
      ],
      "params": {
        "soundFile": "p5.SoundFile: p5.SoundFile",
        "duration": "Number: (Optional) Time (in seconds)",
        "callback": "Function: (Optional) The name of a function that will be  called once the recording completes"
      }
    },
    "stop": {
      "description": [
        "Stop the recording. Once the recording is stopped, the results will be sent to the p5.SoundFile that was given on .record(), and if a callback function was provided on record, that function will be called."
      ]
    }
  },
  "p5.Distortion": {
    "description": [
      "A Distortion effect created with a Waveshaper Node, with an approach adapted from <a href=\"http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion\">Kevin Ennis</a>",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "params": {
      "amount": "Number: (Optional) Unbounded distortion amount.  Normal values range from 0-1.",
      "oversample": "String: (Optional) 'none', '2x', or '4x'."
    },
    "WaveShaperNode": {
      "description": [
        "The p5.Distortion is built with a <a href=\"http://www.w3.org/TR/webaudio/#WaveShaperNode\"> Web Audio WaveShaper Node</a>."
      ]
    },
    "process": {
      "description": [
        "Process a sound source, optionally specify amount and oversample values."
      ],
      "params": {
        "amount": "Number: (Optional) Unbounded distortion amount.  Normal values range from 0-1.",
        "oversample": "String: (Optional) 'none', '2x', or '4x'."
      }
    },
    "set": {
      "description": [
        "Set the amount and oversample of the waveshaper distortion."
      ],
      "params": {
        "amount": "Number: (Optional) Unbounded distortion amount.  Normal values range from 0-1.",
        "oversample": "String: (Optional) 'none', '2x', or '4x'."
      }
    },
    "getAmount": {
      "description": ["Return the distortion amount, typically between 0-1."],
      "returns": "Number: Unbounded distortion amount.  Normal values range from 0-1."
    },
    "getOversample": {
      "description": ["Return the oversampling."],
      "returns": "String: Oversample can either be 'none', '2x', or '4x'."
    }
  },
  "p5.Gain": {
    "description": [
      "A gain node is usefull to set the relative volume of sound. It's typically used to build mixers."
    ],
    "setInput": {
      "description": ["Connect a source to the gain node."],
      "params": {
        "src": "Object: p5.sound / Web Audio object with a sound  output."
      }
    },
    "connect": {
      "description": ["Send output to a p5.sound or web audio object"],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": ["Disconnect all output."]
    },
    "amp": {
      "description": ["Set the output level of the gain node."],
      "params": {
        "volume": "Number: amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    }
  },
  "p5.AudioVoice": {
    "description": [
      "Base class for monophonic synthesizers. Any extensions of this class should follow the API and implement the methods below in order to remain compatible with p5.PolySynth();"
    ],
    "connect": {
      "description": ["Connect to p5 objects or Web Audio Nodes"],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": ["Disconnect from soundOut"]
    }
  },
  "p5.MonoSynth": {
    "description": [
      "A MonoSynth is used as a single voice for sound synthesis. This is a class to be used in conjunction with the PolySynth class. Custom synthetisers should be built inheriting from this class."
    ],
    "attack": {
      "description": ["Getters and Setters"]
    },
    "decay": {},
    "sustain": {},
    "release": {},
    "play": {
      "description": [
        "Play tells the MonoSynth to start playing a note. This method schedules the calling of .triggerAttack and .triggerRelease."
      ],
      "params": {
        "note": "String | Number: the note you want to play, specified as a  frequency in Hertz (Number) or as a midi  value in Note/Octave format (\"C4\", \"Eb3\"...etc\")  See <a href = \"https://github.com/Tonejs/Tone.js/wiki/Instruments\">  Tone</a>. Defaults to 440 hz.",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)",
        "secondsFromNow": "Number: (Optional) time from now (in seconds) at which to play",
        "sustainTime": "Number: (Optional) time to sustain before releasing the envelope. Defaults to 0.15 seconds."
      }
    },
    "triggerAttack": {
      "description": [
        "Trigger the Attack, and Decay portion of the Envelope. Similar to holding down a key on a piano, but it will hold the sustain level until you let go."
      ],
      "params": {
        "note": "String | Number: the note you want to play, specified as a  frequency in Hertz (Number) or as a midi  value in Note/Octave format (\"C4\", \"Eb3\"...etc\")  See <a href = \"https://github.com/Tonejs/Tone.js/wiki/Instruments\">  Tone</a>. Defaults to 440 hz",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)",
        "secondsFromNow": "Number: (Optional) time from now (in seconds) at which to play"
      }
    },
    "triggerRelease": {
      "description": [
        "Trigger the release of the Envelope. This is similar to releasing the key on a piano and letting the sound fade according to the release level and release time."
      ],
      "params": {
        "secondsFromNow": "Number: time to trigger the release"
      }
    },
    "setADSR": {
      "description": [
        "Set values like a traditional <a href=\"https://en.wikipedia.org/wiki/Synthesizer#/media/File:ADSR_parameter.svg\"> ADSR envelope </a>."
      ],
      "params": {
        "attackTime": "Number: Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "amp": {
      "description": ["MonoSynth amp"],
      "returns": "Number: new volume value",
      "params": {
        "vol": "Number: desired volume",
        "rampTime": "Number: (Optional) Time to reach new volume"
      }
    },
    "connect": {
      "description": ["Connect to a p5.sound / Web Audio object."],
      "params": {
        "unit": "Object: A p5.sound or Web Audio object"
      }
    },
    "disconnect": {
      "description": ["Disconnect all outputs"]
    },
    "dispose": {
      "description": [
        "Get rid of the MonoSynth and free up its resources / memory."
      ]
    }
  },
  "p5.OnsetDetect": {
    "description": [
      "Listen for onsets (a sharp increase in volume) within a given frequency range."
    ],
    "params": {
      "freqLow": "Number: Low frequency",
      "freqHigh": "Number: High frequency",
      "threshold": "Number: Amplitude threshold between 0 (no energy) and 1 (maximum)",
      "callback": "Function: Function to call when an onset is detected"
    }
  },
  "p5.PolySynth": {
    "description": [
      "An AudioVoice is used as a single voice for sound synthesis. The PolySynth class holds an array of AudioVoice, and deals with voices allocations, with setting notes to be played, and parameters to be set."
    ],
    "params": {
      "synthVoice": "Number: (Optional) A monophonic synth voice inheriting  the AudioVoice class. Defaults to p5.MonoSynth",
      "maxVoices": "Number: (Optional) Number of voices, defaults to 8;"
    },
    "notes": {
      "description": [
        "An object that holds information about which notes have been played and which notes are currently being played. New notes are added as keys on the fly. While a note has been attacked, but not released, the value of the key is the audiovoice which is generating that note. When notes are released, the value of the key becomes undefined."
      ]
    },
    "polyvalue": {
      "description": ["A PolySynth must have at least 1 voice, defaults to 8"]
    },
    "AudioVoice": {
      "description": [
        "Monosynth that generates the sound for each note that is triggered. The p5.PolySynth defaults to using the p5.MonoSynth as its voice."
      ]
    },
    "play": {
      "description": [
        "Play a note by triggering noteAttack and noteRelease with sustain time"
      ],
      "params": {
        "note": "Number: (Optional) midi note to play (ranging from 0 to 127 - 60 being a middle C)",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)",
        "secondsFromNow": "Number: (Optional) time from now (in seconds) at which to play",
        "sustainTime": "Number: (Optional) time to sustain before releasing the envelope"
      }
    },
    "noteADSR": {
      "description": [
        "noteADSR sets the envelope for a specific note that has just been triggered. Using this method modifies the envelope of whichever audiovoice is being used to play the desired note. The envelope should be reset before noteRelease is called in order to prevent the modified envelope from being used on other notes."
      ],
      "params": {
        "note": "Number: (Optional) Midi note on which ADSR should be set.",
        "attackTime": "Number: (Optional) Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "setADSR": {
      "description": [
        "Set the PolySynths global envelope. This method modifies the envelopes of each monosynth so that all notes are played with this envelope."
      ],
      "params": {
        "attackTime": "Number: (Optional) Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "noteAttack": {
      "description": [
        "Trigger the Attack, and Decay portion of a MonoSynth. Similar to holding down a key on a piano, but it will hold the sustain level until you let go."
      ],
      "params": {
        "note": "Number: (Optional) midi note on which attack should be triggered.",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)/",
        "secondsFromNow": "Number: (Optional) time from now (in seconds)"
      }
    },
    "noteRelease": {
      "description": [
        "Trigger the Release of an AudioVoice note. This is similar to releasing the key on a piano and letting the sound fade according to the release level and release time."
      ],
      "params": {
        "note": "Number: (Optional) midi note on which attack should be triggered.  If no value is provided, all notes will be released.",
        "secondsFromNow": "Number: (Optional) time to trigger the release"
      }
    },
    "connect": {
      "description": ["Connect to a p5.sound / Web Audio object."],
      "params": {
        "unit": "Object: A p5.sound or Web Audio object"
      }
    },
    "disconnect": {
      "description": ["Disconnect all outputs"]
    },
    "dispose": {
      "description": [
        "Get rid of the MonoSynth and free up its resources / memory."
      ]
    }
  }
}
